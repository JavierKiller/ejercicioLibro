---
title: "Checking and Building R Packages"
---

## What does a "check" check?

In the video, we talked about a number of things that running a check tests for, but which of the following does a check not test:

## Answers question `50 XP` {.unnumbered}

-   Any vignettes can be built

-   Any unit tests in the package pass

-   Code runs as expected Respuesta

-   You have documented all your function arguments

## Running a check

Before a package can be made available on CRAN it is required to pass a series of checks that can be run from the command line using R CMD check. Even if you don't intend to make a package available on CRAN, it is good practice to run this and ensure that your package passes all of the checks. Just like all other build features this is simplified in devtools with the function check().

When you run check(), if the argument cran is set to TRUE, you run exactly the same checks which are run when you submit a package to CRAN. As the cran argument has a default value of TRUE, you do not need to do change it unless you do not wish to run all of the CRAN checks.

## Instructions `100 XP` {.unnumbered}

-   Use the check() function to check the datasummary package.

``` {.r filename="E1.R"}
# Check your package
check("datasummary")
```

## Undocumented parameters

If you've forgotten to document any of the parameters, when you run the check() function, you'll get a WARNING message that looks a bit like this:

> Undocumented arguments in documentation object 'numeric_summary' 'na.rm'

Note: you wouldn't normally get this error for non-exported functions

To remove this warning, you'll need to update the documentation for the parameter in the function's .R file, and then run check() again. You might think you need to run the document() function again. However, there's no need to do this, as check() automatically runs document() for you before completing its checks.

## Instructions `100 XP` {.unnumbered}

-   Update the roxygen header for the function "numeric_summary" to document the missing parameter (na.rm).
-   Include the following description for the parameter "a logical value indicating whether NA values should be stripped before the computation proceeds."

``` {.r filename="E2.R"}
#' Numeric Summaries
#' Summarises numeric data and returns a data frame containing the minimum value, median, standard deviation, and maximum value.
#'
#' @param x a numeric vector containing the values to summarize.
#' @param na.rm "a logical value indicating whether NA values should be stripped before the computation proceeds."
  
numeric_summary <- function(x, na.rm){

  if(!is.numeric(x)){
    stop("data must be numeric")
  }

  data.frame( min = min(x, na.rm = na.rm),
              median = median(x, na.rm = na.rm),
              sd = sd(x, na.rm = na.rm),
              max = max(x, na.rm = na.rm))
}
```

## Undefined global variables

The way in which you define variables in tidyverse package functions can cause confusion for the R CMD check, which sees column names and the name of your dataset, and flags them as "undefined global variables".

To get around this, you can manually specify the data and its columns as a vector to utils::globalVariables(), by including a line of code similar to the following in your package-level documentation:

> utils::globalVariables(c("dataset_name", "col_name_1", "col_name_2"))

This defines dataset_name, col_name_1, and col_name_2 as global variables, and now you shouldn't get the undefined global variables error.

## Instructions `100 XP` {.unnumbered}

A new function, get_mean_temp(), is available in your workspace. Take a look at what it does by running get_mean_temp (with no brackets) in the console. Update the package-level documentation so this function can be successfully added to your package without causing check() to fail because of "undefined global variables".

``` {.r filename="E3.R"}
#' datasummary: Custom Data Summaries
#'
#' Easily generate custom data frame summaries
#'
#' @docType package
#' @name datasummary
"_PACKAGE"

# Update this function call
utils::globalVariables(c("weather", "Temp"))

get_mean_temp
```

## Depends or imports?

The Depends and Imports fields in the DESCRIPTION file can cause a lot of confusion to those new to package building! Both of these fields contain package dependencies which are installed when you install the package. However, the difference between them is that the packages listed in depends are attached when the package is loaded, whereas the packages listed in imports are not.

This distinction is important because if two different packages have an identically named function, the version of the function from the package which has been loaded most recently will be used. Therefore, to make sure you are using the correct function, it is best practice to use imports to list your dependencies and then in your code explicitly name the package and function it's from in the form package::function(), e.g. dplyr::select().

In the majority of cases, you should only list the version of R required in the Depends field and the package in the Imports field.

Which of the following should you add to the Imports field in your description file for the datasummary package?

## Answers question `50 XP` {.unnumbered}

-   R (\>= 3.4.3)

-   dplyr   Respuesta

-   stats::filter

-   dplyr::filter

## Adding a dependency

In which field is it recommended that you list all of the packages that your package relies on, so they are also installed when your package is installed?

## Answers question `50 XP` {.unnumbered}

-   Depends

-   Suggests

-   Packages

-   Imports Respuesta

## Instructions `100 XP` {.unnumbered}

``` {.r filename="E4.R"}
# Add dplyr as an imported dependency to the DESCRIPTION file
use_package("dplyr", pkg = "datasummary")

# Add purrr as an imported dependency to the DESCRIPTION file
use_package("purrr", pkg = "datasummary")

# Add tidyr as an imported dependency to the DESCRIPTION file
use_package("tidyr", pkg = "datasummary")
```

## Building an R package

Once you have created the correct structure, included all of your functions, created the package documentation and ensured that the checks pass you can then build your package so that it is in a shareable format.

You can build your package using the build() function from devtools. You can use this function to build either a source version of the package, or a Windows/Mac specific binary version. The source version of the package will have a file ending of ".tar.gz" and the binary will take the ending ".zip" (Windows) or ".tgz" (Mac). You can only build binaries for the current platform that you're using. The build() function builds the source version of the package by default.

## Instructions `100 XP` {.unnumbered}

-   Build the source version of the datasummary package.
-   Look at the contents of the current directory using dir() to see the built version of your package.

``` {.r filename="E5.R"}
# Build the package
build("datasummary")

# Examine the contents of the current directory
dir()
```

## Setting a package up for using Travis

You can run use_github() and use_travis() to set up your package for use with GitHub and Travis CI. GitHub is a popular website used for storing code and version control, and Travis CI is used for continuous integration, but what actually is continuous integration?

## Answers question `50 XP` {.unnumbered}

-   Another way of storing your code

-   A way of maintaining multiple versions of your code

-   A way of writing tests for your code

-   A way of running checks every time you update your code Respuesta
