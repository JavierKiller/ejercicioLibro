---
title: "The R Package Structure"
---

## The structure of an R package

You can use devtools to create the basic structure of an R package by using the create() function.

There are some optional arguments to this function but the main one that you will use is the path argument. You use this to specify where your package will be created and the name that your package will take.

If you want to create the package in your current working directory, as you often will, you just need to supply the name for the package. When naming your package remember to think about:

If the name is already taken by another package. Whether the name makes it clear what the package does. devtools is loaded in your workspace.

## Instructions `100 XP` {.unnumbered}

-   Use the create() function to create a new R package called datasummary.
-   Use the dir() function to see what files and directories are created in your package.

``` {.r filename="E1.R"}
# Use the create function to set up your first package
create("datasummary")

# Take a look at the files and folders in your package
dir("datasummary")
```

## Contents of an R package

When you create an R package there are a number of files and folders that it can contain. This can include folders to store data, user guides (known as vignettes), tests (more on these later in the course) and demos among others. As a minimum there are only two directories that must be included along with two additional files -- the DESCRIPTION and the NAMESPACE.

Of the two compulsory directories one contains all of the user guides for your functions. As you will see later in the course this is created in a special way for you. The other is included by the create() function. Which of the following is the second compulsory directory?

## Answers question `50 XP` {.unnumbered}

Possible Answers

-   data

-   tests

-   inst

-   R Respuesta

## Writing a simple function

Whilst there are packages that contain only data, typically packages are created to collect together functions for performing a specific task. If you need a refresher on writing functions you might want to review the course Writing Functions in R.

For your package you are going to keep the functions simple. You are going to create a package that produces custom summary output for your data.

## Instructions `100 XP` {.unnumbered}

-   Write a function, numeric_summary(), that takes two arguments, a vector x and the logical na.rm.
-   Include a check to your function so it fails with an error message if the vector x is not numeric.
-   The function should return a data.frame containing the minimum, median, standard deviation and maximum values.
-   Check that your function works using the Ozone column of the airquality data and removing missing values.

``` {.r filename="E2.R"}
# Create numeric_summary() function
numeric_summary <- function(x, na.rm) {

    # Include an error if x is not numeric
    if(!is.numeric(x)){
        stop("Data must be numeric")
    }
    
    # Create data frame
    data.frame( min = min(x, na.rm = na.rm),
                median = median(x, na.rm = na.rm),
                sd = sd(x, na.rm = na.rm),
                max = max(x, na.rm = na.rm))
}

# Test numeric_summary() function
numeric_summary(airquality$Ozone, na.rm=TRUE)
```

## Including functions in a package

Once you have written your function code you need to save it in the R directory of your package. Typically you can do that by saving an R script in the usual manner (i.e. "Save As").

In the instance that you already have objects created, as you did in the last exercise, that you want to write to the R directory you can do this programmatically. You can use the function dump() to send a named R function to a particular file. The two arguments that you need to pass to this function are the name of the R object, as a character string, and the path to the file that you want to create, including the extension .R.

The package datasummary has already been created, along with the function numeric_summary() and is available in your workspace.

## Instructions `100 XP` {.unnumbered}

-   Use the dir() function again to see what is currently available in the R directory of datasummary.
-   Using the dump() function, write the numeric_summary() function to the R directory, saving the file as numeric_summary.R.
-   Print the contents of the R directory again.

``` {.r filename="E3.R"}
# What is in the R directory before adding a function?
dir("datasummary/R")

# Use the dump() function to write the numeric_summary function
dump("numeric_summary", file = "datasummary/R/numeric_summary.R")

# Verify that the file is in the correct directory
dir("datasummary/R")
```

## Package names

When you name your package you have to consider a number of things, from whether the name is already taken to if it makes it clear to users what the package might do. You also have to consider naming conventions. Regardless of whether you are putting your package on CRAN or not you should take the same care when you name your packages.

Suppose you were to create a new package that takes some data and tidies it into a format that you can work with further. Which of the following names would be recommended?

## Answers question `50 XP` {.unnumbered}

-   tidyr

-   tidy-data

-   tidy_data

-   tidydata Respuesta

## Writing a DESCRIPTION file

The DESCRIPTION file is used to provide information about the package. A template file is created for you by devtools that you can edit appropriately for your package. Which of the following items are NOT included in the DESCRIPTION file?

## Answers question `50 XP` {.unnumbered}

-   Author and maintainer details

-   Functions that the package contains Respuesta

-   Package dependencies

-   License

## Detailing authors, maintainers and contributors

Often a package is not the work of just one person but contributions from a number of people. This could be fellow authors, someone who has contributed elements of code to the package such as a bug fix, a thesis advisor or many, many more!

Which of the following roles would you include in the Authors\@R field to describe the package maintainer?

## Answers question `50 XP` {.unnumbered}

-   cph

-   ctb

-   cre Respuesta

-   aut

## The use\_\* functions

Beyond the required structure you can include a number of additional directories containing elements such as vignettes (user guides), data and unit tests. The devtools package makes it really simple for you to add to the package structure by providing a series of use\_\* functions. For example, use_data() and use_vignette(). Note that when adding vignettes, it's best not to include any spaces in the vignette name.

When you are adding data you need to provide the name of the data object along with the argument pkg, giving the path to the package that you want to put your data in.

devtools is loaded in your workspace.

## Instructions `100 XP` {.unnumbered}

-   Using the dir() function, check what directories are currently in the package?
-   The weather dataset has been created for you. Add it to your package.
-   Add a vignette titled "Generating_Summaries_with_Data_Summary".

``` {.r filename="E4.R"}
# What is in the package at the moment?
dir("datasummary")

# Add the weather data
use_data(weather, pkg = "datasummary", overwrite = TRUE)

# Add a vignette called "Generating Summaries with Data Summary"
use_vignette("Generating_Summaries_with_Data_Summary", pkg = "datasummary")

# What directories do you now have in your package now?
dir("datasummary")
```

## Best practice for structuring code

A typical R package contains a number of functions that you need to maintain. Whilst there are no strict rules around how you should structure code in a package you generally want to avoid having all of your code in a single script. As you can't have sub-directories you also need to think carefully about how you name the file so that you can find your code again in the future.

Suppose you were to write another function for your package that takes all numeric columns in your data and returns a data frame of all of their summary statistics. What would be the best way to structure this code?

## Instructions `100 XP` {.unnumbered}

-   Send the new data_summary() function to a new file taking the same name as the function (You should use the dump() function here).

``` {.r filename="E5.R"}
data_summary <- function(x, na.rm = TRUE){
  
  num_data <- select_if(x, .predicate = is.numeric) 
  
  map_df(num_data, .f = numeric_summary, na.rm = TRUE, .id = "ID")
  
}

# Write the function to the R directory
dump("data_summary", file = "datasummary/R/data_summary.R")
```
