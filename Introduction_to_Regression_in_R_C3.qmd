---
title: "Assessing model fit"
---

## Coefficient of determination

The coefficient of determination is a measure of how well the linear regression line fits the observed values. For simple linear regression, it is equal to the square of the correlation between the explanatory and response variables.

Here, you'll take another look at the second stage of the advertising pipeline: modeling the click response to impressions. Two models are available: mdl_click_vs_impression_orig models n_clicks versus n_impressions. mdl_click_vs_impression_trans is the transformed model you saw in Chapter 2. It models n_clicks ^ 0.25 versus n_impressions ^ 0.25.

broom is loaded.

## Instructions `100 XP` {.unnumbered}

* Print a summary of mdl_click_vs_impression_orig. Do the same for mdl_click_vs_impression_trans

* Get the coefficient of determination for mdl_click_vs_impression_orig by glancing at the model, then pulling the r.squared value.
* Do the same for mdl_click_vs_impression_trans.

``` {.r filename="E1.R"}
# Print a summary of mdl_click_vs_impression_orig
summary(mdl_click_vs_impression_orig)

# Print a summary of mdl_click_vs_impression_trans
summary(mdl_click_vs_impression_trans)



# Get coeff of determination for mdl_click_vs_impression_orig
mdl_click_vs_impression_orig %>% 
  # Get the model-level details
  glance() %>% 
  # Pull out r.squared
  pull(r.squared)

# Do the same for the transformed model
mdl_click_vs_impression_trans %>% 
  glance() %>% 
  pull(r.squared)
```

## Residual standard error

Residual standard error (RSE) is a measure of the typical size of the residuals. Equivalently, it's a measure of how badly wrong you can expect predictions to be. Smaller numbers are better, with zero being a perfect fit to the data.

Again, you'll look at the models from the advertising pipeline, mdl_click_vs_impression_orig and mdl_click_vs_impression_trans. broom is loaded.

## Instructions `100 XP` {.unnumbered}

* Get the residual standard error for mdl_click_vs_impression_orig by glancing at the model, then pulling the sigma value.
* Do the same for mdl_click_vs_impression_trans.


``` {.r filename="E2.R"}
# Get RSE for mdl_click_vs_impression_orig
mdl_click_vs_impression_orig %>% 
  # Get the model-level details
  glance() %>% 
  # Pull out sigma
  pull(sigma)

# Do the same for the transformed model
mdl_click_vs_impression_trans %>% 
  glance() %>% 
  pull(sigma)
```

## Drawing diagnostic plots

It's time for you to draw these diagnostic plots yourself. Let's go back to the Taiwan real estate dataset and the model of house prices versus number of convenience stores.

Recall that autoplot() lets you specify which diagnostic plots you are interested in.

> 1 residuals vs. fitted values
> 2 Q-Q plot
> 3 scale-location

mdl_price_vs_conv is available, and ggplot2 and ggfortify are loaded.

## Instructions `100 XP` {.unnumbered}

* Plot the three diagnostic plots (numbered 1 to 3) for mdl_price_vs_conv. Use a layout of three rows and one column.

``` {.r filename="E3.R"}
# Plot the three diagnostics for mdl_price_vs_conv
autoplot(mdl_price_vs_conv, which = 1:3, nrow = 3, ncol = 1)
```


## Extracting leverage and influence

In the last few exercises you explored which observations had the highest leverage and influence. Now you'll extract those values from an augmented version of the model, and visualize them.

mdl_price_vs_dist is available. dplyr, ggplot2 and ggfortify are loaded.

## Instructions `100 XP` {.unnumbered}

* Augment mdl_price_vs_dist, then arrange observations by descending influence (.hat), and get the head of the results.

* Augment mdl_price_vs_dist, then arrange observations by descending influence (.cooksd), and get the head of the results.

* Plot the three outlier diagnostic plots (numbered 4 to 6) for mdl_price_vs_dist. Use a layout of three rows and one column.

``` {.r filename="E4.R"}
mdl_price_vs_dist %>% 
  # Augment the model
  augment() %>% 
  # Arrange rows by descending leverage
  arrange(desc(.hat)) %>% 
  # Get the head of the dataset
  head()
 

mdl_price_vs_dist %>% 
  # Augment the model
  augment() %>% 
  # Arrange rows by descending Cook's distance
  arrange(desc(.cooksd)) %>% 
  # Get the head of the dataset
  head()
  

# Plot the three outlier diagnostics for mdl_price_vs_dist
autoplot(mdl_price_vs_dist, which = 4:6, nrow = 3, ncol = 1)
```