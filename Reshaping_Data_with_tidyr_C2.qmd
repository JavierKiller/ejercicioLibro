---
title: "From Wide to Long and Back"
---

## Nuclear bombs per country

You've been given a version of the Nuclear Explosion DataBase (NEDB) where country names are specified in the column headers (nuke_df). You want to visualize how many nukes were detonated per year per country. You'll need to pivot the data and replace NA values first.

The ggplot2 package has been pre-loaded for you.

## Instructions `100 XP` {.unnumbered}

* Pivot all columns except for year to a longer format.

* The country names are now in the name column. Overwrite its name with country. The value column should be named n_bombs.

* Replace the NA values in the n_bombs column with integer zero values (0L).

* Create a line plot where the number of bombs dropped per country is plotted over time. Use country to color the lines.

``` {.r filename="E1.R"}
nuke_df %>% 
  # Pivot the data to a longer format
    pivot_longer(-year)



nuke_df %>% 
  # Pivot the data to a longer format
  pivot_longer(
    -year, 
    # Overwrite the names of the two new columns
    names_to = "country", 
    values_to = "n_bombs"
  ) 

nuke_df %>% 
  # Pivot the data to a longer format
  pivot_longer(
    -year, 
    # Overwrite the names of the two new columns
    names_to = "country", 
    values_to = "n_bombs"
  ) %>% 
  # Replace NA values for n_bombs with 0L
  replace_na(list(n_bombs = 0L))


nuke_df %>% 
  # Pivot the data to a longer format
  pivot_longer(
    -year, 
    # Overwrite the names of the two new columns
    names_to = "country", 
    values_to = "n_bombs"
  ) %>% 
  # Replace NA values for n_bombs with 0L
  replace_na(list(n_bombs = 0L)) %>% 
  # Plot the number of bombs per country over time
  ggplot(aes(x = year, y = n_bombs, color = country)) +
  geom_line()
  
```

## WHO obesity per country

According to the World Health Organization (WHO), worldwide obesity has nearly tripled since 1975. You're interested in the severity of this global health issue per country and whether males and females are affected differently. You'll use the WHO's obesity data (obesity_df) to investigate this issue. The data holds the percentage of females, males, and both sexes combined that are considered obese (BMI > 30) per country.

You want to create a scatterplot where, per nation, you can see the obesity data colored differently for females and males. This implies that sex should become a variable with its own column.

The ggplot2 package has been pre-loaded for you.

## Instructions `100 XP` {.unnumbered}

* Pivot the male and female columns. The old column names should go in the sex column, the original values should go in the pct_obese column.

* Create a scatterplot with pct_obese per country colored by sex. The country variable has been ordered by overall obesity % and added for you.

``` {.r filename="E2.R"}
obesity_df %>% 
  # Pivot the male and female columns
  pivot_longer(c(male, female),
               names_to = "sex",
               values_to = "pct_obese")
               



obesity_df %>% 
  # Pivot the male and female columns
  pivot_longer(c(male, female),
               names_to = "sex",
               values_to = "pct_obese") %>% 
  # Create a scatter plot with pct_obese per country colored by sex
  ggplot(aes(x = pct_obese, color = sex,
             y = forcats::fct_reorder(country, both_sexes))) +
  geom_point() +
  scale_y_discrete(breaks = c("India", "Nauru", "Cuba", "Brazil",
                              "Pakistan", "Gabon", "Italy", "Oman",
                              "China", "United States of America")) +
  labs(x = "% Obese", y = "Country")
```

## Bond... James Bond

You've been given a James Bond movie dataset (bond_df) and want to visualize the number of movies that Bond actors have featured in per decade. However, the data is in an untidy format with the decade values captured in the column headers. You'll tidy this dataset to give each variable its own column.

The ggplot2 package has been pre-loaded for you.

## Instructions `100 XP` {.unnumbered}

* Pivot all columns except Bond to a longer format and set the names of the newly created columns to decade and n_movies.

* Drop any NA values in the n_movies column while it is created.

* Transform the decade column data type to integer.

``` {.r filename="E3.R"}
bond_df %>% 
  # Pivot the data to long format and set the column names
  pivot_longer(
    -Bond, 
    names_to = "decade", 
    values_to = "n_movies"
  )
 
 
  
bond_df %>% 
  # Pivot the data to long format
  pivot_longer(
    -Bond, 
    # Overwrite the names of the two newly created columns
    names_to = "decade", 
    values_to = "n_movies", 
    # Drop na values
    values_drop_na = TRUE
  )


bond_df %>% 
  # Pivot the data to long format
  pivot_longer(
    -Bond, 
    # Overwrite the names of the two newly created columns
    names_to = "decade", 
    values_to = "n_movies", 
    # Drop na values
    values_drop_na = TRUE, 
    # Transform the decade column data type to integer
    names_transform = list(decade = as.integer)
  ) %>% 
  ggplot(aes(x = decade + 5, y = n_movies, fill = Bond))+
  geom_col()

```

## New-Zealand's bird of the year

Every year New Zealanders vote en masse to decide which species gets the bird of the year trophy. The contest is organized by the Forest & Bird agency which allows each person to give points to up to five birds (first pick gets 5 points, second 4, â€¦). Your job is to decide this year's winner from the messy dataset that's been pre-loaded for you as bird_df.

The dplyr package has been pre-loaded for you.

## Instructions `100 XP` {.unnumbered}

* Pivot bird_df to longer format so that an integer column points and a character column species are created. Use the names_prefix argument to clean up the points column and make sure no NA values remain.

* Calculate the total_points each species got.

``` {.r filename="E4.R"}
bird_df %>%
  # Pivot the data to create a two column data frame
  pivot_longer(
    starts_with("points_"),
    names_to = "points",
    names_prefix = "points_",
    names_transform = list(points = as.integer),
    values_to = "species",
    values_drop_na = TRUE
  )


bird_df %>%
  # Pivot the data to create a 2 column data frame
  pivot_longer(
    starts_with("points_"),
    names_to = "points",
    names_prefix = "points_",
    names_transform = list(points = as.integer),
    values_to = "species",
    values_drop_na = TRUE
  ) %>%
  group_by(species) %>% 
  summarize(total_points = sum(points)) %>% 
  slice_max(total_points, n = 5) 
```

## Big tech stock prices

You're an analyst at an investment firm and want to visualize the weekly closing prices of five big tech firms' stocks. However, the dataset you've been handed (stock_df) is messy and has the year and week variables stored in the column headers. You'll pivot this data into a tidy format, extract the variables from the headers, and create a line plot.

The ggplot2 package has been pre-loaded for you.

## Instructions `100 XP` {.unnumbered}

* Pivot stock_df so that the integer columns year and week are created from the column names and the original values are moved to the price column. Use the names_sep argument to separate the column names.

* Create a line plot where the price is shown per week and color by company. The year variable has been dealt with for you.

``` {.r filename="E5.R"}
stock_df %>% 
  # Pivot the data to create 3 new columns: year, week, price
  pivot_longer(
    -company,
    names_to = c("year", "week"),
    values_to = "price",
    names_sep = "_week",
    names_transform = list(
      year = as.integer,
      week = as.integer)
  )


stock_df %>% 
  # Pivot the data to create 3 new columns: year, week, price
  pivot_longer(
    -company,
    names_to = c("year", "week"),
    values_to = "price",
    names_sep = "_week",
    names_transform = list(
      year = as.integer,
      week = as.integer)
  ) %>%
  # Create a line plot with price per week, color by company
  ggplot(aes(x = week, y = price, color = company)) +
  geom_line() +
  facet_grid(. ~ year)
```

## Soviet space dogs, the dog perspective

You'll be working on an pre-processed sample of the USSR space dogs database compiled by Duncan Geere and pre-loaded for you as space_dogs_df. Each of the 42 rows in this dataset represents a test rocket launch which had one or two very brave dogs on board.

Your goal is to reshape this dataset so that for each launch, each dog has a row.

The challenge is that in the column headers (name_1, name_2, gender_1, and gender_2), the part before the _ separator can point to two different variables (name and gender), while the second part always points to the dog ID (1st or 2nd dog).

## Instructions `100 XP` {.unnumbered}

* As the first argument to pivot_longer(), pass the columns to pivot (name_1, name_2, gender_1, and gender_2).
* Complete the names_to argument so that the first part of the column headers are reused.
* Make sure NA values are dropped since not all rockets had two dogs.

``` {.r filename="E6.R"}
space_dogs_df %>% 
  pivot_longer(
    # Add the columns to pivot
    name_1:gender_2,
    names_sep = "_",
    # Complete the names_to argument to re-use the first part of the column headers
    names_to = c(".value", "dog_id"),
    # Make sure NA values are dropped
    values_drop_na = TRUE
  )
```

## WHO obesity vs. life expectancy

You've been given a sample of WHO data (who_df) with obesity percentages and life expectancy data per country, year, and sex. You want to visually inspect the correlation between obesity and life expectancy.

However, the data is very messy with four variables hidden in the column names. Each column name is made up of three parts separated by underscores: Values for the year, followed by those for sex, and then values for either pct.obese or life.exp. Since the third part of the column name string holds two variables you'll need to use the special ".value" value in the names_to argument.

You'll pivot the data into a tidy format and create the scatterplot.

The ggplot2 package has been pre-loaded for you.

## Instructions `100 XP` {.unnumbered}

* Pivot the data so that each variable (year, sex, pct.obese, life.exp) has a column of the correct data type.

* Use ggplot() to create a scatterplot with life.exp over pct.obese. Color the points by sex.
``` {.r filename="E7.R"}
who_df %>% 
  # Put each variable in its own column
  pivot_longer(
    -country,
    names_to = c("year", "sex", ".value"),
    names_sep = "_", 
    names_transform = list("year" = as.integer)
  )


who_df %>% 
  # Put each variable in its own column
  pivot_longer(
    -country,
    names_to = c("year", "sex", ".value"),
    names_sep = "_", 
    names_transform = list("year" = as.integer)
  ) %>%
  # Create a plot with life expectancy over obesity
  ggplot(aes(x = pct.obese, y = life.exp, color = sex))+
  geom_point()
```

## Uncounting observations

You've found the job of your dreams providing technical support for a dog breed beauty contest. The jury members want a spreadsheet with the breed and id of each participating dog so that they can add the scores later on. You've only been given the number of participants per dog breed (dog_df) so you decide to use your tidyr skills to create the desired result.

## Instructions `100 XP` {.unnumbered}

* Inspect the data in the console.
* Uncount the data so that per breed, each dog gets a row and an ID. The ID should go in the dog_id column.

``` {.r filename="E8.R"}
dog_df %>% 
  # Create one row for each participant and add the id
  uncount(n_participants, .id = "dog_id")

```

## Soviet space dogs, the flight perspective

Remember the USSR space dogs dataset1? You changed it to a long format so that for every dog in every rocket launch, there was a row. Suppose you're given this tidy dataset and are asked to answer the question, "In what percentage of flights were both dogs of the same gender?"

You'll reshape and investigate space_dogs_df to find the answer.

The dplyr package has been pre-loaded for you.

1 Compiled by Duncan Geere.

## Instructions `100 XP` {.unnumbered}

* Pivot the data to a wider format, deriving new column names from the dog_id column and values from the gender column.

* Drop rows that contain NA values.

* Create a new column same_gender, which has a TRUE value when gender_1 equals gender_2.

``` {.r filename="E9.R"}
space_dogs_df %>% 
  # Pivot the data to a wider format
  pivot_wider(names_from = dog_id, values_from = gender, names_prefix = 'gender_')



space_dogs_df %>% 
  # Pivot the data to a wider format
  pivot_wider(names_from = dog_id, values_from = gender, names_prefix = "gender_") %>% 
  # Drop rows with NA values
  drop_na()


space_dogs_df %>% 
  # Pivot the data to a wider format
  pivot_wider(names_from = dog_id, values_from = gender, names_prefix = "gender_") %>% 
  # Drop rows with NA values
  drop_na() %>% 
  # Create a Boolean column on whether both dogs have the same gender
  mutate(same_gender = if_else(gender_1 == gender_2, TRUE, FALSE)) %>% 
  summarize(pct_same_gender = mean(same_gender))


```

## Planet temperature & distance to the Sun

The intensity of light radiated by a light source follows an inverse square relationship with the distance it has traveled.

You wonder if you could observe this trend in the temperature of the planets in our Solar System given their distance to the Sun. You'll use the planet_df dataset from the devstronomy project to investigate this.

## Instructions `100 XP` {.unnumbered}

* Use the pivot_wider() function to extract column names from the metric column and values from the value column.

* Use the ggplot() function to create a plot with the temperature over the distance_to_sun.


``` {.r filename="E10.R"}
planet_df %>% 
  # Give each planet variable its own column
   pivot_wider(names_from = "metric", values_from = "value")



planet_df %>% 
  # Give each planet variable its own column
  pivot_wider(names_from = "metric", values_from = "value") %>% 
  # Plot planet temperature over distance to sun
  ggplot(aes(x = distance_to_sun, y = temperature)) +
  geom_point(aes(size = diameter)) +
  geom_text(aes(label = planet), vjust = -1) +
  labs(x = "Distance to sun (million km)", 
       y = "Mean temperature (Â°C)") +
  theme(legend.position = "none")

```

## Transposing planet data

You're again working on a planet dataset derived from the devstronomy project. This time, you're interested in the correlation between the diameter of a planet and the number of moons circling it.

However, the dataset (planet_df) has a row for each variable and a column for each planet (observation). You'll transpose this data in two steps and then create a plot to inspect the correlation.

The ggplot2 package has been pre-loaded for you.

## Instructions `100 XP` {.unnumbered}

* Pivot the data so that planet names are put in a column named planet.

* Pivot the data so that each variable in the metric column gets its own column.

* Use the ggplot() function to create a plot with the number_of_moons over diameter.

``` {.r filename="E11.R"}
planet_df %>%
  # Pivot all columns except metric to long format
    pivot_longer(-metric, names_to = "planet")
  


planet_df %>%
  # Pivot all columns except metric to long format
  pivot_longer(-metric, names_to = "planet") %>% 
  # Put each metric in its own column
  pivot_wider(names_from = metric, values_from = value)



planet_df %>%
  # Pivot all columns except metric to long format
  pivot_longer(-metric, names_to = "planet") %>% 
  # Put each metric in its own column
  pivot_wider(names_from = metric, values_from = value) %>% 
  # Plot the number of moons vs. planet diameter
  ggplot(aes(x = diameter, y = number_of_moons)) +
  geom_point(aes(size = diameter)) +
  geom_text(aes(label = planet), vjust = -1) +
  labs(x = "Diameter (km)", y = "Number of moons") +
  theme(legend.position = "none")
```
