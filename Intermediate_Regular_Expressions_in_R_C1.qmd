---
title: "Regular Expressions: Writing Custom Patterns"
---

## Starts with, ends with

You've already seen how you can search for certain characters at the beginning of a string using the caret "\^". Of course, regular expressions also offer a way to search for things at the end of a string. This is what the dollar sign "\$" will do.

When creating a pattern to look for something at the beginning of a line, use the caret followed by a search term "\^***". When looking for something at the end, type the search term first and then append the dollar sign "***\$". The order of appearance is very important when creating regular expressions.

## Instructions `100 XP` {.unnumbered}

-   Run the first line to have a look at the movie titles you're working with.
-   Create a pattern that lists all the movies that start with "The".
-   Create a pattern that searches movies that end with "3D".\

``` {.r filename="E1.R"}
# Familiarize yourself with the vector by printing it
movie_titles

# List all movies that start with "The"
movie_titles[str_detect(
  movie_titles,
  pattern = "^The"
)]

# List all movies that end with "3D"
movie_titles[str_detect(
  movie_titles,
  pattern = "3D$"
)]
```

## If you don't know what you're looking for

So far you've used str_detect() which returns TRUE if the pattern matches and FALSE otherwise. But regular expressions are also excellent at extracting the searched term from a larger amount of text. You can use the str_match() function for that.

The next special character you'll get to know is the period: ".". The period matches any character, it's like a wild card. So if you search for example for "..." you will find three characters - be it letters or numbers or even white spaces.

This is pretty handy, except if you need to search for an actual full stop ".". In that case: escape the period with two backslashes: "\\."

## Instructions `100 XP` {.unnumbered}

-   Match not only Saw 4 but also the other sequels.
-   Match the first four characters of all the movie titles that start with "K".
-   Detect the movie that ends with an actual full stop ".".

``` {.r filename="E2.R"}
# Here's an example pattern that will find the movie Saw 4
str_match(movie_titles, pattern = "Saw 4")

# Match all sequels of the movie "Saw"
str_match(movie_titles, pattern = "Saw..")

# Match the letter K and three arbitrary characters
str_match(movie_titles, pattern = "^K...")

# Detect whether the movie titles end with a full stop
str_detect(movie_titles, pattern = "\\.$")
```

## Digits, words and spaces

So far in your life you might have always searched for one number or word exactly. Now you have a much more flexible tool at hand, to search for:

> \\d digits (zero to nine) \\w word characters (letters, numbers or underscores) \\s white spaces (also tabs and line breaks)

Plus, you can use square brackets \[A-Za-z\] and have a list of possible values inside.

You already found all sequels of "Saw". Can you create a pattern that matches all sequels in the list movie_titles? They usually have a number at the end, right?

Furthermore, the list contains duplicates introduced by "Grey" (British) and "Gray" (American English). Create a pattern that matches both versions of the color.

Lastly, list out all movie titles that contain special, non word characters.

## Instructions `100 XP` {.unnumbered}

-   Match all movies titles that end with a space followed by a digit.
-   Match both "Grey" and "Gray" with a custom pattern \[...\].
-   Write a pattern that matches everything but word characters \\w and spaces \\s.

``` {.r filename="E3.R"}
# List all movies that end with a space and a digit
movie_titles[str_detect(movie_titles,
  pattern = "\\s\\d$"
)]

# List all movies that contain "Grey" or "Gray"
movie_titles[str_detect(movie_titles,
  pattern = "Gr\\wy"
)]

# List all movies with strange characters (no word or space)
movie_titles[str_detect(movie_titles,
  pattern = "[^\\w\\s]"
)]
```

## Match repetitions

Alright, in this exercise your patterns will get much more powerful. You now know how to use repetitions to match exactly the desired number of digits or letters.

By using a number in curly braces {} you can define how many occurrences you want to search for. With one number e.g. {2}, you'll match that exact number of repetitions. With a number and a comma, the number serves as a minimum: {2,} (two repetitions or more). The second number is a maximum, so {2,4} is between 2 and 4 repetitions.

The plus sign + and the asterisk \* are an even quicker way to define repetition: The first will match one or more occurrences and the latter will match zero, one or more. These two are often used in combination with the period . to match an unknown number of arbitrary characters.

## Instructions `100 XP` {.unnumbered}

-   Find all titles that contain a number with two or more digits.
-   Match the first word of every title by searching one or more word characters at the beginning of the string.
-   Match the word "Knight" and everything that comes before it.

``` {.r filename="E4.R"}
# This lists all movies with two or more digits in a row
movie_titles[str_detect(
  movie_titles,
  pattern = "\\d{2,}"
)]

# List just the first words of every movie title
str_match(movie_titles, pattern = "\\w+")

# Match everything that comes before "Knight"
str_match(movie_titles, pattern = ".*Knight")
```

## This or that

Searching one word is easy, right? But searching exactly two or three words, you could not do that with a plain old "Control + F" search. But with regular expressions you are now able to define a search pattern that achieves this. You can use the str_view() to see what your regular expression matches.

When you connect multiple words with a pipe operator \| you will match both the thing that comes before the pipe and the thing after. And you're not limited to just two. You can also have three options connected with two pipes Hello Anna\|Berta\|Colin.

You can furthermore use parentheses to group certain words together, looking e.g. for Hello (Anna\|Berta\|Colin) will produce a different result than the pattern above. Try out both options and compare the results.

## Instructions `100 XP` {.unnumbered}

-   Create a pattern that searches for movies starting with "Finding" and followed by the words "Nemo", "Harmony" or "Dory".
-   Now create the same pattern but wrap the three possibilities in parentheses () to compare the results.
-   Choose the one of the two patterns that matches the full movie names "Finding Nemo", "Finding Harmony" and "Finding Dory" and pass it to the third str_match() call.

``` {.r filename="E5.R"}
# Append the three options: Match Nemo, Harmony or Dory
str_view(lines, pattern = "Finding Nemo|Harmony|Dory")

# Wrap the three options in parentheses and compare the results
str_view(lines, pattern = "Finding (Nemo|Harmony|Dory)")

# Use the pattern from above that matched the whole movie names
str_match(lines, pattern = "Finding (Nemo|Harmony|Dory)")
```

## The question mark and its two meanings

The or operator is good if you know exactly what options are valid, and also if you're sure that one of the options is present. But what if you want to match a pattern where one part is sometimes present and sometimes isn't? This is where the question mark ? comes in:

The ? can make the preceding group or character optional. With it, a regular expression matches, even if a certain part of the pattern is missing. But be aware, if it follows a multiplier like \* or +, the question mark can have a second effect:

The ? can also make the preceding multiplier "lazy" instead of "greedy". This means that instead of regular expressions looking for the maximum number of characters, the ? has the power to find the minimum number of text matches.

## Instructions `100 XP` {.unnumbered}

-   Match both the singular "Screen" as well as the plural "Screens" by making the last "s" optional.
-   Match a random amount of arbitrary characters in front of a comma by using .\*.
-   Match the same pattern with a question mark ? after the star - do you spot the difference?

``` {.r filename="E6.R"}
# Match both Screen and Screens by making the last "s" optional
str_match(lines, pattern = "Screens|Screen")

# Match a random amount of arbitrary characters, followed by a comma
str_match(lines, pattern = ".*,")

# Match the same pattern followed by a comma, but the "lazy" way
str_match(lines, pattern = ".*?,")
```
