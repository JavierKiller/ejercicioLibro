[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "libro",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "Introduction_to_R_C1.html",
    "href": "Introduction_to_R_C1.html",
    "title": "2  Intro to basics",
    "section": "",
    "text": "Intro to basics"
  },
  {
    "objectID": "Introduction_to_R_C1.html#how-it-works",
    "href": "Introduction_to_R_C1.html#how-it-works",
    "title": "2  Intro to basics",
    "section": "2.1 How it works",
    "text": "2.1 How it works\nIn the editor on the right you should type R code to solve the exercises. When you hit the ‘Submit Answer’ button, every line of code is interpreted and executed by R and you get a message whether or not your code was correct. The output of your R code is shown in the console in the lower right corner.\nR makes use of the # sign to add comments, so that you and others can understand what the R code is about. Just like Twitter! Comments are not run as R code, so they will not influence your result. For example, Calculate 3 + 4 in the editor on the right is a comment.\nYou can also execute R commands straight in the console. This is a good way to experiment with R code, as your submission is not checked for correctness."
  },
  {
    "objectID": "Introduction_to_R_C1.html#instructions-100-xp",
    "href": "Introduction_to_R_C1.html#instructions-100-xp",
    "title": "2  Intro to basics",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nIn the editor on the right there is already some sample code. Can you see which ines are actual R code and which are comments? Add a line of code that calculates the sum of 6 and 12, and hit the ‘Submit Answer’ button.\n\n\nE1.R\n\n# Calculate 3 + 4\n3 + 4\n\n# Calculate 6 + 12\n6 + 12"
  },
  {
    "objectID": "Introduction_to_R_C1.html#arithmetic-with-r",
    "href": "Introduction_to_R_C1.html#arithmetic-with-r",
    "title": "2  Intro to basics",
    "section": "2.2 Arithmetic with R",
    "text": "2.2 Arithmetic with R\nIn its most basic form, R can be used as a simple calculator. Consider the following arithmetic operators:\n\nAddition: +\nSubtraction: -\nMultiplication: *\nDivision: /\nExponentiation: ^\nModulo: %%\n\nThe last two might need some explaining:\nThe ^ operator raises the number to its left to the power of the number to its right: for example 3^2 is 9. The modulo returns the remainder of the division of the number to the left by the number on its right, for example 5 modulo 3 or 5 %% 3 is 2. With this knowledge, follow the instructions to complete the exercise.\n\nType 2^5 in the editor to calculate 2 to the power 5.\nType 28 %% 6 to calculate 28 modulo 6.\nSubmit the answer and have a look at the R output in the console.\nNote how the # symbol is used to add comments on the R code.\n\n\n\nE2.R\n\n# An addition\n5 + 5 \n\n# A subtraction\n5 - 5 \n\n# A multiplication\n3 * 5\n\n # A division\n(5 + 5) /2 \n\n# Exponentiation\n2 ^5\n\n# Modulo\n28 %% 6"
  },
  {
    "objectID": "Introduction_to_R_C1.html#variable-assignment",
    "href": "Introduction_to_R_C1.html#variable-assignment",
    "title": "2  Intro to basics",
    "section": "2.3 Variable assignment",
    "text": "2.3 Variable assignment\nA basic concept in (statistical) programming is called a variable.\nA variable allows you to store a value (e.g. 4) or an object (e.g. a function description) in R. You can then later use this variable’s name to easily access the value or the object that is stored within this variable.\nYou can assign a value 4 to a variable my_var with the command\n\nmy_var <- 4"
  },
  {
    "objectID": "Introduction_to_R_C1.html#instructions-100-xp-1",
    "href": "Introduction_to_R_C1.html#instructions-100-xp-1",
    "title": "2  Intro to basics",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nOver to you: complete the code in the editor such that it assigns the value 42 to the variable x in the editor. Submit the answer. Notice that when you ask R to print x, the value 42 appears.\n\n\nE3.R\n\n# Assign the value 42 to x\nx <- 42\n\n# Print out the value of the variable x\nx"
  },
  {
    "objectID": "Introduction_to_R_C1.html#variable-assignment-2",
    "href": "Introduction_to_R_C1.html#variable-assignment-2",
    "title": "2  Intro to basics",
    "section": "2.4 Variable assignment (2)",
    "text": "2.4 Variable assignment (2)\nSuppose you have a fruit basket with five apples. As a data analyst in training, you want to store the number of apples in a variable with the name my_apples."
  },
  {
    "objectID": "Introduction_to_R_C1.html#instructions-100-xp-2",
    "href": "Introduction_to_R_C1.html#instructions-100-xp-2",
    "title": "2  Intro to basics",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nType the following code in the editor: my_apples <- 5. This will assign the value 5 to my_apples. Type: my_apples below the second comment. This will print out the value of my_apples. Submit your answer, and look at the output: you see that the number 5 is printed. So R now links the variable my_apples to the value 5.\n\n\nE4.R\n\n# Assign the value 5 to the variable my_apples\nmy_apples <- 5\n\n# Print out the value of the variable my_apples\nmy_apples"
  },
  {
    "objectID": "Introduction_to_R_C1.html#variable-assignment-3",
    "href": "Introduction_to_R_C1.html#variable-assignment-3",
    "title": "2  Intro to basics",
    "section": "2.5 Variable assignment (3)",
    "text": "2.5 Variable assignment (3)\nEvery tasty fruit basket needs oranges, so you decide to add six oranges. As a data analyst, your reflex is to immediately create the variable my_oranges and assign the value 6 to it. Next, you want to calculate how many pieces of fruit you have in total. Since you have given meaningful names to these values, you can now code this in a clear way:\n\nmy_apples + my_oranges\n\nInstructions 100 XP\n\nAssign to my_oranges the value 6.\nAdd the variables my_apples and my_oranges and have R simply print the result.\nAssign the result of adding my_apples and my_oranges to a new variable my_fruit.\n\n\n\nE5.R\n\n# Assign a value to the variables my_apples and my_oranges\nmy_apples <- 5\n\n\n# Add these two variables together\nmy_oranges<-6\n\nmy_apples\nmy_oranges\n\n# Create the variable my_fruit\nmy_fruit = my_apples + my_oranges\nmy_fruit"
  },
  {
    "objectID": "Introduction_to_R_C1.html#apples-and-oranges",
    "href": "Introduction_to_R_C1.html#apples-and-oranges",
    "title": "2  Intro to basics",
    "section": "2.6 Apples and oranges",
    "text": "2.6 Apples and oranges\nCommon knowledge tells you not to add apples and oranges. But hey, that is what you just did, no :-)? The my_apples and my_oranges variables both contained a number in the previous exercise. The + operator works with numeric variables in R. If you really tried to add “apples” and “oranges”, and assigned a text value to the variable my_oranges (see the editor), you would be trying to assign the addition of a numeric and a character variable to the variable my_fruit. This is not possible."
  },
  {
    "objectID": "Introduction_to_R_C1.html#instructions-100-xp-3",
    "href": "Introduction_to_R_C1.html#instructions-100-xp-3",
    "title": "2  Intro to basics",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nSubmit the answer and read the error message. Make sure to understand why this did not work. Adjust the code so that R knows you have 6 oranges and thus a fruit basket with 11 pieces of fruit.\n\n\nE6.R\n\n# Assign a value to the variable my_apples\nmy_apples <- 5 \n\n# Fix the assignment of my_oranges\nmy_oranges <- 6\n\n# Create the variable my_fruit and print it out\nmy_fruit <- my_apples + my_oranges \nmy_fruit"
  },
  {
    "objectID": "Introduction_to_R_C1.html#basic-data-types-in-r",
    "href": "Introduction_to_R_C1.html#basic-data-types-in-r",
    "title": "2  Intro to basics",
    "section": "2.7 Basic data types in R",
    "text": "2.7 Basic data types in R\nR works with numerous data types. Some of the most basic types to get started are:\n\nDecimal values like 4.5 are called numerics.\nWhole numbers like 4 are called integers. Integers are also numerics.\nBoolean values (TRUE or FALSE) are called logical.\nText (or string) values are called characters.\nNote how the quotation marks in the editor indicate that “some text” is a string."
  },
  {
    "objectID": "Introduction_to_R_C1.html#instructions-100-xp-4",
    "href": "Introduction_to_R_C1.html#instructions-100-xp-4",
    "title": "2  Intro to basics",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nChange the value of the:\n\nmy_numeric variable to 42.\nmy_character variable to “universe”. Note that the quotation marks indicate that “universe” is a character.\nmy_logical variable to FALSE.\nNote that R is case sensitive!\n\n\n\nE7.R\n\n# Change my_numeric to be 42\nmy_numeric <- 42\n\n# Change my_character to be \"universe\"\nmy_character <- \"universe\"\n\n# Change my_logical to be FALSE\nmy_logical <- FALSE"
  },
  {
    "objectID": "Introduction_to_R_C1.html#whats-that-data-type",
    "href": "Introduction_to_R_C1.html#whats-that-data-type",
    "title": "2  Intro to basics",
    "section": "2.8 What’s that data type?",
    "text": "2.8 What’s that data type?\nDo you remember that when you added 5 + “six”, you got an error due to a mismatch in data types? You can avoid such embarrassing situations by checking the data type of a variable beforehand. You can do this with the class() function, as the code in the editor shows."
  },
  {
    "objectID": "Introduction_to_R_C1.html#instructions-100-xp-5",
    "href": "Introduction_to_R_C1.html#instructions-100-xp-5",
    "title": "2  Intro to basics",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nComplete the code in the editor and also print out the classes of my_character and my_logical.\n\n\nE8.R\n\n# Declare variables of different types\nmy_numeric <- 42\nmy_character <- \"universe\"\nmy_logical <- FALSE \n\n# Check class of my_numeric\nclass(my_numeric)\n\n# Check class of my_character\nclass(my_character)\n\n# Check class of my_logical\nclass(my_logical)"
  },
  {
    "objectID": "Introduction_to_R_C2.html",
    "href": "Introduction_to_R_C2.html",
    "title": "3  Vectors",
    "section": "",
    "text": "Vectors"
  },
  {
    "objectID": "Introduction_to_R_C2.html#create-a-vector",
    "href": "Introduction_to_R_C2.html#create-a-vector",
    "title": "3  Vectors",
    "section": "3.1 Create a vector",
    "text": "3.1 Create a vector\nFeeling lucky? You better, because this chapter takes you on a trip to the City of Sins, also known as Statisticians Paradise!\nThanks to R and your new data-analytical skills, you will learn how to uplift your performance at the tables and fire off your career as a professional gambler. This chapter will show how you can easily keep track of your betting progress and how you can do some simple analyses on past actions. Next stop, Vegas Baby… VEGAS!!"
  },
  {
    "objectID": "Introduction_to_R_C2.html#instructions-100-xp",
    "href": "Introduction_to_R_C2.html#instructions-100-xp",
    "title": "3  Vectors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nDo you still remember what you have learned in the first chapter? Assign the value “Go!” to the variable vegas. Remember: R is case sensitive!\n\n\nE1.R\n\n# Define the variable vegas\nvegas <- \"Go!\""
  },
  {
    "objectID": "Introduction_to_R_C2.html#create-a-vector-2",
    "href": "Introduction_to_R_C2.html#create-a-vector-2",
    "title": "3  Vectors",
    "section": "3.2 Create a vector (2)",
    "text": "3.2 Create a vector (2)\nLet us focus first!\nOn your way from rags to riches, you will make extensive use of vectors. ectors are one-dimension arrays that can hold numeric data, character data, or logical data. In other words, a vector is a simple tool to store data. For example, you can store your daily gains and losses in the casinos.\nIn R, you create a vector with the combine function c(). You place the vector elements separated by a comma between the parentheses. For example:\n\nnumeric_vector <- c(1, 2, 3) character_vector <- c(“a”, “b”, “c”)\n\nOnce you have created these vectors in R, you can use them to do calculations."
  },
  {
    "objectID": "Introduction_to_R_C2.html#instructions-100-xp-1",
    "href": "Introduction_to_R_C2.html#instructions-100-xp-1",
    "title": "3  Vectors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nComplete the code such that boolean_vector contains the three elements: TRUE, FALSE and TRUE (in that order).\n\n\nE2.R\n\nnumeric_vector <- c(1, 10, 49)\ncharacter_vector <- c(\"a\", \"b\", \"c\")\n\n# Complete the code for boolean_vector\nboolean_vector <-c(TRUE,FALSE,TRUE)\n\nCreate a vector (3) After one week in Las Vegas and still zero Ferraris in your garage, you decide that it is time to start using your data analytical superpowers.\nBefore doing a first analysis, you decide to first collect all the winnings and losses for the last week:\nFor poker_vector:\n\nOn Monday you won $140\nTuesday you lost $50\nWednesday you won $20\nThursday you lost $120\nFriday you won $240\n\nFor roulette_vector:\n\nOn Monday you lost $24\nTuesday you lost $50\nWednesday you won $100\nThursday you lost $350\nFriday you won $10\n\nYou only played poker and roulette, since there was a delegation of mediums that occupied the craps tables. To be able to use this data in R, you decide to create the variables poker_vector and roulette_vector.\nInstructions 100 XP {.unnumbered}\nAssign the winnings/losses for roulette to the variable roulette_vector. You lost $24, then lost $50, won $100, lost $350, and won $10.\n\n\nE3.R\n\n# Poker winnings from Monday to Friday\npoker_vector <- c(140, -50, 20, -120, 240)\n\n# Roulette winnings from Monday to Friday\nroulette_vector <- c(-24,-50,100,-350,10)"
  },
  {
    "objectID": "Introduction_to_R_C2.html#naming-a-vector",
    "href": "Introduction_to_R_C2.html#naming-a-vector",
    "title": "3  Vectors",
    "section": "3.3 Naming a vector",
    "text": "3.3 Naming a vector\nAs a data analyst, it is important to have a clear view on the data that you are using. Understanding what each element refers to is therefore essential.\nIn the previous exercise, we created a vector with your winnings over the week. Each vector element refers to a day of the week but it is hard to tell which element belongs to which day. It would be nice if you could show that in the vector itself.\nYou can give a name to the elements of a vector with the names() function. Have a look at this example:\n\nsome_vector <- c(“John Doe”, “poker player”) names(some_vector) <- c(“Name”, “Profession”)\n\nThis code first creates a vector some_vector and then gives the two elements a name. The first element is assigned the name Name, while the second element is labeled Profession. Printing the contents to the console yields following output:\n\n     Name     Profession \n“John Doe” “poker player”"
  },
  {
    "objectID": "Introduction_to_R_C2.html#instructions-100-xp-2",
    "href": "Introduction_to_R_C2.html#instructions-100-xp-2",
    "title": "3  Vectors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nThe code in the editor names the elements in poker_vector with the days of the week. Add code to do the same thing for roulette_vector\n\n\nE4.R\n\n# Poker winnings from Monday to Friday\npoker_vector <- c(140, -50, 20, -120, 240)\n\n# Roulette winnings from Monday to Friday\nroulette_vector <- c(-24, -50, 100, -350, 10)\n\n# Assign days as names of poker_vector\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\n\n# Assign days as names of roulette_vector\nnames(poker_vector) <-days_vector \n  names(roulette_vector) <-days_vector"
  },
  {
    "objectID": "Introduction_to_R_C2.html#naming-a-vector-2",
    "href": "Introduction_to_R_C2.html#naming-a-vector-2",
    "title": "3  Vectors",
    "section": "3.4 Naming a vector (2)",
    "text": "3.4 Naming a vector (2)\nIf you want to become a good statistician, you have to become lazy. (If you are already lazy, chances are high you are one of those exceptional, natural-born statistical talents.)\nIn the previous exercises you probably experienced that it is boring and frustrating to type and retype information such as the days of the week. However, when you look at it from a higher perspective, there is a more efficient way to do this, namely, to assign the days of the week vector to a variable!\nJust like you did with your poker and roulette returns, you can also create a variable that contains the days of the week. This way you can use and re-use it."
  },
  {
    "objectID": "Introduction_to_R_C2.html#instructions-100-xp-3",
    "href": "Introduction_to_R_C2.html#instructions-100-xp-3",
    "title": "3  Vectors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nA variable days_vector that contains the days of the week has already been created for you.\nUse days_vector to set the names of poker_vector and roulette_vector.\n\n\n\nE5.R\n\n# Poker winnings from Monday to Friday\npoker_vector <- c(140, -50, 20, -120, 240)\n\n# Roulette winnings from Monday to Friday\nroulette_vector <- c(-24, -50, 100, -350, 10)\n\n# The variable days_vector\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\n \n# Assign the names of the day to roulette_vector and poker_vector\nnames(poker_vector) <-days_vector \n  names(roulette_vector) <-days_vector"
  },
  {
    "objectID": "Introduction_to_R_C2.html#calculating-total-winnings",
    "href": "Introduction_to_R_C2.html#calculating-total-winnings",
    "title": "3  Vectors",
    "section": "3.5 Calculating total winnings",
    "text": "3.5 Calculating total winnings\nNow that you have the poker and roulette winnings nicely as named vectors, you can start doing some data analytical magic.\nYou want to find out the following type of information:\nHow much has been your overall profit or loss per day of the week? Have you lost money over the week in total? Are you winning/losing money on poker or on roulette? To get the answers, you have to do arithmetic calculations on vectors.\nIt is important to know that if you sum two vectors in R, it takes the element-wise sum. For example, the following three statements are completely equivalent:\n\nc(1, 2, 3) + c(4, 5, 6) c(1 + 4, 2 + 5, 3 + 6) c(5, 7, 9)\n\nYou can also do the calculations with variables that represent vectors:\n\na <- c(1, 2, 3) b <- c(4, 5, 6) c <- a + b"
  },
  {
    "objectID": "Introduction_to_R_C2.html#instructions-100-xp-4",
    "href": "Introduction_to_R_C2.html#instructions-100-xp-4",
    "title": "3  Vectors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nTake the sum of the variables A_vector and B_vector and assign it to total_vector. Inspect the result by printing out total_vector.\n\n\nE6.R\n\nA_vector <- c(1, 2, 3)\nB_vector <- c(4, 5, 6)\n\n# Take the sum of A_vector and B_vector\ntotal_vector <- A_vector+B_vector\n  \n# Print out total_vector\ntotal_vector"
  },
  {
    "objectID": "Introduction_to_R_C2.html#calculating-total-winnings-2",
    "href": "Introduction_to_R_C2.html#calculating-total-winnings-2",
    "title": "3  Vectors",
    "section": "3.6 Calculating total winnings (2)",
    "text": "3.6 Calculating total winnings (2)\nNow you understand how R does arithmetic with vectors, it is time to get those Ferraris in your garage! First, you need to understand what the overall profit or loss per day of the week was. The total daily profit is the sum of the profit/loss you realized on poker per day, and the profit/loss you realized on roulette per day.\nIn R, this is just the sum of roulette_vector and poker_vector.\nInstructions 100 XP\nAssign to the variable total_daily how much you won or lost on each day in total (poker and roulette combined).\n\n\nE7.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Assign to total_daily how much you won/lost on each day\ntotal_daily <- roulette_vector+ poker_vector\ntotal_daily"
  },
  {
    "objectID": "Introduction_to_R_C2.html#calculating-total-winnings-3",
    "href": "Introduction_to_R_C2.html#calculating-total-winnings-3",
    "title": "3  Vectors",
    "section": "3.7 Calculating total winnings (3)",
    "text": "3.7 Calculating total winnings (3)\nBased on the previous analysis, it looks like you had a mix of good and bad days. This is not what your ego expected, and you wonder if there may be a very tiny chance you have lost money over the week in total?\nA function that helps you to answer this question is sum(). It calculates the sum of all elements of a vector. For example, to calculate the total amount of money you have lost/won with poker you do:\ntotal_poker <- sum(poker_vector)"
  },
  {
    "objectID": "Introduction_to_R_C2.html#instructions-100-xp-5",
    "href": "Introduction_to_R_C2.html#instructions-100-xp-5",
    "title": "3  Vectors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nCalculate the total amount of money that you have won/lost with roulette and assign to the variable total_roulette. Now that you have the totals for roulette and poker, you can easily calculate total_week (which is the sum of all gains and losses of the week). Print out total_week.\n\n\nE8.R\n\n# Total winnings with roulette\ntotal_roulette <-  sum (roulette_vector)\n\n# Total winnings overall\ntotal_week <-(total_roulette + total_poker)\n\n# Print out total_week\n  total_poker\n  total_roulette\n  total_week"
  },
  {
    "objectID": "Introduction_to_R_C2.html#comparing-total-winnings",
    "href": "Introduction_to_R_C2.html#comparing-total-winnings",
    "title": "3  Vectors",
    "section": "3.8 Comparing total winnings",
    "text": "3.8 Comparing total winnings\nOops, it seems like you are losing money. Time to rethink and adapt your strategy! This will require some deeper analysis…\nAfter a short brainstorm in your hotel’s jacuzzi, you realize that a possible explanation might be that your skills in roulette are not as well developed as your skills in poker. So maybe your total gains in poker are higher (or > ) than in roulette."
  },
  {
    "objectID": "Introduction_to_R_C2.html#instructions-100-xp-6",
    "href": "Introduction_to_R_C2.html#instructions-100-xp-6",
    "title": "3  Vectors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nCalculate total_poker and total_roulette as in the previous exercise. Use the sum() function twice.\nCheck if your total gains in poker are higher than for roulette by using a comparison. Simply print out the result of this comparison. What do you conclude, should you focus on roulette or on poker?\n\n\n\nE9.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Calculate total gains for poker and roulette\ntotal_poker <- sum(poker_vector)\ntotal_roulette <- sum(roulette_vector)\n\n# Check if you realized higher total gains in poker than in roulette\ntotal_poker > total_roulette"
  },
  {
    "objectID": "Introduction_to_R_C2.html#vector-selection-the-good-times",
    "href": "Introduction_to_R_C2.html#vector-selection-the-good-times",
    "title": "3  Vectors",
    "section": "3.9 Vector selection: the good times",
    "text": "3.9 Vector selection: the good times\nYour hunch seemed to be right. It appears that the poker game is more your cup of tea than roulette.\nAnother possible route for investigation is your performance at the beginning of the working week compared to the end of it. You did have a couple of Margarita cocktails at the end of the week…\nTo answer that question, you only want to focus on a selection of the total_vector. In other words, our goal is to select specific elements of the vector. To select elements of a vector (and later matrices, data frames, …), you can use square brackets. Between the square brackets, you indicate what elements to select. For example, to select the first element of the vector, you type poker_vector[1]. To select the second element of the vector, you type poker_vector[2], etc. Notice that the first element in a vector has index 1, not 0 as in many other programming languages."
  },
  {
    "objectID": "Introduction_to_R_C2.html#instructions-100-xp-7",
    "href": "Introduction_to_R_C2.html#instructions-100-xp-7",
    "title": "3  Vectors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nAssign the poker results of Wednesday to the variable poker_wednesday.\n\n\nE10.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Define a new variable based on a selection\npoker_wednesday <- poker_vector[3]"
  },
  {
    "objectID": "Introduction_to_R_C2.html#vector-selection-the-good-times-2",
    "href": "Introduction_to_R_C2.html#vector-selection-the-good-times-2",
    "title": "3  Vectors",
    "section": "3.10 Vector selection: the good times (2)",
    "text": "3.10 Vector selection: the good times (2)\nHow about analyzing your midweek results?\nTo select multiple elements from a vector, you can add square brackets at the end of it. You can indicate between the brackets what elements should be selected. For example: suppose you want to select the first and the fifth day of the week: use the vector c(1, 5) between the square brackets. For example, the code below selects the first and fifth element of poker_vector:\npoker_vector[c(1, 5)]"
  },
  {
    "objectID": "Introduction_to_R_C2.html#instructions-100-xp-8",
    "href": "Introduction_to_R_C2.html#instructions-100-xp-8",
    "title": "3  Vectors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nAssign the poker results of Tuesday, Wednesday and Thursday to the variable poker_midweek.\n\n\nE11.R\n\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Define a new variable based on a selection\npoker_midweek <- poker_vector[c(2, 3, 4)]"
  },
  {
    "objectID": "Introduction_to_R_C2.html#vector-selection-the-good-times-3",
    "href": "Introduction_to_R_C2.html#vector-selection-the-good-times-3",
    "title": "3  Vectors",
    "section": "3.11 Vector selection: the good times (3)",
    "text": "3.11 Vector selection: the good times (3)\nSelecting multiple elements of poker_vector with c(2, 3, 4) is not very convenient. Many statisticians are lazy people by nature, so they created an easier way to do this: c(2, 3, 4) can be abbreviated to2:4, which generates a vector with all natural numbers from 2 up to 4.\nSo, another way to find the mid-week results is poker_vector[2:4]. Notice how the vector 2:4 is placed between the square brackets to select element 2 up to 4."
  },
  {
    "objectID": "Introduction_to_R_C2.html#instructions-100-xp-9",
    "href": "Introduction_to_R_C2.html#instructions-100-xp-9",
    "title": "3  Vectors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nAssign to roulette_selection_vector the roulette results from Tuesday up to Friday; make use of : if it makes things easier for you.\n\n\nE12.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Define a new variable based on a selection\nroulette_selection_vector <- roulette_vector[2:5]"
  },
  {
    "objectID": "Introduction_to_R_C2.html#vector-selection-the-good-times-4",
    "href": "Introduction_to_R_C2.html#vector-selection-the-good-times-4",
    "title": "3  Vectors",
    "section": "3.12 Vector selection: the good times (4)",
    "text": "3.12 Vector selection: the good times (4)\nAnother way to tackle the previous exercise is by using the names of the vector elements (Monday, Tuesday, …) instead of their numeric positions. For example,\npoker_vector[“Monday”] will select the first element of poker_vector since “Monday” is the name of that first element.\nJust like you did in the previous exercise with numerics, you can also use the element names to select multiple elements, for example:\npoker_vector[c(“Monday”,“Tuesday”)]"
  },
  {
    "objectID": "Introduction_to_R_C2.html#instructions-100-xp-10",
    "href": "Introduction_to_R_C2.html#instructions-100-xp-10",
    "title": "3  Vectors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nSelect the first three elements in poker_vector by using their names: “Monday”, “Tuesday” and “Wednesday”. Assign the result of the selection to poker_start. Calculate the average of the values in poker_start with the mean() function. Simply print out the result so you can inspect it.\n\n\nE13.R\n\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Select poker results for Monday, Tuesday and Wednesday\npoker_start <- poker_vector[c(\"Monday\",\"Tuesday\",\"Wednesday\" )]\n  \n# Calculate the average of the elements in poker_start\nmean(poker_start)"
  },
  {
    "objectID": "Introduction_to_R_C2.html#selection-by-comparison---step-1",
    "href": "Introduction_to_R_C2.html#selection-by-comparison---step-1",
    "title": "3  Vectors",
    "section": "3.13 Selection by comparison - Step 1",
    "text": "3.13 Selection by comparison - Step 1\nBy making use of comparison operators, we can approach the previous question in a more proactive way.\nThe (logical) comparison operators known to R are:\n\n< for less than\n\nfor greater than\n\n<= for less than or equal to\n\n= for greater than or equal to\n\n== for equal to each other\n!= not equal to each other\n\nAs seen in the previous chapter, stating 6 > 5 returns TRUE. The nice thing about R is that you can use these comparison operators also on vectors. For example:\n\nc(4, 5, 6) > 5 [1] FALSE FALSE TRUE\n\nThis command tests for every element of the vector if the condition stated by the comparison operator is TRUE or FALSE.\nInstructions 100 XP Check which elements in poker_vector are positive (i.e. > 0) and assign this to selection_vector. Print out selection_vector so you can inspect it. The printout tells you whether you won (TRUE) or lost (FALSE) any money for each day.\n\n\nE14.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Which days did you make money on poker?\nselection_vector <- poker_vector > 0\n  \n# Print out selection_vector\nselection_vector"
  },
  {
    "objectID": "Introduction_to_R_C2.html#selection-by-comparison---step-2",
    "href": "Introduction_to_R_C2.html#selection-by-comparison---step-2",
    "title": "3  Vectors",
    "section": "3.14 Selection by comparison - Step 2",
    "text": "3.14 Selection by comparison - Step 2\nWorking with comparisons will make your data analytical life easier. Instead of selecting a subset of days to investigate yourself (like before), you can simply ask R to return only those days where you realized a positive return for poker.\nIn the previous exercises you used selection_vector <- poker_vector > 0 to find the days on which you had a positive poker return. Now, you would like to know not only the days on which you won, but also how much you won on those days.\nYou can select the desired elements, by putting selection_vector between the square brackets that follow poker_vector:\n\npoker_vector[selection_vector]\n\nR knows what to do when you pass a logical vector in square brackets: it will only select the elements that correspond to TRUE in selection_vector."
  },
  {
    "objectID": "Introduction_to_R_C2.html#instructions-100-xp-11",
    "href": "Introduction_to_R_C2.html#instructions-100-xp-11",
    "title": "3  Vectors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nUse selection_vector in square brackets to assign the amounts that you won on the profitable days to the variable poker_winning_days.\n\n\nE15.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Which days did you make money on poker?\nselection_vector <- poker_vector > 0\n\n# Select from poker_vector these days\npoker_winning_days <- poker_vector[selection_vector]"
  },
  {
    "objectID": "Introduction_to_R_C2.html#advanced-selection",
    "href": "Introduction_to_R_C2.html#advanced-selection",
    "title": "3  Vectors",
    "section": "3.15 Advanced selection",
    "text": "3.15 Advanced selection\nJust like you did for poker, you also want to know those days where you realized a positive return for roulette."
  },
  {
    "objectID": "Introduction_to_R_C2.html#instructions-100-xp-12",
    "href": "Introduction_to_R_C2.html#instructions-100-xp-12",
    "title": "3  Vectors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nCreate the variable selection_vector, this time to see if you made profit with roulette for different days. Assign the amounts that you made on the days that you ended positively for roulette to the variable roulette_winning_days. This vector thus contains the positive winnings of roulette_vector.\n\n\nE16.R\n\n# Poker and roulette winnings from Monday to Friday:\npoker_vector <- c(140, -50, 20, -120, 240)\nroulette_vector <- c(-24, -50, 100, -350, 10)\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(poker_vector) <- days_vector\nnames(roulette_vector) <- days_vector\n\n# Which days did you make money on roulette?\nselection_vector <- roulette_vector > 0\n\n# Select from roulette_vector these days\nroulette_winning_days <- roulette_vector[selection_vector]"
  },
  {
    "objectID": "Introduction_to_R_C3.html#whats-a-matrix",
    "href": "Introduction_to_R_C3.html#whats-a-matrix",
    "title": "4  Matrices",
    "section": "4.1 What’s a matrix?",
    "text": "4.1 What’s a matrix?\nIn R, a matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns. Since you are only working with rows and columns, a matrix is called two-dimensional.\nYou can construct a matrix in R with the matrix() function. Consider the following example:\n\nmatrix(1:9, byrow = TRUE, nrow = 3)\n\nIn the matrix() function:\nThe first argument is the collection of elements that R will arrange into the rows and columns of the matrix. Here, we use 1:9 which is a shortcut for c(1, 2, 3, 4, 5, 6, 7, 8, 9). The argument byrow indicates that the matrix is filled by the rows. If we want the matrix to be filled by the columns, we just place byrow = FALSE. The third argument nrow indicates that the matrix should have three rows."
  },
  {
    "objectID": "Introduction_to_R_C3.html#instructions-100-xp",
    "href": "Introduction_to_R_C3.html#instructions-100-xp",
    "title": "4  Matrices",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nConstruct a matrix with 3 rows containing the numbers 1 up to 9, filled row-wise.\n\n\nE1.R\n\n# Construct a matrix with 3 rows that contain the numbers 1 up to 9\nmatrix(1:9, byrow = TRUE, nrow = 3)"
  },
  {
    "objectID": "Introduction_to_R_C3.html#analyze-matrices-you-shall",
    "href": "Introduction_to_R_C3.html#analyze-matrices-you-shall",
    "title": "4  Matrices",
    "section": "4.2 Analyze matrices, you shall",
    "text": "4.2 Analyze matrices, you shall\nIt is now time to get your hands dirty. In the following exercises you will analyze the box office numbers of the Star Wars franchise. May the force be with you!\nIn the editor, three vectors are defined. Each one represents the box office numbers from the first three Star Wars movies. The first element of each vector indicates the US box office revenue, the second element refers to the Non-US box office (source: Wikipedia).\nIn this exercise, you’ll combine all these figures into a single vector. Next, you’ll build a matrix from this vector."
  },
  {
    "objectID": "Introduction_to_R_C3.html#instructions-100-xp-1",
    "href": "Introduction_to_R_C3.html#instructions-100-xp-1",
    "title": "4  Matrices",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nUse c(new_hope, empire_strikes, return_jedi) to combine the three vectors into one vector. Call this vector box_office. Construct a matrix with 3 rows, where each row represents a movie. Use the matrix() function to do this. The first argument is the vector box_office, containing all box office figures. Next, you’ll have to specify nrow = 3 and byrow = TRUE. Name the resulting matrix star_wars_matrix.\n\n\nE2.R\n\n# Box office Star Wars (in millions!)\nnew_hope <- c(460.998, 314.4)\nempire_strikes <- c(290.475, 247.900)\nreturn_jedi <- c(309.306, 165.8)\n\n# Create box_office\nbox_office <- c(new_hope, empire_strikes, return_jedi)\n\n# Construct star_wars_matrix\nstar_wars_matrix <- matrix(box_office, nrow = 3, byrow = TRUE)"
  },
  {
    "objectID": "Introduction_to_R_C3.html#naming-a-matrix",
    "href": "Introduction_to_R_C3.html#naming-a-matrix",
    "title": "4  Matrices",
    "section": "4.3 Naming a matrix",
    "text": "4.3 Naming a matrix\nTo help you remember what is stored in star_wars_matrix, you would like to add the names of the movies for the rows. Not only does this help you to read the data, but it is also useful to select certain elements from the matrix.\nSimilar to vectors, you can add names for the rows and the columns of a matrix\n\nrownames(my_matrix) <- row_names_vector colnames(my_matrix) <- col_names_vector\n\nWe went ahead and prepared two vectors for you: region, and titles. You will need these vectors to name the columns and rows of star_wars_matrix, respectively."
  },
  {
    "objectID": "Introduction_to_R_C3.html#instructions-100-xp-2",
    "href": "Introduction_to_R_C3.html#instructions-100-xp-2",
    "title": "4  Matrices",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nUse colnames() to name the columns of star_wars_matrix with the region vector. Use rownames() to name the rows of star_wars_matrix with the titles vector. Print out star_wars_matrix to see the result of your work.\n\n\nE3.R\n\n# Box office Star Wars (in millions!)\nnew_hope <- c(460.998, 314.4)\nempire_strikes <- c(290.475, 247.900)\nreturn_jedi <- c(309.306, 165.8)\n\n# Construct matrix\nstar_wars_matrix <- matrix(c(new_hope, empire_strikes, return_jedi), nrow = 3,\nbyrow = TRUE)\n\n# Vectors region and titles, used for naming\nregion <- c(\"US\", \"non-US\")\ntitles <- c(\"A New Hope\", \"The Empire Strikes Back\", \"Return of the Jedi\")\n\n# Name the columns with region\n\ncolnames(star_wars_matrix) <- region\n\n# Name the rows with titles\nrownames(star_wars_matrix) <- titles\n\n# Print out star_wars_matrix\nprint(star_wars_matrix)"
  },
  {
    "objectID": "Introduction_to_R_C3.html#calculating-the-worldwide-box-office",
    "href": "Introduction_to_R_C3.html#calculating-the-worldwide-box-office",
    "title": "4  Matrices",
    "section": "4.4 Calculating the worldwide box office",
    "text": "4.4 Calculating the worldwide box office\nThe single most important thing for a movie in order to become an instant legend in Tinseltown is its worldwide box office figures.\nTo calculate the total box office revenue for the three Star Wars movies, you have to take the sum of the US revenue column and the non-US revenue column.\nIn R, the function rowSums() conveniently calculates the totals for each row of a matrix. This function creates a new vector:\n\nrowSums(my_matrix)"
  },
  {
    "objectID": "Introduction_to_R_C3.html#instructions-100-xp-3",
    "href": "Introduction_to_R_C3.html#instructions-100-xp-3",
    "title": "4  Matrices",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nCalculate the worldwide box office figures for the three movies and put these in the vector named worldwide_vector.\n\n\nE4.R\n\n# Construct star_wars_matrix\nbox_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)\nregion <- c(\"US\", \"non-US\")\ntitles <- c(\"A New Hope\", \n                 \"The Empire Strikes Back\", \n                 \"Return of the Jedi\")\n               \nstar_wars_matrix <- matrix(box_office, \n                      nrow = 3, byrow = TRUE,\n                      dimnames = list(titles, region))\n\n# Calculate worldwide box office figures\nworldwide_vector <- rowSums(star_wars_matrix)"
  },
  {
    "objectID": "Introduction_to_R_C3.html#adding-a-column-for-the-worldwide-box-office",
    "href": "Introduction_to_R_C3.html#adding-a-column-for-the-worldwide-box-office",
    "title": "4  Matrices",
    "section": "4.5 Adding a column for the Worldwide box office",
    "text": "4.5 Adding a column for the Worldwide box office\nIn the previous exercise you calculated the vector that contained the worldwide box office receipt for each of the three Star Wars movies. However, this vector is not yet part of star_wars_matrix.\nYou can add a column or multiple columns to a matrix with the cbind() function, which merges matrices and/or vectors together by column. For example:\n\nbig_matrix <- cbind(matrix1, matrix2, vector1 …)"
  },
  {
    "objectID": "Introduction_to_R_C3.html#instructions-100-xp-4",
    "href": "Introduction_to_R_C3.html#instructions-100-xp-4",
    "title": "4  Matrices",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nAdd worldwide_vector as a new column to the star_wars_matrix and assign the result to all_wars_matrix. Use the cbind() function.\n\n\nE5.R\n\n# Construct star_wars_matrix\nbox_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)\nregion <- c(\"US\", \"non-US\")\ntitles <- c(\"A New Hope\", \n            \"The Empire Strikes Back\", \n            \"Return of the Jedi\")\n               \nstar_wars_matrix <- matrix(box_office, \n                      nrow = 3, byrow = TRUE,\n                      dimnames = list(titles, region))\n\n# The worldwide box office figures\nworldwide_vector <- rowSums(star_wars_matrix)\n\n# Bind the new variable worldwide_vector as a column to star_wars_matrix\nall_wars_matrix <- cbind(star_wars_matrix,worldwide_vector)"
  },
  {
    "objectID": "Introduction_to_R_C3.html#adding-a-row",
    "href": "Introduction_to_R_C3.html#adding-a-row",
    "title": "4  Matrices",
    "section": "4.6 Adding a row",
    "text": "4.6 Adding a row\nJust like every action has a reaction, every cbind() has an rbind(). (We admit, we are pretty bad with metaphors.)\nYour R workspace, where all variables you defined ‘live’ (check out what a workspace is), has already been initialized and contains two matrices:\n\nstar_wars_matrix that we have used all along, with data on the original trilogy,\nstar_wars_matrix2, with similar data for the prequels trilogy.\n\nExplore these matrices in the console if you want to have a closer look. If you want to check out the contents of the workspace, you can type ls() in the console."
  },
  {
    "objectID": "Introduction_to_R_C3.html#instructions-100-xp-5",
    "href": "Introduction_to_R_C3.html#instructions-100-xp-5",
    "title": "4  Matrices",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nUse rbind() to paste together star_wars_matrix and star_wars_matrix2, in this order. Assign the resulting matrix to all_wars_matrix.\n\n\nE6.R\n\n# star_wars_matrix and star_wars_matrix2 are available in your workspace\nstar_wars_matrix  \nstar_wars_matrix2 \n\n# Combine both Star Wars trilogies in one matrix\nall_wars_matrix <- rbind(star_wars_matrix,star_wars_matrix2)"
  },
  {
    "objectID": "Introduction_to_R_C3.html#the-total-box-office-revenue-for-the-entire-saga",
    "href": "Introduction_to_R_C3.html#the-total-box-office-revenue-for-the-entire-saga",
    "title": "4  Matrices",
    "section": "4.7 The total box office revenue for the entire saga",
    "text": "4.7 The total box office revenue for the entire saga\nJust like cbind() has rbind(), colSums() has rowSums(). Your R workspace already contains the all_wars_matrix that you constructed in the previous exercise; type all_wars_matrix to have another look. Let’s now calculate the total box office revenue for the entire saga."
  },
  {
    "objectID": "Introduction_to_R_C3.html#instructions-100-xp-6",
    "href": "Introduction_to_R_C3.html#instructions-100-xp-6",
    "title": "4  Matrices",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nCalculate the total revenue for the US and the non-US region and assign total_revenue_vector. You can use the colSums() function. Print out total_revenue_vector to have a look at the results.\n\n\nE7.R\n\n# all_wars_matrix is available in your workspace\nall_wars_matrix\n\n# Total revenue for US and non-US\ntotal_revenue_vector <- colSums(all_wars_matrix)\n  \n# Print out total_revenue_vector\nprint(total_revenue_vector)"
  },
  {
    "objectID": "Introduction_to_R_C3.html#selection-of-matrix-elements",
    "href": "Introduction_to_R_C3.html#selection-of-matrix-elements",
    "title": "4  Matrices",
    "section": "4.8 Selection of matrix elements",
    "text": "4.8 Selection of matrix elements\nSimilar to vectors, you can use the square brackets [ ] to select one or multiple elements from a matrix. Whereas vectors have one dimension, matrices have two dimensions. You should therefore use a comma to separate the rows you want to select from the columns. For example:\n\nmy_matrix[1,2] selects the element at the first row and second column. *my_matrix[1:3,2:4] results in a matrix with the data on the rows 1, 2, 3 and columns 2, 3, 4.\n\nIf you want to select all elements of a row or a column, no number is needed before or after the comma, respectively:\n\nmy_matrix[,1] selects all elements of the first column. *my_matrix[1,] selects all elements of the first row.\n\nBack to Star Wars with this newly acquired knowledge! As in the previous exercise, all_wars_matrix is already available in your workspace."
  },
  {
    "objectID": "Introduction_to_R_C3.html#instructions-100-xp-7",
    "href": "Introduction_to_R_C3.html#instructions-100-xp-7",
    "title": "4  Matrices",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nSelect the non-US revenue for all movies (the entire second column of all_wars_matrix), store the result as non_us_all. Use mean() on non_us_all to calculate the average non-US revenue for all movies. Simply print out the result. This time, select the non-US revenue for the first two movies in all_wars_matrix. Store the result as non_us_some. Use mean() again to print out the average of the values in non_us_some.\n\n\nE8.R\n\n# all_wars_matrix is available in your workspace\nall_wars_matrix\n\n# Select the non-US revenue for all movies\nnon_us_all <- all_wars_matrix[,2] \n  \n# Average non-US revenue\nmean(all_wars_matrix[,2])\n  \n# Select the non-US revenue for first two movies\nnon_us_some <- all_wars_matrix[1:2,2] \n  \n# Average non-US revenue for first two movies\nmean(all_wars_matrix[1:2,2])"
  },
  {
    "objectID": "Introduction_to_R_C3.html#a-little-arithmetic-with-matrices",
    "href": "Introduction_to_R_C3.html#a-little-arithmetic-with-matrices",
    "title": "4  Matrices",
    "section": "4.9 A little arithmetic with matrices",
    "text": "4.9 A little arithmetic with matrices\nSimilar to what you have learned with vectors, the standard operators like +, -, /, *, etc. work in an element-wise way on matrices in R.\nFor example, 2 * my_matrix multiplies each element of my_matrix by two.\nAs a newly-hired data analyst for Lucasfilm, it is your job to find out how many visitors went to each movie for each geographical area. You already have the total revenue figures in all_wars_matrix. Assume that the price of a ticket was 5 dollars. Simply dividing the box office numbers by this ticket price gives you the number of visitors."
  },
  {
    "objectID": "Introduction_to_R_C3.html#instructions-100-xp-8",
    "href": "Introduction_to_R_C3.html#instructions-100-xp-8",
    "title": "4  Matrices",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nDivide all_wars_matrix by 5, giving you the number of visitors in millions. Assign the resulting matrix to visitors. Print out visitors so you can have a look.\n\n\nE9.R\n\n# all_wars_matrix is available in your workspace\nall_wars_matrix\n\n# Estimate the visitors\nvisitors <- all_wars_matrix/5\n\n  \n# Print the estimate to the console\nprint(visitors)"
  },
  {
    "objectID": "Introduction_to_R_C3.html#a-little-arithmetic-with-matrices-2",
    "href": "Introduction_to_R_C3.html#a-little-arithmetic-with-matrices-2",
    "title": "4  Matrices",
    "section": "4.10 A little arithmetic with matrices (2)",
    "text": "4.10 A little arithmetic with matrices (2)\nJust like 2 * my_matrix multiplied every element of my_matrix by two, my_matrix1 * my_matrix2 creates a matrix where each element is the product of the corresponding elements in my_matrix1 and my_matrix2.\nAfter looking at the result of the previous exercise, big boss Lucas points out that the ticket prices went up over time. He asks to redo the analysis based on the prices you can find in ticket_prices_matrix (source: imagination).\nThose who are familiar with matrices should note that this is not the standard matrix multiplication for which you should use %*% in R."
  },
  {
    "objectID": "Introduction_to_R_C3.html#instructions-100-xp-9",
    "href": "Introduction_to_R_C3.html#instructions-100-xp-9",
    "title": "4  Matrices",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nDivide all_wars_matrix by ticket_prices_matrix to get the estimated number of US and non-US visitors for the six movies. Assign the result to visitors. From the visitors matrix, select the entire first column, representing the number of visitors in the US. Store this selection as us_visitors. Calculate the average number of US visitors; print out the result.\n\n\nE10.R\n\n# all_wars_matrix and ticket_prices_matrix are available in your workspace\nall_wars_matrix\nticket_prices_matrix\n\n# Estimated number of visitors\nvisitors <- all_wars_matrix/ticket_prices_matrix\n\n# US visitors\nus_visitors <- visitors[,1]\n\n# Average number of US visitors\nmean(us_visitors)"
  },
  {
    "objectID": "Introduction_to_R_C4.html#whats-a-factor-and-why-would-you-use-it",
    "href": "Introduction_to_R_C4.html#whats-a-factor-and-why-would-you-use-it",
    "title": "5  Factors",
    "section": "5.1 What’s a factor and why would you use it?",
    "text": "5.1 What’s a factor and why would you use it?\nIn this chapter you dive into the wonderful world of factors.\nThe term factor refers to a statistical data type used to store categorical variables. The difference between a categorical variable and a continuous variable is that a categorical variable can belong to a limited number of categories. A continuous variable, on the other hand, can correspond to an infinite number of values.\nIt is important that R knows whether it is dealing with a continuous or a categorical variable, as the statistical models you will develop in the future treat both types differently. (You will see later why this is the case.)\nA good example of a categorical variable is sex. In many circumstances you can limit the sex categories to “Male” or “Female”. (Sometimes you may need different categories. For example, you may need to consider chromosomal variation, hermaphroditic animals, or different cultural norms, but you will always have a finite number of categories.)"
  },
  {
    "objectID": "Introduction_to_R_C4.html#instructions-100-xp",
    "href": "Introduction_to_R_C4.html#instructions-100-xp",
    "title": "5  Factors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nAssign to variable theory the value “factors”.\n\n\nE1.R\n\n# Assign to the variable theory what this chapter is about!\ntheory <- \"factors\""
  },
  {
    "objectID": "Introduction_to_R_C4.html#whats-a-factor-and-why-would-you-use-it-2",
    "href": "Introduction_to_R_C4.html#whats-a-factor-and-why-would-you-use-it-2",
    "title": "5  Factors",
    "section": "5.2 What’s a factor and why would you use it? (2)",
    "text": "5.2 What’s a factor and why would you use it? (2)\nTo create factors in R, you make use of the function factor(). First thing that you have to do is create a vector that contains all the observations that belong to a limited number of categories. For example, sex_vector contains the sex of 5 different individuals:\n\nsex_vector <- c(“Male”,“Female”,“Female”,“Male”,“Male”)\n\nIt is clear that there are two categories, or in R-terms ‘factor levels’, at work here: “Male” and “Female”.\nThe function factor() will encode the vector as a factor:\n\nfactor_sex_vector <- factor(sex_vector)"
  },
  {
    "objectID": "Introduction_to_R_C4.html#instructions-100-xp-1",
    "href": "Introduction_to_R_C4.html#instructions-100-xp-1",
    "title": "5  Factors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nConvert the character vector sex_vector to a factor with factor() and assign the result to factor_sex_vector Print out factor_sex_vector and assert that R prints out the factor levels below the actual values.\n\n\nE2.R\n\n# Sex vector\nsex_vector <- c(\"Male\", \"Female\", \"Female\", \"Male\", \"Male\")\n\n# Convert sex_vector to a factor\nfactor_sex_vector <- factor(sex_vector)\n\n# Print out factor_sex_vector\nprint(factor_sex_vector)"
  },
  {
    "objectID": "Introduction_to_R_C4.html#whats-a-factor-and-why-would-you-use-it-3",
    "href": "Introduction_to_R_C4.html#whats-a-factor-and-why-would-you-use-it-3",
    "title": "5  Factors",
    "section": "5.3 What’s a factor and why would you use it? (3)",
    "text": "5.3 What’s a factor and why would you use it? (3)\nThere are two types of categorical variables: a nominal categorical variable and an ordinal categorical variable.\nA nominal variable is a categorical variable without an implied order. This means that it is impossible to say that ‘one is worth more than the other’. For example, think of the categorical variable animals_vector with the categories “Elephant”, “Giraffe”, “Donkey” and “Horse”. Here, it is impossible to say that one stands above or below the other. (Note that some of you might disagree ;-) ).\nIn contrast, ordinal variables do have a natural ordering. Consider for example the categorical variable temperature_vector with the categories: “Low”, “Medium” and “High”. Here it is obvious that “Medium” stands above “Low”, and “High” stands above “Medium”."
  },
  {
    "objectID": "Introduction_to_R_C4.html#instructions-100-xp-2",
    "href": "Introduction_to_R_C4.html#instructions-100-xp-2",
    "title": "5  Factors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nSubmit the answer to check how R constructs and prints nominal and ordinal variables. Do not worry if you do not understand all the code just yet, we will get to that.\n\n\nE3.R\n\n# Animals\nanimals_vector <- c(\"Elephant\", \"Giraffe\", \"Donkey\", \"Horse\")\nfactor_animals_vector <- factor(animals_vector)\nfactor_animals_vector\n\n# Temperature\ntemperature_vector <- c(\"High\", \"Low\", \"High\",\"Low\", \"Medium\")\nfactor_temperature_vector <- factor(temperature_vector, order = TRUE,\n  levels = c(\"Low\", \"Medium\", \"High\"))\nfactor_temperature_vector"
  },
  {
    "objectID": "Introduction_to_R_C4.html#factor-levels",
    "href": "Introduction_to_R_C4.html#factor-levels",
    "title": "5  Factors",
    "section": "5.4 Factor levels",
    "text": "5.4 Factor levels\nWhen you first get a dataset, you will often notice that it contains factors with specific factor levels. However, sometimes you will want to change the names of these levels for clarity or other reasons. R allows you to do this with the function levels():\n\nlevels(factor_vector) <- c(“name1”, “name2”,…)\n\nA good illustration is the raw data that is provided to you by a survey. A common question for every questionnaire is the sex of the respondent. Here, for simplicity, just two categories were recorded, “M” and “F”. (You usually need more categories for survey data; either way, you use a factor to store the categorical data.)\n\nsurvey_vector <- c(“M”, “F”, “F”, “M”, “M”)\n\nRecording the sex with the abbreviations “M” and “F” can be convenient if you are collecting data with pen and paper, but it can introduce confusion when analyzing the data. At that point, you will often want to change the factor levels to “Male” and “Female” instead of “M” and “F” for clarity.\nWatch out: the order with which you assign the levels is important. If you type levels(factor_survey_vector), you’ll see that it outputs [1] “F” “M”. If you don’t specify the levels of the factor when creating the vector, R will automatically assign them alphabetically. To correctly map “F” to “Female” and “M” to “Male”, the levels should be set to c(“Female”, “Male”), in this order."
  },
  {
    "objectID": "Introduction_to_R_C4.html#instructions-100-xp-3",
    "href": "Introduction_to_R_C4.html#instructions-100-xp-3",
    "title": "5  Factors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nCheck out the code that builds a factor vector from survey_vector. You should use factor_survey_vector in the next instruction. Change the factor levels of factor_survey_vector to c(“Female”, “Male”). Mind the order of the vector elements here.\n\n\nE4.R\n\n# Code to build factor_survey_vector\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\n\n# Specify the levels of factor_survey_vector\nlevels(factor_survey_vector) <- c(\"Female\", \"Male\")\n\nfactor_survey_vector"
  },
  {
    "objectID": "Introduction_to_R_C4.html#summarizing-a-factor",
    "href": "Introduction_to_R_C4.html#summarizing-a-factor",
    "title": "5  Factors",
    "section": "5.5 Summarizing a factor",
    "text": "5.5 Summarizing a factor\nAfter finishing this course, one of your favorite functions in R will be summary(). This will give you a quick overview of the contents of a variable:\nsummary(my_var) Going back to our survey, you would like to know how many “Male” responses you have in your study, and how many “Female” responses. The summary() function gives you the answer to this question."
  },
  {
    "objectID": "Introduction_to_R_C4.html#instructions-100-xp-4",
    "href": "Introduction_to_R_C4.html#instructions-100-xp-4",
    "title": "5  Factors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nAsk a summary() of the survey_vector and factor_survey_vector. Interpret the results of both vectors. Are they both equally useful in this case?\n\n\nE5.R\n\n# Build factor_survey_vector with clean levels\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\nlevels(factor_survey_vector) <- c(\"Female\", \"Male\")\nfactor_survey_vector\n\n# Generate summary for survey_vector\nsummary(survey_vector)\n\n# Generate summary for factor_survey_vector\nsummary(factor_survey_vector)"
  },
  {
    "objectID": "Introduction_to_R_C4.html#battle-of-the-sexes",
    "href": "Introduction_to_R_C4.html#battle-of-the-sexes",
    "title": "5  Factors",
    "section": "5.6 Battle of the sexes",
    "text": "5.6 Battle of the sexes\nYou might wonder what happens when you try to compare elements of a factor. In factor_survey_vector you have a factor with two levels: “Male” and “Female”. But how does R value these relative to each other?"
  },
  {
    "objectID": "Introduction_to_R_C4.html#instructions-100-xp-5",
    "href": "Introduction_to_R_C4.html#instructions-100-xp-5",
    "title": "5  Factors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nRead the code in the editor and submit the answer to test if male is greater than (>) female.\n\n\nE6.R\n\n# Build factor_survey_vector with clean levels\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\nlevels(factor_survey_vector) <- c(\"Female\", \"Male\")\n\n# Male\nmale <- factor_survey_vector[1]\n\n# Female\nfemale <- factor_survey_vector[2]\n\n# Battle of the sexes: Male 'larger' than female?\nmale > female"
  },
  {
    "objectID": "Introduction_to_R_C4.html#ordered-factors",
    "href": "Introduction_to_R_C4.html#ordered-factors",
    "title": "5  Factors",
    "section": "5.7 Ordered factors",
    "text": "5.7 Ordered factors\nSince “Male” and “Female” are unordered (or nominal) factor levels, R returns a warning message, telling you that the greater than operator is not meaningful. As seen before, R attaches an equal value to the levels for such factors.\nBut this is not always the case! Sometimes you will also deal with factors that do have a natural ordering between its categories. If this is the case, we have to make sure that we pass this information to R…\nLet us say that you are leading a research team of five data analysts and that you want to evaluate their performance. To do this, you track their speed, evaluate each analyst as “slow”, “medium” or “fast”, and save the results in speed_vector."
  },
  {
    "objectID": "Introduction_to_R_C4.html#instructions-100-xp-6",
    "href": "Introduction_to_R_C4.html#instructions-100-xp-6",
    "title": "5  Factors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nAs a first step, assign speed_vector a vector with 5 entries, one for each analyst. Each entry should be either “slow”, “medium”, or “fast”. Use the list below:\n\nAnalyst 1 is medium,\nAnalyst 2 is slow,\nAnalyst 3 is slow,\nAnalyst 4 is medium and\nAnalyst 5 is fast.\n\nNo need to specify these are factors yet.\n\n\nE7.R\n\n# Create speed_vector\n\nspeed_vector <- c(\"medium\", \"slow\", \"slow\", \"medium\", \"fast\")"
  },
  {
    "objectID": "Introduction_to_R_C4.html#ordered-factors-2",
    "href": "Introduction_to_R_C4.html#ordered-factors-2",
    "title": "5  Factors",
    "section": "5.8 Ordered factors (2)",
    "text": "5.8 Ordered factors (2)\nspeed_vector should be converted to an ordinal factor since its categories have a natural ordering. By default, the function factor() transforms speed_vector into an unordered factor. To create an ordered factor, you have to add two additional arguments: ordered and levels.\n\nfactor(some_vector, ordered = TRUE, levels = c(“lev1”, “lev2” …))\n\nBy setting the argument ordered to TRUE in the function factor(), you indicate that the factor is ordered. With the argument levels you give the values of the factor in the correct order."
  },
  {
    "objectID": "Introduction_to_R_C4.html#instructions-100-xp-7",
    "href": "Introduction_to_R_C4.html#instructions-100-xp-7",
    "title": "5  Factors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nFrom speed_vector, create an ordered factor vector: factor_speed_vector. Set ordered to TRUE, and set levels to c(“slow”, “medium”, “fast”).\n\n\nE8.R\n\n# Create speed_vector\nspeed_vector <- c(\"medium\", \"slow\", \"slow\", \"medium\", \"fast\")\n\n# Convert speed_vector to ordered factor vector\nfactor_speed_vector <- factor(speed_vector,\n    ordered = TRUE,\n    levels = c (\"slow\", \"medium\", \"fast\" ))\n\n# Print factor_speed_vector\nfactor_speed_vector\nsummary(factor_speed_vector)"
  },
  {
    "objectID": "Introduction_to_R_C4.html#comparing-ordered-factors",
    "href": "Introduction_to_R_C4.html#comparing-ordered-factors",
    "title": "5  Factors",
    "section": "5.9 Comparing ordered factors",
    "text": "5.9 Comparing ordered factors\nHaving a bad day at work, ‘data analyst number two’ enters your office and starts complaining that ‘data analyst number five’ is slowing down the entire project. Since you know that ‘data analyst number two’ has the reputation of being a smarty-pants, you first decide to check if his statement is true.\nThe fact that factor_speed_vector is now ordered enables us to compare different elements (the data analysts in this case). You can simply do this by using the well-known operators."
  },
  {
    "objectID": "Introduction_to_R_C4.html#instructions-100-xp-8",
    "href": "Introduction_to_R_C4.html#instructions-100-xp-8",
    "title": "5  Factors",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse [2] to select from factor_speed_vector the factor value for the second data analyst. Store it as da2.\nUse [5] to select the factor_speed_vector factor value for the fifth data analyst. Store it as da5.\nCheck if da2 is greater than da5; simply print out the result. Remember that you can use the > operator to check whether one element is larger than the other.\n\n\n\nE9.R\n\n# Create factor_speed_vector\nspeed_vector <- c(\"medium\", \"slow\", \"slow\", \"medium\", \"fast\")\nfactor_speed_vector <- factor(speed_vector, ordered = TRUE, levels = c(\"slow\",\n\"medium\", \"fast\"))\n\n# Factor value for second data analyst\nda2 <- factor_speed_vector[2]\n\n# Factor value for fifth data analyst\nda5 <- factor_speed_vector[5]\n\n# Is data analyst 2 faster than data analyst 5?\nda2 >da5"
  },
  {
    "objectID": "Introduction_to_R_C5.html#sorting-your-data-frame",
    "href": "Introduction_to_R_C5.html#sorting-your-data-frame",
    "title": "6  Lists",
    "section": "6.1 Sorting your data frame",
    "text": "6.1 Sorting your data frame\nAlright, now that you understand the order() function, let us do something useful with it. You would like to rearrange your data frame such that it starts with the smallest planet and ends with the largest one. A sort on the diameter column."
  },
  {
    "objectID": "Introduction_to_R_C5.html#instructions-100-xp",
    "href": "Introduction_to_R_C5.html#instructions-100-xp",
    "title": "6  Lists",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nCall order() on planets_df$diameter (the diameter column of planets_df). Store the result as positions. Now reshuffle planets_df with the positions vector as row indexes inside square brackets. Keep all columns. Simply print out the result.\n\n\nE1.R\n\n# planets_df is pre-loaded in your workspace\norder(planets_df$diameter)\n# Use order() to create positions\npositions <-  order(planets_df$diameter)\n\n# Use positions to sort planets_df\nplanets_df[positions, ]"
  },
  {
    "objectID": "Introduction_to_R_C5.html#lists-why-would-you-need-them",
    "href": "Introduction_to_R_C5.html#lists-why-would-you-need-them",
    "title": "6  Lists",
    "section": "6.2 Lists, why would you need them?",
    "text": "6.2 Lists, why would you need them?\nCongratulations! At this point in the course you are already familiar with:\nVectors (one dimensional array): can hold numeric, character or logical values. The elements in a vector all have the same data type. Matrices (two dimensional array): can hold numeric, character or logical values. The elements in a matrix all have the same data type. Data frames (two-dimensional objects): can hold numeric, character or logical values. Within a column all elements have the same data type, but different columns can be of different data type. Pretty sweet for an R newbie, right? ;-)"
  },
  {
    "objectID": "Introduction_to_R_C5.html#instructions-100-xp-1",
    "href": "Introduction_to_R_C5.html#instructions-100-xp-1",
    "title": "6  Lists",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nSubmit the answer to start learning everything about lists!\n\n\nE2.R\n\n# Just submit the answer\n#vector\nx <- c(1, 2, 3)\ny <-c(7,8,5)\nz <- c(\"dragon\", \"quinera\", \"leviatan\")\n#matrix\nmatrix <- cbind(x,y)\n\n#data frame\ndf <- data.frame(x,y,z)\n\nprint(df)"
  },
  {
    "objectID": "Introduction_to_R_C5.html#lists-why-would-you-need-them-2",
    "href": "Introduction_to_R_C5.html#lists-why-would-you-need-them-2",
    "title": "6  Lists",
    "section": "6.3 Lists, why would you need them? (2)",
    "text": "6.3 Lists, why would you need them? (2)\nA list in R is similar to your to-do list at work or school: the different items on that list most likely differ in length, characteristic, and type of activity that has to be done.\nA list in R allows you to gather a variety of objects under one name (that is, the name of the list) in an ordered way. These objects can be matrices, vectors, data frames, even other lists, etc. It is not even required that these objects are related to each other in any way.\nYou could say that a list is some kind super data type: you can store practically any piece of information in it!"
  },
  {
    "objectID": "Introduction_to_R_C5.html#instructions-100-xp-2",
    "href": "Introduction_to_R_C5.html#instructions-100-xp-2",
    "title": "6  Lists",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nJust submit the answer to start the first exercise on lists.\n\n\nE3.R\n\n# Just submit the answer to start the first exercise on lists.\ndf <- data.frame(x = c(1, 2, 3), y = c(\"dragon\", \"grifo\", \"wyver\"))\nlista <- list(df)"
  },
  {
    "objectID": "Introduction_to_R_C5.html#creating-a-list",
    "href": "Introduction_to_R_C5.html#creating-a-list",
    "title": "6  Lists",
    "section": "6.4 Creating a list",
    "text": "6.4 Creating a list\nLet us create our first list! To construct a list you use the function list():\nmy_list <- list(comp1, comp2 …) The arguments to the list function are the list components. Remember, these components can be matrices, vectors, other lists, …"
  },
  {
    "objectID": "Introduction_to_R_C5.html#instructions-100-xp-3",
    "href": "Introduction_to_R_C5.html#instructions-100-xp-3",
    "title": "6  Lists",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nConstruct a list, named my_list, that contains the variables my_vector, my_matrix and my_df as list components.\n\n\nE4.R\n\n# Vector with numerics from 1 up to 10\nmy_vector <- 1:10 \n\n# Matrix with numerics from 1 up to 9\nmy_matrix <- matrix(1:9, ncol = 3)\n\n# First 10 elements of the built-in data frame mtcars\nmy_df <- mtcars[1:10,]\n\n# Construct list with these different elements:\nmy_list <-list(my_vector,my_matrix,my_df)"
  },
  {
    "objectID": "Introduction_to_R_C5.html#creating-a-named-list",
    "href": "Introduction_to_R_C5.html#creating-a-named-list",
    "title": "6  Lists",
    "section": "6.5 Creating a named list",
    "text": "6.5 Creating a named list\nWell done, you’re on a roll!\nJust like on your to-do list, you want to avoid not knowing or remembering what the components of your list stand for. That is why you should give names to them:\n\nmy_list <- list(name1 = your_comp1, name2 = your_comp2)\n\nThis creates a list with components that are named name1, name2, and so on. If you want to name your lists after you’ve created them, you can use the names() function as you did with vectors. The following commands are fully equivalent to the assignment above:\n\nmy_list <- list(your_comp1, your_comp2) names(my_list) <- c(“name1”, “name2”)"
  },
  {
    "objectID": "Introduction_to_R_C5.html#instructions-100-xp-4",
    "href": "Introduction_to_R_C5.html#instructions-100-xp-4",
    "title": "6  Lists",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nChange the code of the previous exercise (see editor) by adding names to the components. Use for my_vector the name vec, for my_matrix the name mat and for my_df the name df. Print out my_list so you can inspect the output.\n\n\nE5.R\n\n# Vector with numerics from 1 up to 10\nmy_vector <- 1:10 \n\n# Matrix with numerics from 1 up to 9\nmy_matrix <- matrix(1:9, ncol = 3)\n\n# First 10 elements of the built-in data frame mtcars\nmy_df <- mtcars[1:10,]\n\n# Adapt list() call to give the components names\nmy_list <- list(vec = my_vector,\n                mat = my_matrix,\n                df= my_df\n                )\n\n# Print out my_list\n\nprint(my_list)"
  },
  {
    "objectID": "Introduction_to_R_C5.html#creating-a-named-list-2",
    "href": "Introduction_to_R_C5.html#creating-a-named-list-2",
    "title": "6  Lists",
    "section": "6.6 Creating a named list (2)",
    "text": "6.6 Creating a named list (2)\nBeing a huge movie fan (remember your job at LucasFilms), you decide to start storing information on good movies with the help of lists.\nStart by creating a list for the movie “The Shining”. We have already created the variables mov, act and rev in your R workspace. Feel free to check them out in the console.\nInstructions 100 XP\nComplete the code in the editor to create shining_list; it contains three elements:\n\nmoviename: a character string with the movie title (stored in mov)\nactors: a vector with the main actors’ names (stored in act)\nreviews: a data frame that contains some reviews (stored in rev)\n\nDo not forget to name the list components accordingly (names are moviename, actors and reviews).\n\n\nE6.R\n\n# The variables mov, act and rev are available\n\n# Finish the code to build shining_list\n\nshining_list <- list(moviename = mov, actors = act, reviews = rev)"
  },
  {
    "objectID": "Introduction_to_R_C5.html#selecting-elements-from-a-list",
    "href": "Introduction_to_R_C5.html#selecting-elements-from-a-list",
    "title": "6  Lists",
    "section": "6.7 Selecting elements from a list",
    "text": "6.7 Selecting elements from a list\nYour list will often be built out of numerous elements and components. Therefore, getting a single element, multiple elements, or a component out of it is not always straightforward.\nOne way to select a component is using the numbered position of that component. For example, to “grab” the first component of shining_list you type\n\nshining_list[[1]]\n\nA quick way to check this out is typing it in the console. Important to remember: to select elements from vectors, you use single square brackets: [ ]. Don’t mix them up!\nYou can also refer to the names of the components, with [[ ]] or with the $ sign. Both will select the data frame representing the reviews:\n\nshining_list[[“reviews”]] shining_list$reviews\n\nBesides selecting components, you often need to select specific elements out of these components. For example, with shining_list[[2]][1] you select from the second component, actors (shining_list[[2]]), the first element ([1]). When you type this in the console, you will see the answer is Jack Nicholson."
  },
  {
    "objectID": "Introduction_to_R_C5.html#instructions-100-xp-5",
    "href": "Introduction_to_R_C5.html#instructions-100-xp-5",
    "title": "6  Lists",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nSelect from shining_list the vector representing the actors. Simply print out this vector. Select from shining_list the second element in the vector representing the actors. Do a printout like before.\n\n\nE7.R\n\n# shining_list is already pre-loaded in the workspace\n\n# Print out the vector representing the actors\nprint (shining_list$actors)\n\n# Print the second element of the vector representing the actors\nprint(shining_list$actors[2])"
  },
  {
    "objectID": "Introduction_to_R_C5.html#creating-a-new-list-for-another-movie",
    "href": "Introduction_to_R_C5.html#creating-a-new-list-for-another-movie",
    "title": "6  Lists",
    "section": "6.8 Creating a new list for another movie",
    "text": "6.8 Creating a new list for another movie\nYou found reviews of another, more recent, Jack Nicholson movie: The Departed!\n\nScores Comments 4.6 I would watch it again 5 Amazing! 4.8 I liked it 5 One of the best movies 4.2 Fascinating plot\n\nIt would be useful to collect together all the pieces of information about the movie, like the title, actors, and reviews into a single variable. Since these pieces of data are different shapes, it is natural to combine them in a list variable.\nmovie_title, containing the title of the movie, and movie_actors, containing the names of some of the actors in the movie, are available in your workspace."
  },
  {
    "objectID": "Introduction_to_R_C5.html#instructions-100-xp-6",
    "href": "Introduction_to_R_C5.html#instructions-100-xp-6",
    "title": "6  Lists",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nCreate two vectors, called scores and comments, that contain the information from the reviews shown in the table. Find the average of the scores vector and save it as avg_review. Combine the scores and comments vectors into a data frame called reviews_df. Create a list, called departed_list, that contains the movie_title, movie_actors, reviews data frame as reviews_df, and the average review score as avg_review, and print it out.\n\n\nE68.R\n\n# Use the table from the exercise to define the comments and scores vectors\nscores <- c(4.6, 5, 4.8, 5, 4.2)\ncomments <- c(\"I would watch it again\", \"Amazing!\", \"I liked it\", \"One of \nthe best movies\", \"Fascinating plot\")\n\n# Save the average of the scores vector as avg_review\navg_review <- mean(scores)\n\n# Combine scores and comments into the reviews_df data frame\nreviews_df <-data.frame(scores,comments)\n\n# Create and print out a list, called departed_list\ndeparted_list <- list(movie_title, movie_actors, reviews_df, avg_review)\nprint(departed_list)"
  },
  {
    "objectID": "Intermedio_R_C1.html#equality",
    "href": "Intermedio_R_C1.html#equality",
    "title": "7  Conditionals and Control Flow",
    "section": "7.1 Equality",
    "text": "7.1 Equality\nThe most basic form of comparison is equality. Let’s briefly recap its syntax. The following statements all evaluate to TRUE (feel free to try them out in the console).\n\n3 == (2 + 1) “intermediate” != “r” TRUE != FALSE “Rchitect” != “rchitect”\n\nNotice from the last expression that R is case sensitive: “R” is not equal to “r”. Keep this in mind when solving the exercises in this chapter!"
  },
  {
    "objectID": "Intermedio_R_C1.html#instructions-100-xp",
    "href": "Intermedio_R_C1.html#instructions-100-xp",
    "title": "7  Conditionals and Control Flow",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nIn the editor on the right, write R code to see if TRUE equals FALSE. Likewise, check if -6 * 14 is not equal to 17 - 101. Next up: comparison of character strings. Ask R whether the strings “useR” and “user” are equal. Finally, find out what happens if you compare logicals to numerics: are TRUE and 1 equal?\n\n\nE1.R\n\n# Comparison of logicals\nTRUE == FALSE\n# Comparison of numerics\n-6 * 14 != 17 - 101\n\n# Comparison of character strings\n\"useR\" == \"user\"\n\n# Compare a logical with a numeric\nTRUE == 1"
  },
  {
    "objectID": "Intermedio_R_C1.html#greater-and-less-than",
    "href": "Intermedio_R_C1.html#greater-and-less-than",
    "title": "7  Conditionals and Control Flow",
    "section": "7.2 Greater and less than",
    "text": "7.2 Greater and less than\nApart from equality operators, Filip also introduced the less than and greater than operators: < and >. You can also add an equal sign to express less than or equal to or greater than or equal to, respectively. Have a look at the following R expressions, that all evaluate to FALSE:\n\n(1 + 2) > 4 “dog” < “Cats” TRUE <= FALSE\n\nRemember that for string comparison, R determines the greater than relationship based on alphabetical order. Also, keep in mind that TRUE is treated as 1 for arithmetic, and FALSE is treated as 0. Therefore, FALSE < TRUE is TRUE."
  },
  {
    "objectID": "Intermedio_R_C1.html#instructions-100-xp-1",
    "href": "Intermedio_R_C1.html#instructions-100-xp-1",
    "title": "7  Conditionals and Control Flow",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nWrite R expressions to check whether:\n\n-6 * 5 + 2 is greater than or equal to -10 + 1.\n“raining” is less than or equal to “raining dogs”.\nTRUE is greater than FALSE.\n\n\n\nE2.R\n\n# Comparison of numerics\n-6 * 5 + 2 >= -10 + 1\n\n# Comparison of character strings\n\n\"raining\" <= \"raining dogs\"\n# Comparison of logicals\nTRUE > FALSE"
  },
  {
    "objectID": "Intermedio_R_C1.html#compare-vectors",
    "href": "Intermedio_R_C1.html#compare-vectors",
    "title": "7  Conditionals and Control Flow",
    "section": "7.3 Compare vectors",
    "text": "7.3 Compare vectors\nYou are already aware that R is very good with vectors. Without having to change anything about the syntax, R’s relational operators also work on vectors.\nLet’s go back to the example that was started in the video. You want to figure out whether your activity on social media platforms have paid off and decide to look at your results for LinkedIn and Facebook. The sample code in the editor initializes the vectors linkedin and facebook. Each of the vectors contains the number of profile views your LinkedIn and Facebook profiles had over the last seven days."
  },
  {
    "objectID": "Intermedio_R_C1.html#instructions-100-xp-2",
    "href": "Intermedio_R_C1.html#instructions-100-xp-2",
    "title": "7  Conditionals and Control Flow",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nUsing relational operators, find a logical answer, i.e. TRUE or FALSE, for the following questions:\n\nOn which days did the number of LinkedIn profile views exceed 15?\nWhen was your LinkedIn profile viewed only 5 times or fewer?\nWhen was your LinkedIn profile visited more often than your Facebook profile?\n\n\n\nE3.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# Popular days\n\nlinkedin > 15\n# Quiet days\n\nlinkedin <= 5\n# LinkedIn more popular than Facebook\nlinkedin > facebook"
  },
  {
    "objectID": "Intermedio_R_C1.html#compare-matrices",
    "href": "Intermedio_R_C1.html#compare-matrices",
    "title": "7  Conditionals and Control Flow",
    "section": "7.4 Compare matrices",
    "text": "7.4 Compare matrices\nR’s ability to deal with different data structures for comparisons does not stop at vectors. Matrices and relational operators also work together seamlessly!\nInstead of in vectors (as in the previous exercise), the LinkedIn and Facebook data is now stored in a matrix called views. The first row contains the LinkedIn information; the second row the Facebook information. The original vectors facebook and linkedin are still available as well."
  },
  {
    "objectID": "Intermedio_R_C1.html#instructions-100-xp-3",
    "href": "Intermedio_R_C1.html#instructions-100-xp-3",
    "title": "7  Conditionals and Control Flow",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nUsing the relational operators you’ve learned so far, try to discover the following:\nWhen were the views exactly equal to 13? Use the views matrix to return a logical matrix. For which days were the number of views less than or equal to 14? Again, have R return a logical matrix.\n\n\nE4.R\n\n# The social data has been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\nviews <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)\n\n# When does views equal 13?\nviews == 13\n\n# When is views less than or equal to 14?\n\nviews <= 14"
  },
  {
    "objectID": "Intermedio_R_C1.html#and",
    "href": "Intermedio_R_C1.html#and",
    "title": "7  Conditionals and Control Flow",
    "section": "7.5 & and |",
    "text": "7.5 & and |\nBefore you work your way through the next exercises, have a look at the following R expressions. All of them will evaluate to TRUE:\n\nTRUE & TRUE FALSE | TRUE 5 <= 5 & 2 < 3 3 < 4 | 7 < 6\n\nWatch out: 3 < x < 7 to check if x is between 3 and 7 will not work; you’ll need 3 < x & x < 7 for that.\nIn this exercise, you’ll be working with the last variable. This variable equals the last value of the linkedin vector that you’ve worked with previously. The linkedin vector represents the number of LinkedIn views your profile had in the last seven days, remember? Both the variables linkedin and last have been pre-defined for you."
  },
  {
    "objectID": "Intermedio_R_C1.html#instructions-100-xp-4",
    "href": "Intermedio_R_C1.html#instructions-100-xp-4",
    "title": "7  Conditionals and Control Flow",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nWrite R expressions to solve the following questions concerning the variable last:\n\nIs last under 5 or above 10?\nIs last between 15 and 20, excluding 15 but including 20?\n\n\n\nE5.R\n\n# The linkedin and last variable are already defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nlast <- tail(linkedin, 1)\n\n# Is last under 5 or above 10?\n5 < last | last < 10\n\n# Is last between 15 (exclusive) and 20 (inclusive)?\n15 <= last & last < 20"
  },
  {
    "objectID": "Intermedio_R_C1.html#and-2",
    "href": "Intermedio_R_C1.html#and-2",
    "title": "7  Conditionals and Control Flow",
    "section": "7.6 & and | (2)",
    "text": "7.6 & and | (2)\nLike relational operators, logical operators work perfectly fine with vectors and matrices.\nBoth the vectors linkedin and facebook are available again. Also a matrix - views - has been defined; its first and second row correspond to the linkedin and facebook vectors, respectively. Ready for some advanced queries to gain more insights into your social outreach?"
  },
  {
    "objectID": "Intermedio_R_C1.html#instructions-100-xp-5",
    "href": "Intermedio_R_C1.html#instructions-100-xp-5",
    "title": "7  Conditionals and Control Flow",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nWhen did LinkedIn views exceed 10 and did Facebook views fail to reach 10 for a particular day? Use the linkedin and facebook vectors.\nWhen were one or both of your LinkedIn and Facebook profiles visited at least 12 times?\nWhen is the views matrix equal to a number between 11 and 14, excluding 11 and including 14?\n\n\n\nE6.R\n\n# The social data (linkedin, facebook, views) has been created for you\nlinkedin \nfacebook \n# linkedin exceeds 10 but facebook below 10\nlinkedin >10 & facebook < 10 \n\n# When were one or both visited at least 12 times?\nlinkedin >= 12 | facebook >= 12\n\n# When is views between 11 (exclusive) and 14 (inclusive)?\nviews > 11 & views <= 14"
  },
  {
    "objectID": "Intermedio_R_C1.html#reverse-the-result",
    "href": "Intermedio_R_C1.html#reverse-the-result",
    "title": "7  Conditionals and Control Flow",
    "section": "7.7 Reverse the result: !",
    "text": "7.7 Reverse the result: !\nOn top of the & and | operators, you also learned about the ! operator, which negates a logical value. To refresh your memory, here are some R expressions that use !. They all evaluate to FALSE:\n\n!TRUE !(5 > 3) !!FALSE\n\nWhat would the following set of R expressions return?\n\nx <- 5 y <- 7 !(!(x < 4) & !!!(y > 12))"
  },
  {
    "objectID": "Intermedio_R_C1.html#answer-the-question-50xp",
    "href": "Intermedio_R_C1.html#answer-the-question-50xp",
    "title": "7  Conditionals and Control Flow",
    "section": "Answer the question 50XP",
    "text": "Answer the question 50XP\nPossible Answers\nTRUE press 1\nFALSE press 2\nRunning this piece of code would throw an error. press 3"
  },
  {
    "objectID": "Intermedio_R_C1.html#blend-it-all-together",
    "href": "Intermedio_R_C1.html#blend-it-all-together",
    "title": "7  Conditionals and Control Flow",
    "section": "7.8 Blend it all together",
    "text": "7.8 Blend it all together\nWith the things you’ve learned by now, you’re able to solve pretty cool problems.\nInstead of recording the number of views for your own LinkedIn profile, suppose you conducted a survey inside the company you’re working for. You’ve asked every employee with a LinkedIn profile how many visits their profile has had over the past seven days. You stored the results in a data frame called li_df. This data frame is available in the workspace; type li_df in the console to check it out."
  },
  {
    "objectID": "Intermedio_R_C1.html#instructions-100-xp-6",
    "href": "Intermedio_R_C1.html#instructions-100-xp-6",
    "title": "7  Conditionals and Control Flow",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nSelect the entire second column, named day2, from the li_df data frame as a vector and assign it to second.\nUse second to create a logical vector, that contains TRUE if the corresponding number of views is strictly greater than 25 or strictly lower than 5 and FALSE otherwise. Store this logical vector as extremes.\nUse sum() on the extremes vector to calculate the number of TRUEs in extremes (i.e. to calculate the number of employees that are either very popular or very low-profile). Simply print this number to the console.\n\n\n\nE7.R\n\n# li_df is pre-loaded in your workspace\nli_df\n# Select the second column, named day2, from li_df: second\nsecond <- li_df[,\"day2\"]\n\n# Build a logical vector, TRUE if value in second is extreme: extremes\nextremes<- c(second < 5 |second > 25)\n\n# Count the number of TRUEs in extremes\nsum(extremes)"
  },
  {
    "objectID": "Intermedio_R_C1.html#the-if-statement",
    "href": "Intermedio_R_C1.html#the-if-statement",
    "title": "7  Conditionals and Control Flow",
    "section": "7.9 The if statement",
    "text": "7.9 The if statement\nBefore diving into some exercises on the if statement, have another look at its syntax:\n\nif (condition) { expr }\n\nRemember your vectors with social profile views? Let’s look at it from another angle. The medium variable gives information about the social website; the num_views variable denotes the actual number of views that particular medium had on the last day of your recordings. Both variables have been pre-defined for you."
  },
  {
    "objectID": "Intermedio_R_C1.html#instructions-100-xp-7",
    "href": "Intermedio_R_C1.html#instructions-100-xp-7",
    "title": "7  Conditionals and Control Flow",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nExamine the if statement that prints out “Showing LinkedIn information” if the medium variable equals “LinkedIn”. Code an if statement that prints “You are popular!” to the console if the num_views variable exceeds 15.\n\n\nE8.R\n\n# Variables related to your last day of recordings\nmedium <- \"LinkedIn\"\nnum_views <- 14\n\n# Examine the if statement for medium\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n}\n\n# Write the if statement for num_views\nif(num_views > 15) {\nprint(\"You are popular!\")\n}"
  },
  {
    "objectID": "Intermedio_R_C1.html#add-an-else",
    "href": "Intermedio_R_C1.html#add-an-else",
    "title": "7  Conditionals and Control Flow",
    "section": "7.10 Add an else",
    "text": "7.10 Add an else\nYou can only use an else statement in combination with an if statement. The else statement does not require a condition; its corresponding code is simply run if all of the preceding conditions in the control structure are FALSE. Here’s a recipe for its usage:\n\nif (condition) { expr1 } else { expr2 }\n\nIt’s important that the else keyword comes on the same line as the closing bracket of the if part!\nBoth if statements that you coded in the previous exercises are already available to use. It’s now up to you to extend them with the appropriate else statements!"
  },
  {
    "objectID": "Intermedio_R_C1.html#instructions-100-xp-8",
    "href": "Intermedio_R_C1.html#instructions-100-xp-8",
    "title": "7  Conditionals and Control Flow",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nAdd an else statement to both control structures, such that\n“Unknown medium” gets printed out to the console when the if-condition on medium does not hold. R prints out “Try to be more visible!” when the if-condition on num_views is not met.\n\n\nE9.R\n\n  print(\"Showing LinkedIn information\")\n}else {\n  print(\"Unknown medium\")\n}\n\n\n# Control structure for num_views\nif (num_views > 15) {\n  print(\"You're popular!\")\n}else {\n  print(\"Try to be more visible!\")\n}"
  },
  {
    "objectID": "Intermedio_R_C1.html#customize-further-else-if",
    "href": "Intermedio_R_C1.html#customize-further-else-if",
    "title": "7  Conditionals and Control Flow",
    "section": "7.11 Customize further: else if",
    "text": "7.11 Customize further: else if\nThe else if statement allows you to further customize your control structure. You can add as many else if statements as you like. Keep in mind that R ignores the remainder of the control structure once a condition has been found that is TRUE and the corresponding expressions have been executed. Here’s an overview of the syntax to freshen your memory:\n\nif (condition1) { expr1 } else if (condition2) { expr2 } else if (condition3) { expr3 } else { expr4 }\n\nAgain, It’s important that the else if keywords comes on the same line as the closing bracket of the previous part of the control construct!"
  },
  {
    "objectID": "Intermedio_R_C1.html#instructions-100-xp-9",
    "href": "Intermedio_R_C1.html#instructions-100-xp-9",
    "title": "7  Conditionals and Control Flow",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nAdd code to both control structures such that:\nR prints out “Showing Facebook information” if medium is equal to “Facebook”. Remember that R is case sensitive! “Your number of views is average” is printed if num_views is between 15 (inclusive) and 10 (exclusive). Feel free to change the variables medium and num_views to see how the control structure respond. In both cases, the existing code should be extended in the else if statement. No existing code should be modified.\n\n\nE10.R\n\n# Variables related to your last day of recordings\nmedium <- \"LinkedIn\"\nnum_views <- 14\n\n# Control structure for medium\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n} else if (medium == \"Facebook\") {print(\"Showing Facebook information\")\n  # Add code to print correct string when condition is TRUE\n\n} else {\n  print(\"Unknown medium\")\n}\n\n# Control structure for num_views\nif (num_views > 15) {\n  print(\"You're popular!\")\n} else if (num_views <= 15 & num_views > 10) {print(\"Your number of views is\n            average\")\n  # Add code to print correct string when condition is TRUE\n\n} else {\n  print(\"Try to be more visible!\")\n}"
  },
  {
    "objectID": "Intermedio_R_C1.html#else-if-2.0",
    "href": "Intermedio_R_C1.html#else-if-2.0",
    "title": "7  Conditionals and Control Flow",
    "section": "7.12 Else if 2.0",
    "text": "7.12 Else if 2.0\nYou can do anything you want inside if-else constructs. You can even put in another set of conditional statements. Examine the following code chunk:\n\nif (number < 10) { if (number < 5) { result <- “extra small” } else { result <- “small” } } else if (number < 100) { result <- “medium” } else { result <- “large” }\n\nprint(result) Have a look at the following statements:\n\nIf number is set to 6, “small” gets printed to the console.\nIf number is set to 100, R prints out “medium”.\nIf number is set to 4, “extra small” gets printed out to the console.\nIf number is set to 2500, R will generate an error, as result will not be defined.\n\nSelect the option that lists all the true statements."
  },
  {
    "objectID": "Intermedio_R_C1.html#instructions-50-xp",
    "href": "Intermedio_R_C1.html#instructions-50-xp",
    "title": "7  Conditionals and Control Flow",
    "section": "Instructions 50 XP",
    "text": "Instructions 50 XP\nPossible Answers\n\n2 and 4\n1 and 4\n1 and 3 <- respuesta\n2 and 3"
  },
  {
    "objectID": "Intermedio_R_C1.html#take-control",
    "href": "Intermedio_R_C1.html#take-control",
    "title": "7  Conditionals and Control Flow",
    "section": "7.13 Take control!",
    "text": "7.13 Take control!\nIn this exercise, you will combine everything that you’ve learned so far: relational operators, logical operators and control constructs. You’ll need it all!\nWe’ve pre-defined two values for you: li and fb, denoting the number of profile views your LinkedIn and Facebook profile had on the last day of recordings. Go through the instructions to create R code that generates a ‘social media score’, sms, based on the values of li and fb."
  },
  {
    "objectID": "Intermedio_R_C1.html#instructions-100-xp-10",
    "href": "Intermedio_R_C1.html#instructions-100-xp-10",
    "title": "7  Conditionals and Control Flow",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nFinish the control-flow construct with the following behavior:\nIf both li and fb are 15 or higher, set sms equal to double the sum of li and fb. If both li and fb are strictly below 10, set sms equal to half the sum of li and fb. In all other cases, set sms equal to li + fb. Finally, print the resulting sms variable.\n\n\nE11.R\n\n # Variables related to your last day of recordings\nli <- 15\nfb <- 9\n\n# Code the control-flow construct\nif (li>15 & fb>15) {\n  sms <- 2 * (li + fb)\n} else if (li<10 & fb<10){\n  sms <- 0.5 * (li + fb)\n} else {\n  sms <- li + fb\n}\n\n# Print the resulting sms to the console\nprint(sms)"
  },
  {
    "objectID": "Intermedio_R_C2.html#write-a-while-loop",
    "href": "Intermedio_R_C2.html#write-a-while-loop",
    "title": "8  Loops",
    "section": "8.1 Write a while loop",
    "text": "8.1 Write a while loop\nLet’s get you started with building a while loop from the ground up. Have another look at its recipe:\nwhile (condition) { expr } Remember that the condition part of this recipe should become FALSE at some point during the execution. Otherwise, the while loop will go on indefinitely.\nIf your session expires when you run your code, check the body of your while loop carefully.\nHave a look at the sample code provided; it initializes the speed variables and already provides a while loop template to get you started."
  },
  {
    "objectID": "Intermedio_R_C2.html#instructions-100-xp",
    "href": "Intermedio_R_C2.html#instructions-100-xp",
    "title": "8  Loops",
    "section": "8.2 Instructions 100 XP",
    "text": "8.2 Instructions 100 XP\nCode a while loop with the following characteristics:\nThe condition of the while loop should check if speed is higher than 30. Inside the body of the while loop, print out “Slow down!”. Inside the body of the while loop, decrease the speed by 7 units and assign this new value to speed again. This step is crucial; otherwise your while loop will never stop and your session will expire. If your session expires when you run your code, check the body of your while loop carefully: it’s likely that you made a mistake.\n\n\nE1.R\n\n# Initialize the speed variable\nspeed <- 64\n\n# Code the while loop\n\nwhile (speed > 30) {\n  print(paste(\"Slow down!\"))\n  speed <- speed -7\n}\n\n# Print out the speed variable\nprint(speed)"
  },
  {
    "objectID": "Intermedio_R_C2.html#throw-in-more-conditionals",
    "href": "Intermedio_R_C2.html#throw-in-more-conditionals",
    "title": "8  Loops",
    "section": "8.3 Throw in more conditionals",
    "text": "8.3 Throw in more conditionals\nIn the previous exercise, you simulated the interaction between a driver and a driver’s assistant: When the speed was too high, “Slow down!” got printed out to the console, resulting in a decrease of your speed by 7 units.\nThere are several ways in which you could make your driver’s assistant more advanced. For example, the assistant could give you different messages based on your speed or provide you with a current speed at a given moment.\nA while loop similar to the one you’ve coded in the previous exercise is already available for you to use. It prints out your current speed, but there’s no code that decreases the speed variable yet, which is pretty dangerous. Can you make the appropriate changes?"
  },
  {
    "objectID": "Intermedio_R_C2.html#instructions-100-xp-1",
    "href": "Intermedio_R_C2.html#instructions-100-xp-1",
    "title": "8  Loops",
    "section": "8.4 Instructions 100 XP",
    "text": "8.4 Instructions 100 XP\nIf the speed is greater than 48, have R print out “Slow down big time!”, and decrease the speed by 11. Otherwise, have R simply print out “Slow down!”, and decrease the speed by 6. If the session keeps timing out and throwing an error, you are probably stuck in an infinite loop! Check the body of your while loop and make sure you are assigning new values to speed.\n\n\nE2.R\n\n# Initialize the speed variable\nspeed <- 64\n\n# Extend/adapt the while loop\nwhile (speed > 30) {\n  print(paste(\"Your speed is\",speed))\n  if (speed > 48) {\n    print(\"Slow down big time!\")\n    speed <- speed -11\n  } else {\n    print(\"Slow down!\")\n    speed <- speed -6\n  }\n}"
  },
  {
    "objectID": "Intermedio_R_C2.html#stop-the-while-loop-break",
    "href": "Intermedio_R_C2.html#stop-the-while-loop-break",
    "title": "8  Loops",
    "section": "8.5 Stop the while loop: break",
    "text": "8.5 Stop the while loop: break\nThere are some very rare situations in which severe speeding is necessary: what if a hurricane is approaching and you have to get away as quickly as possible? You don’t want the driver’s assistant sending you speeding notifications in that scenario, right?\nThis seems like a great opportunity to include the break statement in the while loop you’ve been working on. Remember that the break statement is a control statement. When R encounters it, the while loop is abandoned completely."
  },
  {
    "objectID": "Intermedio_R_C2.html#instructions-100-xp-2",
    "href": "Intermedio_R_C2.html#instructions-100-xp-2",
    "title": "8  Loops",
    "section": "8.6 Instructions 100 XP",
    "text": "8.6 Instructions 100 XP\nAdapt the while loop such that it is abandoned when the speed of the vehicle is greater than 80. This time, the speed variable has been initialized to 88; keep it that way.\n\n\nE3.R\n\n# Initialize the speed variable\nspeed <- 88\n\nwhile (speed > 30) {\n  print(paste(\"Your speed is\", speed))\n  \n  # Break the while loop when speed exceeds 80\n  if  (speed > 80){  \n    break\n  }\n  \n  if (speed > 48) {\n    print(\"Slow down big time!\")\n    speed <- speed - 11\n  } else {\n    print(\"Slow down!\")\n    speed <- speed - 6\n  }\n}"
  },
  {
    "objectID": "Intermedio_R_C2.html#build-a-while-loop-from-scratch",
    "href": "Intermedio_R_C2.html#build-a-while-loop-from-scratch",
    "title": "8  Loops",
    "section": "8.7 Build a while loop from scratch",
    "text": "8.7 Build a while loop from scratch\nThe previous exercises guided you through developing a pretty advanced while loop, containing a break statement and different messages and updates as determined by control flow constructs. If you manage to solve this comprehensive exercise using a while loop, you’re totally ready for the next topic: the for loop."
  },
  {
    "objectID": "Intermedio_R_C2.html#instructions-100-xp-3",
    "href": "Intermedio_R_C2.html#instructions-100-xp-3",
    "title": "8  Loops",
    "section": "8.8 Instructions 100 XP",
    "text": "8.8 Instructions 100 XP\nFinish the while loop so that it:\nprints out the triple of i, so 3 * i, at each run. is abandoned with a break if the triple of i is divisible by 8, but still prints out this triple before breaking.\n\n\nE4.R\n\n# Initialize i as 1 \ni <- 1\n\n# Code the while loop\nwhile (i <= 10) {\n  print(3 * i)\n  if ((i * 3) %% 8 == 0) {\n    break\n  }\n  i <- i + 1\n}\n\n# Initialize i as 1 \ni <- 1"
  },
  {
    "objectID": "Intermedio_R_C3.html",
    "href": "Intermedio_R_C3.html",
    "title": "9  Functions",
    "section": "",
    "text": "10 Function documentation\nBefore even thinking of using an R function, you should clarify which arguments it expects. All the relevant details such as a description, usage, and arguments can be found in the documentation. To consult the documentation on the sample() function, for example, you can use one of following R commands:\nIf you execute these commands, you’ll be redirected to www.rdocumentation.org.\nA quick hack to see the arguments of the sample() function is the args() function. Try it out in the console:\nIn the next exercises, you’ll be learning how to use the mean() function with increasing complexity. The first thing you’ll have to do is get acquainted with the mean() function."
  },
  {
    "objectID": "Intermedio_R_C3.html#instructions-100-xp",
    "href": "Intermedio_R_C3.html#instructions-100-xp",
    "title": "9  Functions",
    "section": "10.1 Instructions 100 XP",
    "text": "10.1 Instructions 100 XP\n\nConsult the documentation on the mean() function: ?mean or help(mean).\nInspect the arguments of the mean() function using the args() function.\n\n\n\nE1.R\n\n# Consult the documentation on the mean() function\n?mean\n\n# Inspect the arguments of the mean() function\nargs(mean)"
  },
  {
    "objectID": "Intermedio_R_C3.html#use-a-function",
    "href": "Intermedio_R_C3.html#use-a-function",
    "title": "9  Functions",
    "section": "10.2 Use a function",
    "text": "10.2 Use a function\nThe documentation on the mean() function gives us quite some information:\n\nThe mean() function computes the arithmetic mean.\nThe most general method takes multiple arguments: x and ….\nThe x argument should be a vector containing numeric, logical or time-related information.\n\nRemember that R can match arguments both by position and by name. Can you still remember the difference? You’ll find out in this exercise!\nOnce more, you’ll be working with the view counts of your social network profiles for the past 7 days. These are stored in the linkedin and facebook vectors and have already been created for you."
  },
  {
    "objectID": "Intermedio_R_C3.html#instructions-100-xp-1",
    "href": "Intermedio_R_C3.html#instructions-100-xp-1",
    "title": "9  Functions",
    "section": "10.3 Instructions 100 XP",
    "text": "10.3 Instructions 100 XP\n\nCalculate the average number of views for both linkedin and facebook and assign the result to avg_li and avg_fb, respectively. Experiment with different types of argument matching!\nPrint out both avg_li and avg_fb.\n\n\n\nE2.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# Calculate average number of views\navg_li <- mean(linkedin)\navg_fb <- mean(facebook)\n\n# Inspect avg_li and avg_fb\nprint(avg_li)\nprint(avg_fb)"
  },
  {
    "objectID": "Intermedio_R_C3.html#use-a-function-2",
    "href": "Intermedio_R_C3.html#use-a-function-2",
    "title": "9  Functions",
    "section": "10.4 Use a function (2)",
    "text": "10.4 Use a function (2)\nCheck the documentation on the mean() function again:\n\n?mean\n\nThe Usage section of the documentation includes two versions of the mean() function. The first usage,\n\nmean(x, …)\n\nis the most general usage of the mean function. The ‘Default S3 method’, however, is:\n\nmean(x, trim = 0, na.rm = FALSE, …)\n\nThe … is called the ellipsis. It is a way for R to pass arguments along without the function having to name them explicitly. The ellipsis will be treated in more detail in future courses.\nFor the remainder of this exercise, just work with the second usage of the mean function. Notice that both trim and na.rm have default values. This makes them optional arguments."
  },
  {
    "objectID": "Intermedio_R_C3.html#instructions-100-xp-2",
    "href": "Intermedio_R_C3.html#instructions-100-xp-2",
    "title": "9  Functions",
    "section": "10.5 Instructions 100 XP",
    "text": "10.5 Instructions 100 XP\n\nCalculate the mean of the element-wise sum of linkedin and facebook and store the result in a variable avg_sum.\nCalculate the mean once more, but this time set the trim argument equal to 0.2 and assign the result to avg_sum_trimmed.\nPrint out both avg_sum and avg_sum_trimmed; can you spot the difference?\n\n\n\nE3.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n\n# Calculate the mean of the sum\nmean(linkedin + facebook)\n\n# Calculate the trimmed mean of the sum\navg_sum_trimmed <- mean(linkedin + facebook, trim = 0.2,na.rm = FALSE,)\n\n\n# Inspect both new variables\nprint(avg_sum)\nprint(avg_sum_trimmed)"
  },
  {
    "objectID": "Intermedio_R_C3.html#use-a-function-3",
    "href": "Intermedio_R_C3.html#use-a-function-3",
    "title": "9  Functions",
    "section": "10.6 Use a function (3)",
    "text": "10.6 Use a function (3)\nIn the video, Filip guided you through the example of specifying arguments of the sd() function. The sd() function has an optional argument, na.rm that specified whether or not to remove missing values from the input vector before calculating the standard deviation.\nIf you’ve had a good look at the documentation, you’ll know by now that the mean() function also has this argument, na.rm, and it does the exact same thing. By default, it is set to FALSE, as the Usage of the default S3 method shows:\nmean(x, trim = 0, na.rm = FALSE, …) Let’s see what happens if your vectors linkedin and facebook contain missing values (NA)."
  },
  {
    "objectID": "Intermedio_R_C3.html#instructions-100-xp-3",
    "href": "Intermedio_R_C3.html#instructions-100-xp-3",
    "title": "9  Functions",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nCalculate the average number of LinkedIn profile views, without specifying any optional arguments. Simply print the result to the console. Calculate the average number of LinkedIn profile views, but this time tell R to strip missing values from the input vector.\n\n\nE4.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, NA, 17, 14)\nfacebook <- c(17, NA, 5, 16, 8, 13, 14)\n\n# Basic average of linkedin\nmean(linkedin)\n\n# Advanced average of linkedin\nmean(linkedin, na.rm = TRUE)"
  },
  {
    "objectID": "Intermedio_R_C3.html#functions-inside-functions",
    "href": "Intermedio_R_C3.html#functions-inside-functions",
    "title": "9  Functions",
    "section": "10.7 Functions inside functions",
    "text": "10.7 Functions inside functions\nYou already know that R functions return objects that you can then use somewhere else. This makes it easy to use functions inside functions, as you’ve seen before:\n\nspeed <- 31 print(paste(“Your speed is”, speed))\n\nNotice that both the print() and paste() functions use the ellipsis - … - as an argument. Can you figure out how they’re used?"
  },
  {
    "objectID": "Intermedio_R_C3.html#instructions-100-xp-4",
    "href": "Intermedio_R_C3.html#instructions-100-xp-4",
    "title": "9  Functions",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nUse abs() on linkedin - facebook to get the absolute differences between the daily LinkedIn and Facebook profile views. Place the call to abs() inside mean() to calculate the Mean Absolute Deviation. In the mean() call, make sure to specify na.rm to treat missing values correctly!\n\n\nE5.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, NA, 17, 14)\nfacebook <- c(17, NA, 5, 16, 8, 13, 14)\n\n# Calculate the mean absolute deviation\nmean(abs(linkedin - facebook), na.rm= TRUE)"
  },
  {
    "objectID": "Intermedio_R_C3.html#required-or-optional",
    "href": "Intermedio_R_C3.html#required-or-optional",
    "title": "9  Functions",
    "section": "10.8 Required, or optional?",
    "text": "10.8 Required, or optional?\nBy now, you will probably have a good understanding of the difference between required and optional arguments. Let’s refresh this difference by having one last look at the mean() function:\nmean(x, trim = 0, na.rm = FALSE, …) x is required; if you do not specify it, R will throw an error. trim and na.rm are optional arguments: they have a default value which is used if the arguments are not explicitly specified.\nWhich of the following statements about the read.table() function are true?\nheader, sep and quote are all optional arguments. row.names and fileEncoding don’t have default values. read.table(“myfile.txt”, “-”, TRUE) will throw an error. read.table(“myfile.txt”, sep = “-”, header = TRUE) will throw an error."
  },
  {
    "objectID": "Intermedio_R_C3.html#instructions-50-xp",
    "href": "Intermedio_R_C3.html#instructions-50-xp",
    "title": "9  Functions",
    "section": "Instructions 50 XP",
    "text": "Instructions 50 XP\nPossible Answers\n\nand (3) Respuesta\nand (4)\n\n(1), (2), and (3)\n(1), (2), and (4)"
  },
  {
    "objectID": "Intermedio_R_C3.html#write-your-own-function",
    "href": "Intermedio_R_C3.html#write-your-own-function",
    "title": "9  Functions",
    "section": "10.9 Write your own function",
    "text": "10.9 Write your own function\nWow, things are getting serious… you’re about to write your own function! Before you have a go at it, have a look at the following function template:\n\nmy_fun <- function(arg1, arg2) { body }\n\nNotice that this recipe uses the assignment operator (<-) just as if you were assigning a vector to a variable for example. This is not a coincidence. Creating a function in R basically is the assignment of a function object to a variable! In the recipe above, you’re creating a new R variable my_fun, that becomes available in the workspace as soon as you execute the definition. From then on, you can use the my_fun as a function."
  },
  {
    "objectID": "Intermedio_R_C3.html#instructions-100-xp-5",
    "href": "Intermedio_R_C3.html#instructions-100-xp-5",
    "title": "9  Functions",
    "section": "10.10 Instructions 100 XP",
    "text": "10.10 Instructions 100 XP\n\nCreate a function pow_two(): it takes one argument and returns that number squared (that number times itself).\nCall this newly defined function with 12 as input.\nNext, create a function sum_abs(), that takes two arguments and returns the sum of the absolute values of both arguments.\nFinally, call the function sum_abs() with arguments -2 and 3 afterwards.\n\n\n\nE6.R\n\n# Create a function pow_two()\npow_two <- function(arg1) {\n  arg1*arg1\n}\n\n# Use the function\npow_two(12)\n\n# Create a function sum_abs()\nsum_abs <- function(arg1, arg2) {\n  sum(abs(arg1), abs(arg2))\n}\n# Use the function\nsum_abs(-2, 3)"
  },
  {
    "objectID": "Intermedio_R_C3.html#write-your-own-function-2",
    "href": "Intermedio_R_C3.html#write-your-own-function-2",
    "title": "9  Functions",
    "section": "10.11 Write your own function (2)",
    "text": "10.11 Write your own function (2)\nThere are situations in which your function does not require an input. Let’s say you want to write a function that gives us the random outcome of throwing a fair die:\n\nthrow_die <- function() { number <- sample(1:6, size = 1) number }\n\n\nthrow_die()\n\nUp to you to code a function that doesn’t take any arguments!"
  },
  {
    "objectID": "Intermedio_R_C3.html#instructions-100-xp-6",
    "href": "Intermedio_R_C3.html#instructions-100-xp-6",
    "title": "9  Functions",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nDefine a function, hello(). It prints out “Hi there!” and returns TRUE. It has no arguments. Call the function hello(), without specifying arguments of course.\n\n\nE7.R\n\n# Define the function hello()\nhello <- function() {\n  print(\"Hi there!\")\n  return(TRUE) \n}\n\n# Call the function hello()\nhello()"
  },
  {
    "objectID": "Intermedio_R_C3.html#write-your-own-function-3",
    "href": "Intermedio_R_C3.html#write-your-own-function-3",
    "title": "9  Functions",
    "section": "10.12 Write your own function (3)",
    "text": "10.12 Write your own function (3)\nDo you still remember the difference between an argument with and without default values? The usage section in the sd() documentation shows the following information:\n\nsd(x, na.rm = FALSE)\n\nThis tells us that x has to be defined for the sd() function to be called correctly, however, na.rm already has a default value. Not specifying this argument won’t cause an error.\nYou can define default argument values in your own R functions as well. You can use the following recipe to do so:\n\nmy_fun <- function(arg1, arg2 = val2) { body }\n\nThe editor on the right already includes an extended version of the pow_two() function from before. Can you finish it?"
  },
  {
    "objectID": "Intermedio_R_C3.html#instructions-100-xp-7",
    "href": "Intermedio_R_C3.html#instructions-100-xp-7",
    "title": "9  Functions",
    "section": "10.13 Instructions 100 XP",
    "text": "10.13 Instructions 100 XP\n\nAdd an optional argument, named print_info, that is TRUE by default.\nWrap an if construct around the print() function: this function should only be executed if print_info is TRUE.\nFeel free to experiment with the pow_two() function you’ve just coded.\n\n\n\nE8.R\n\n# Finish the pow_two() function\npow_two <- function(x, print_info = TRUE) {\n  y <- x ^ 2\n  if (print_info) {\n    print(paste(x, \"to the power two equals\", y))\n  }\n  return(y)\n}\n\npow_two(5, FALSE)"
  },
  {
    "objectID": "Intermedio_R_C3.html#function-scoping",
    "href": "Intermedio_R_C3.html#function-scoping",
    "title": "9  Functions",
    "section": "10.14 Function scoping",
    "text": "10.14 Function scoping\nAn issue that Filip did not discuss in the video is function scoping. It implies that variables that are defined inside a function are not accessible outside that function. Try running the following code and see if you understand the results:\n\npow_two <- function(x) { y <- x ^ 2 return(y) } pow_two(4) y x\n\ny was defined inside the pow_two() function and therefore it is not accessible outside of that function. This is also true for the function’s arguments of ourse - x in this case.\nWhich statement is correct about the following chunk of code? The function two_dice() is already available in the workspace.\n\ntwo_dice <- function() { possibilities <- 1:6 dice1 <- sample(possibilities, size = 1) dice2 <- sample(possibilities, size = 1) dice1 + dice2 }"
  },
  {
    "objectID": "Intermedio_R_C3.html#instructions-50-xp-1",
    "href": "Intermedio_R_C3.html#instructions-50-xp-1",
    "title": "9  Functions",
    "section": "Instructions 50 XP",
    "text": "Instructions 50 XP\nPossible Answers\n\nExecuting two_dice() causes an error.\nExecuting res <- two_dice() makes the contents of dice1 and dice2 available outside the function.\nWhatever the way of calling the two_dice() function, R won’t have access to dice1 and dice2 outside the function. Respuesta"
  },
  {
    "objectID": "Intermedio_R_C3.html#r-passes-arguments-by-value",
    "href": "Intermedio_R_C3.html#r-passes-arguments-by-value",
    "title": "9  Functions",
    "section": "10.15 R passes arguments by value",
    "text": "10.15 R passes arguments by value\nThe title gives it away already: R passes arguments by value. What does this mean? Simply put, it means that an R function cannot change the variable that you input to that function. Let’s look at a simple example (try it in the console):\n\ntriple <- function(x) { x <- 3*x x } a <- 5 triple(a) a\n\nInside the triple() function, the argument x gets overwritten with its value times three. Afterwards this new x is returned. If you call this function with a variable a set equal to 5, you obtain 15. But did the value of a change? If R were to pass a to triple() by reference, the override of the x inside the function would ripple through to the variable a, outside the function. However, R passes by value, so the R objects you pass to a function can never change unless you do an explicit assignment. a remains equal to 5, even after calling triple(a).\nCan you tell which one of the following statements is false about the following piece of code?\n\nincrement <- function(x, inc = 1) { x <- x + inc x } count <- 5 a <- increment(count, 2) b <- increment(count) count <- increment(count, 2)"
  },
  {
    "objectID": "Intermedio_R_C3.html#instructions-50-xp-2",
    "href": "Intermedio_R_C3.html#instructions-50-xp-2",
    "title": "9  Functions",
    "section": "Instructions 50 XP",
    "text": "Instructions 50 XP\nPossible Answers\n\na and b equal 7 and 6 respectively after executing this code block.\nAfter the first call of increment(), where a is defined, a equals 7 and count equals 5.\nIn the end, count will equal 10. Respuesta\nIn the last expression, the value of count was actually changed because of the explicit assignment."
  },
  {
    "objectID": "Intermedio_R_C3.html#r-you-functional",
    "href": "Intermedio_R_C3.html#r-you-functional",
    "title": "9  Functions",
    "section": "10.16 R you functional?",
    "text": "10.16 R you functional?\nNow that you’ve acquired some skills in defining functions with different types of arguments and return values, you should try to create more advanced functions. As you’ve noticed in the previous exercises, it’s perfectly possible to add control-flow constructs, loops and even other functions to your function body.\nRemember our social media example? The vectors linkedin and facebook are already defined in the workspace so you can get your hands dirty straight away. As a first step, you will be writing a function that can interpret a single value of this vector. In the next exercise, you will write another function that can handle an entire vector at once."
  },
  {
    "objectID": "Intermedio_R_C3.html#instructions-100-xp-8",
    "href": "Intermedio_R_C3.html#instructions-100-xp-8",
    "title": "9  Functions",
    "section": "10.17 Instructions 100 XP",
    "text": "10.17 Instructions 100 XP\n\nFinish the function definition for interpret(), that interprets the number of profile views on a single day:\nThe function takes one argument, num_views.\nIf num_views is greater than 15, the function prints out “You’re popular!” to the console and returns num_views.\nElse, the function prints out “Try to be more visible!” and returns 0.\nFinally, call the interpret() function twice: on the first value of the linkedin vector and on the second element of the facebook vector.\n\n\n\nE9.R\n\n# The linkedin and facebook vectors have already been created for you\n\n# Define the interpret function\ninterpret <- function(num_views) {\n  if (num_views > 15) {\n    print(\"You're popular!\")\n     return(num_views)\n  } \n  else {\n    print(\"Try to be more visible!\")\n    return(0)\n  }\n}\n\n\n# Call the interpret function twice\ninterpret(linkedin)\ninterpret(facebook[2])"
  },
  {
    "objectID": "Intermedio_R_C3.html#r-you-functional-2",
    "href": "Intermedio_R_C3.html#r-you-functional-2",
    "title": "9  Functions",
    "section": "10.18 R you functional? (2)",
    "text": "10.18 R you functional? (2)\nA possible implementation of the interpret() function has been provided for you. In this exercise you’ll be writing another function that will use the interpret() function to interpret all the data from your daily profile views inside a vector. Furthermore, your function will return the sum of views on popular days, if asked for. A for loop is ideal for iterating over all the vector elements. The ability to return the sum of views on popular days is something you can code through a function argument with a default value."
  },
  {
    "objectID": "Intermedio_R_C3.html#instructions-100-xp-9",
    "href": "Intermedio_R_C3.html#instructions-100-xp-9",
    "title": "9  Functions",
    "section": "10.19 Instructions 100 XP",
    "text": "10.19 Instructions 100 XP\nFinish the template for the interpret_all() function:\n\nMake return_sum an optional argument, that is TRUE by default.\nInside the for loop, iterate over all views: on every iteration, add the result of interpret(v) to count. Remember that interpret(v) returns v for popular days,and 0 otherwise. At the same time, interpret(v) will also do some printouts.\nFinish the if construct:\nIf return_sum is TRUE, return count.\nElse, return NULL.\nCall this newly defined function on both linkedin and facebook.\n\n\n\nE10.R\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n\n# The interpret() can be used inside interpret_all()\ninterpret <- function(num_views) {\n  if (num_views > 15) {\n    print(\"You're popular!\")\n    return(num_views)\n  } else {\n    print(\"Try to be more visible!\")\n    return(0)\n  }\n}\n\n# Define the interpret_all() function\n# views: vector with data to interpret\n# return_sum: return total number of views on popular days?\ninterpret_all <- function(views, return_sum = TRUE) {\n  count <- 0\n\n  for (v in views) {\n    count <- count + interpret(v)\n    \n  }\n\n  if (return_sum == TRUE) {\n    return(count)\n\n  } else {\n    return(NULL)\n\n  }\n}\n\n# Call the interpret_all() function on both linkedin and facebook\ninterpret_all(linkedin)\ninterpret_all(facebook)"
  },
  {
    "objectID": "Intermedio_R_C3.html#load-an-r-package",
    "href": "Intermedio_R_C3.html#load-an-r-package",
    "title": "9  Functions",
    "section": "10.20 Load an R Package",
    "text": "10.20 Load an R Package\nThere are basically two extremely important functions when it comes down to R packages:\n\ninstall.packages(), which as you can expect, installs a given package.\nlibrary() which loads packages, i.e. attaches them to the search list on your R workspace.\n\nTo install packages, you need administrator privileges. This means that install.packages() will thus not work in the DataCamp interface. However, almost all CRAN packages are installed on our servers. You can load them with library().\nIn this exercise, you’ll be learning how to load the ggplot2 package, a powerful package for data visualization. You’ll use it to create a plot of two variables of the mtcars data frame. The data has already been prepared for you in the workspace.\nBefore starting, execute the following commands in the console:\n\nsearch(), to look at the currently attached packages and\nqplot(mtcars\\(wt, mtcars\\)hp), to build a plot of two variables of the mtcars data frame.\n\nAn error should occur, because you haven’t loaded the ggplot2 package yet!"
  },
  {
    "objectID": "Intermedio_R_C3.html#instructions-100-xp-10",
    "href": "Intermedio_R_C3.html#instructions-100-xp-10",
    "title": "9  Functions",
    "section": "10.21 Instructions 100 XP",
    "text": "10.21 Instructions 100 XP\n\nTo fix the error you saw in the console, load the ggplot2 package. Make sure you are loading (and not installing) the package!\nNow, retry calling the qplot() function with the same arguments.\nFinally, check out the currently attached packages again.\n\n\n\nE11.R\n\n# Load the ggplot2 package\nlibrary(ggplot2)\n\n# Retry the qplot() function\nqplot(mtcars$wt, mtcars$hp)\n\n# Check out the currently attached packages again\nsearch()"
  },
  {
    "objectID": "Intermedio_R_C3.html#different-ways-to-load-a-package",
    "href": "Intermedio_R_C3.html#different-ways-to-load-a-package",
    "title": "9  Functions",
    "section": "10.22 Different ways to load a package",
    "text": "10.22 Different ways to load a package\nThe library() and require() functions are not very picky when it comes down to argument types: both library(rjson) and library(“rjson”) work perfectly fine for loading a package.\nHave a look at some more code chunks that (attempt to) load one or more packages:\n\n11 Chunk 1\nlibrary(data.table) require(rjson)\n\n\n12 Chunk 2\nlibrary(“data.table”) require(rjson)\n\n\n13 Chunk 3\nlibrary(data.table) require(rjson, character.only = TRUE)\n\n\n14 Chunk 4\nlibrary(c(“data.table”, “rjson”)) Select the option that lists all of the chunks that do not generate an error. The console is yours to > experiment in.\n\nInstructions 50 XP {.unnumbered}\nPossible Answers\n\nOnly (1)\n\nand (2) Respuesta\n\n(1), (2) and (3)\nAll of them are valid"
  },
  {
    "objectID": "Intermedio_R_C4.html#use-lapply-with-a-built-in-r-function",
    "href": "Intermedio_R_C4.html#use-lapply-with-a-built-in-r-function",
    "title": "10  The apply family",
    "section": "10.1 Use lapply with a built-in R function",
    "text": "10.1 Use lapply with a built-in R function\nBefore you go about solving the exercises below, have a look at the documentation of the lapply() function. The Usage section shows the following expression:\n\nlapply(X, FUN, …)\n\nTo put it generally, lapply takes a vector or list X, and applies the function FUN to each of its members. If FUN requires additional arguments, you pass them after you’ve specified X and FUN (…). The output of lapply() is a list, the same length as X, where each element is the result of applying FUN on the corresponding element of X.\nNow that you are truly brushing up on your data science skills, let’s revisit some of the most relevant figures in data science history. We’ve compiled a vector of famous mathematicians/statisticians and the year they were born. Up to you to extract some information!"
  },
  {
    "objectID": "Intermedio_R_C4.html#instructions-100-xp",
    "href": "Intermedio_R_C4.html#instructions-100-xp",
    "title": "10  The apply family",
    "section": "10.2 Instructions 100 XP",
    "text": "10.2 Instructions 100 XP\n\nHave a look at the strsplit() calls, that splits the strings in pioneers on the : sign. The result, split_math is a list of 4 character vectors: the first vector element represents the name, the second element the birth year.\nUse lapply() to convert the character vectors in split_math to lowercase letters: apply tolower() on each of the elements in split_math. Assign the result, which is a list, to a new variable split_low.\nFinally, inspect the contents of split_low with str().\n\n\n\nE1.R\n\n# The vector pioneers has already been created for you\npioneers <- c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\n\n# Split names from birth year\nsplit_math <- strsplit(pioneers, split = \":\")\n\n# Convert to lowercase strings: split_low\nsplit_low <- lapply(split_math, tolower)\n\n# Take a look at the structure of split_low\nstr(split_low)"
  },
  {
    "objectID": "Intermedio_R_C4.html#use-lapply-with-your-own-function",
    "href": "Intermedio_R_C4.html#use-lapply-with-your-own-function",
    "title": "10  The apply family",
    "section": "10.3 Use lapply with your own function",
    "text": "10.3 Use lapply with your own function\nAs Filip explained in the instructional video, you can use lapply() on your own functions as well. You just need to code a new function and make sure it is available in the workspace. After that, you can use the function inside lapply() just as you did with base R functions.\nIn the previous exercise you already used lapply() once to convert the information about your favorite pioneering statisticians to a list of vectors composed of two character strings. Let’s write some code to select the names and the birth years separately.\nThe sample code already includes code that defined select_first(), that takes a vector as input and returns the first element of this vector."
  },
  {
    "objectID": "Intermedio_R_C4.html#instructions-100-xp-1",
    "href": "Intermedio_R_C4.html#instructions-100-xp-1",
    "title": "10  The apply family",
    "section": "10.4 Instructions 100 XP",
    "text": "10.4 Instructions 100 XP\n\nApply select_first() over the elements of split_low with lapply() and assign the result to a new variable names.\nNext, write a function select_second() that does the exact same thing for the second element of an inputted vector.\nFinally, apply the select_second() function over split_low and assign the output to the variable years.\n\n\n\nE2.R\n\n# Code from previous exercise:\npioneers <- c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\nsplit <- strsplit(pioneers, split = \":\")\nsplit_low <- lapply(split, tolower)\n\n# Write function select_first()\nselect_first <- function(x) {\n  x[1]\n}\n\n# Apply select_first() over split_low: names\nnames <- lapply(split_low, select_first)\n\n# Write function select_second()\nselect_second <- function(x) {\n  x[2]\n}\n\n# Apply select_second() over split_low: years\nyears <- lapply(split_low, select_second)"
  },
  {
    "objectID": "Intermedio_R_C4.html#lapply-and-anonymous-functions",
    "href": "Intermedio_R_C4.html#lapply-and-anonymous-functions",
    "title": "10  The apply family",
    "section": "10.5 lapply and anonymous functions",
    "text": "10.5 lapply and anonymous functions\nWriting your own functions and then using them inside lapply() is quite an accomplishment! But defining functions to use them only once is kind of overkill, isn’t it? That’s why you can use so-called anonymous functions in R.\nPreviously, you learned that functions in R are objects in their own right. This means that they aren’t automatically bound to a name. When you create a function, you can use the assignment operator to give the function a name. It’s perfectly possible, however, to not give the function a name. This is called an anonymous function:\n\nNamed function\ntriple <- function(x) { 3 * x }\n\n\nAnonymous function with same implementation\nfunction(x) { 3 * x }\n\n\nUse anonymous function inside lapply()\nlapply(list(1,2,3), function(x) { 3 * x }) split_low is defined for you."
  },
  {
    "objectID": "Intermedio_R_C4.html#instructions-100-xp-2",
    "href": "Intermedio_R_C4.html#instructions-100-xp-2",
    "title": "10  The apply family",
    "section": "10.6 Instructions 100 XP",
    "text": "10.6 Instructions 100 XP\nTransform the first call of lapply() such that it uses an anonymous function that does the same thing. In a similar fashion, convert the second call of lapply to use an anonymous version of the select_second() function. Remove both the definitions of select_first() and select_second(), as they are no longer useful.\n\n\nE3.R\n\n# split_low has been created for you\nsplit_low <- lapply(split, tolower)\nsplit_low\n\n# Transform: use anonymous function inside lapply\n\nnames <- lapply(split_low, function(x) { x[1] })\n\n# Transform: use anonymous function inside lapply\n\nyears <- lapply(split_low, function(x) { x[2] })"
  },
  {
    "objectID": "Intermedio_R_C4.html#use-lapply-with-additional-arguments",
    "href": "Intermedio_R_C4.html#use-lapply-with-additional-arguments",
    "title": "10  The apply family",
    "section": "10.7 Use lapply with additional arguments",
    "text": "10.7 Use lapply with additional arguments\nIn the video, the triple() function was transformed to the multiply() function to allow for a more generic approach. lapply() provides a way to handle functions that require more than one argument, such as the multiply() function:\nmultiply <- function(x, factor) { x * factor } lapply(list(1,2,3), multiply, factor = 3) On the right we’ve included a generic version of the select functions that you’ve coded earlier: select_el(). It takes a vector as its first argument, and an index as its second argument. It returns the vector’s element at the specified index."
  },
  {
    "objectID": "Intermedio_R_C4.html#instructions-100-xp-3",
    "href": "Intermedio_R_C4.html#instructions-100-xp-3",
    "title": "10  The apply family",
    "section": "10.8 Instructions 100 XP",
    "text": "10.8 Instructions 100 XP\nUse lapply() twice to call select_el() over all elements in split_low: once with the index equal to 1 and a second time with the index equal to 2. Assign the result to names and years, respectively.\n\n\nE4.R\n\n# Definition of split_low\npioneers <- c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\nsplit <- strsplit(pioneers, split = \":\")\nsplit_low <- lapply(split, tolower)\n\n# Generic select function\nselect_el <- function(x, index) {\n  x[index]\n}\n\n# Use lapply() twice on split_low: names and years\nnames <- lapply(split_low, select_el, index = 1)\nyears <- lapply(split_low, select_el, index = 2)"
  },
  {
    "objectID": "Intermedio_R_C4.html#apply-functions-that-return-null",
    "href": "Intermedio_R_C4.html#apply-functions-that-return-null",
    "title": "10  The apply family",
    "section": "10.9 Apply functions that return NULL",
    "text": "10.9 Apply functions that return NULL\nIn all of the previous exercises, it was assumed that the functions that were applied over vectors and lists actually returned a meaningful result. For example, the tolower() function simply returns the strings with the characters in lowercase. This won’t always be the case. Suppose you want to display the structure of every element of a list. You could use the str() function for this, which returns NULL:\n\nlapply(list(1, “a”, TRUE), str)\n\nThis call actually returns a list, the same size as the input list, containing all NULL values. On the other hand calling\n\nstr(TRUE)\n\non its own prints only the structure of the logical to the console, not NULL. That’s because str() uses invisible() behind the scenes, which returns an invisible copy of the return value, NULL in this case. This prevents it from being printed when the result of str() is not assigned.\nWhat will the following code chunk return (split_low is already available in the workspace)? Try to reason about the result before simply executing it in the console!\n\nlapply(split_low, function(x) { if (nchar(x[1]) > 5) { return(NULL) } else { return(x[2]) } })"
  },
  {
    "objectID": "Intermedio_R_C4.html#instructions-50-xp",
    "href": "Intermedio_R_C4.html#instructions-50-xp",
    "title": "10  The apply family",
    "section": "Instructions 50 XP",
    "text": "Instructions 50 XP\nPossible Answers\n\nlist(NULL, NULL, “1623”, “1857”)\nlist(“gauss”, “bayes”, NULL, NULL)\nlist(“1777”, “1702”, NULL, NULL) Respuesta\nlist(“1777”, “1702”)"
  },
  {
    "objectID": "Intermedio_R_C4.html#how-to-use-sapply",
    "href": "Intermedio_R_C4.html#how-to-use-sapply",
    "title": "10  The apply family",
    "section": "10.10 How to use sapply",
    "text": "10.10 How to use sapply\nYou can use sapply() similar to how you used lapply(). The first argument of sapply() is the list or vector X over which you want to apply a function, FUN. Potential additional arguments to this function are specified afterwards (…):\n\nsapply(X, FUN, …)\n\nIn the next couple of exercises, you’ll be working with the variable temp, that contains temperature measurements for 7 days. temp is a list of length 7, where each element is a vector of length 5, representing 5 measurements on a given day. This variable has already been defined in the workspace: type str(temp) to see its structure."
  },
  {
    "objectID": "Intermedio_R_C4.html#instructions-100-xp-4",
    "href": "Intermedio_R_C4.html#instructions-100-xp-4",
    "title": "10  The apply family",
    "section": "10.11 Instructions 100 XP",
    "text": "10.11 Instructions 100 XP\nUse lapply() to calculate the minimum (built-in function min()) of the temperature measurements for every day. Do the same thing but this time with sapply(). See how the output differs. Use lapply() to compute the the maximum (max()) temperature for each day. Again, use sapply() to solve the same question and see how lapply() and sapply() differ.\n\n\nE5.R\n\n# temp has already been defined in the workspace\n\n# Use lapply() to find each day's minimum temperature\nlapply(temp, min)\n\n# Use sapply() to find each day's minimum temperature\nsapply(temp, min)\n\n# Use lapply() to find each day's maximum temperature\nlapply(temp, max)\n\n# Use sapply() to find each day's maximum temperature\nsapply(temp, max)"
  },
  {
    "objectID": "Intermedio_R_C4.html#sapply-with-your-own-function",
    "href": "Intermedio_R_C4.html#sapply-with-your-own-function",
    "title": "10  The apply family",
    "section": "10.12 sapply with your own function",
    "text": "10.12 sapply with your own function\nLike lapply(), sapply() allows you to use self-defined functions and apply them over a vector or a list:\n\nsapply(X, FUN, …)\n\nHere, FUN can be one of R’s built-in functions, but it can also be a function you wrote. This self-written function can be defined before hand, or can be inserted directly as an anonymous function."
  },
  {
    "objectID": "Intermedio_R_C4.html#instructions-100-xp-5",
    "href": "Intermedio_R_C4.html#instructions-100-xp-5",
    "title": "10  The apply family",
    "section": "10.13 Instructions 100 XP",
    "text": "10.13 Instructions 100 XP\n\nFinish the definition of extremes_avg(): it takes a vector of temperatures and calculates the average of the minimum and maximum temperatures of the vector.\nNext, use this function inside sapply() to apply it over the vectors inside temp.\nUse the same function over temp with lapply() and see how the outputs differ.\n\n\n\nE6.R\n\n# temp is already defined in the workspace\n\n# Finish function definition of extremes_avg\nextremes_avg <- function(x) {\n  ( min(x) + max(x) ) / 2\n}\n\n# Apply extremes_avg() over temp using sapply()\nsapply(temp,extremes_avg)\n\n# Apply extremes_avg() over temp using lapply()\nlapply(temp,extremes_avg)"
  },
  {
    "objectID": "Intermedio_R_C4.html#apply-with-function-returning-vector",
    "href": "Intermedio_R_C4.html#apply-with-function-returning-vector",
    "title": "10  The apply family",
    "section": "10.14 apply with function returning vector",
    "text": "10.14 apply with function returning vector\nIn the previous exercises, you’ve seen how sapply() simplifies the list that lapply() would return by turning it into a vector. But what if the function you’re applying over a list or a vector returns a vector of length greater than 1? If you don’t remember from the video, don’t waste more time in the valley of ignorance and head over to the instructions!"
  },
  {
    "objectID": "Intermedio_R_C4.html#instructions-100-xp-6",
    "href": "Intermedio_R_C4.html#instructions-100-xp-6",
    "title": "10  The apply family",
    "section": "10.15 Instructions 100 XP",
    "text": "10.15 Instructions 100 XP\n\nFinish the definition of the extremes() function. It takes a vector of numerical values and returns a vector containing the minimum and maximum values of a given vector, with the names “min” and “max”, respectively.\nApply this function over the vector temp using sapply().\nFinally, apply this function over the vector temp using lapply() as well.\n\n\n\nE7.R\n\n# temp is already available in the workspace\n\n# Create a function that returns min and max of a vector: extremes\nextremes <- function(x) {\n  c(min = min(x), max = max(x))\n}\n\n# Apply extremes() over temp with sapply()\nsapply(temp,extremes)\n\n# Apply extremes() over temp with lapply()\nlapply(temp,extremes)"
  },
  {
    "objectID": "Intermedio_R_C4.html#sapply-cant-simplify-now-what",
    "href": "Intermedio_R_C4.html#sapply-cant-simplify-now-what",
    "title": "10  The apply family",
    "section": "10.16 sapply can’t simplify, now what?",
    "text": "10.16 sapply can’t simplify, now what?\nIt seems like we’ve hit the jackpot with sapply(). On all of the examples so far, sapply() was able to nicely simplify the rather bulky output of lapply(). But, as with life, there are things you can’t simplify. How does sapply() react?\nWe already created a function, below_zero(), that takes a vector of numerical values and returns a vector that only contains the values that are strictly below zero."
  },
  {
    "objectID": "Intermedio_R_C4.html#instructions-100-xp-7",
    "href": "Intermedio_R_C4.html#instructions-100-xp-7",
    "title": "10  The apply family",
    "section": "10.17 Instructions 100 XP",
    "text": "10.17 Instructions 100 XP\n\nApply below_zero() over temp using sapply() and store the result in freezing_s.\nApply below_zero() over temp using lapply(). Save the resulting list in a variable freezing_l.\nCompare freezing_s to freezing_l using the identical() function.\n\n\n\nE8.R\n\n# temp is already prepared for you in the workspace\n\n# Definition of below_zero()\nbelow_zero <- function(x) {\n  return(x[x < 0])\n}\n\n# Apply below_zero over temp using sapply(): freezing_s\nfreezing_s <- sapply(temp,below_zero)\n\n# Apply below_zero over temp using lapply(): freezing_l\nfreezing_l <- lapply(temp,below_zero)\n\n# Are freezing_s and freezing_l identical?\nidentical(freezing_s,freezing_l)"
  },
  {
    "objectID": "Intermedio_R_C4.html#sapply-with-functions-that-return-null",
    "href": "Intermedio_R_C4.html#sapply-with-functions-that-return-null",
    "title": "10  The apply family",
    "section": "10.18 sapply with functions that return NULL",
    "text": "10.18 sapply with functions that return NULL\nYou already have some apply tricks under your sleeve, but you’re surely hungry for some more, aren’t you? In this exercise, you’ll see how sapply() reacts when it is used to apply a function that returns NULL over a vector or a list.\nA function print_info(), that takes a vector and prints the average of this vector, has already been created for you. It uses the cat() function."
  },
  {
    "objectID": "Intermedio_R_C4.html#instructions-100-xp-8",
    "href": "Intermedio_R_C4.html#instructions-100-xp-8",
    "title": "10  The apply family",
    "section": "10.19 Instructions 100 XP",
    "text": "10.19 Instructions 100 XP\nApply print_info() over the contents of temp with sapply(). Repeat this process with lapply(). Do you notice the difference?\n\n\nE9.R\n\n# temp is already available in the workspace\n\n# Definition of print_info()\nprint_info <- function(x) {\n  cat(\"The average temperature is\", mean(x), \"\\n\")\n}\n\n# Apply print_info() over temp using sapply()\nsapply(temp,print_info)\n\n# Apply print_info() over temp using lapply()\nlapply(temp,print_info)"
  },
  {
    "objectID": "Intermedio_R_C4.html#reverse-engineering-sapply",
    "href": "Intermedio_R_C4.html#reverse-engineering-sapply",
    "title": "10  The apply family",
    "section": "10.20 Reverse engineering sapply",
    "text": "10.20 Reverse engineering sapply\n\nsapply(list(runif (10), runif (10)), function(x) c(min = min(x), mean = mean(x), max = max(x)))\n\nWithout going straight to the console to run the code, try to reason through which of the following statements are correct and why.\n\nsapply() can’t simplify the result that lapply() would return, and thus returns a list of vectors.\nThis code generates a matrix with 3 rows and 2 columns.\nThe function that is used inside sapply() is anonymous.\nThe resulting data structure does not contain any names.\n\nSelect the option that lists all correct statements."
  },
  {
    "objectID": "Intermedio_R_C4.html#instructions-50-xp-1",
    "href": "Intermedio_R_C4.html#instructions-50-xp-1",
    "title": "10  The apply family",
    "section": "Instructions 50 XP",
    "text": "Instructions 50 XP\nPossible Answers\n\n\nand (3)\n\n\nand (3) Respuesta\n\n\nand (4)\n\n(2), (3) and (4)"
  },
  {
    "objectID": "Intermedio_R_C4.html#use-vapply",
    "href": "Intermedio_R_C4.html#use-vapply",
    "title": "10  The apply family",
    "section": "10.21 Use vapply",
    "text": "10.21 Use vapply\nBefore you get your hands dirty with the third and last apply function that you’ll learn about in this intermediate R course, let’s take a look at its syntax. The function is called vapply(), and it has the following syntax:\n\nvapply(X, FUN, FUN.VALUE, …, USE.NAMES = TRUE)\n\nOver the elements inside X, the function FUN is applied. The FUN.VALUE argument expects a template for the return argument of this function FUN. USE.NAMES is TRUE by default; in this case vapply() tries to generate a named array, if possible.\nFor the next set of exercises, you’ll be working on the temp list again, that contains 7 numerical vectors of length 5. We also coded a function basics() that takes a vector, and returns a named vector of length 3, containing the minimum, mean and maximum value of the vector respectively."
  },
  {
    "objectID": "Intermedio_R_C4.html#instructions-100-xp-9",
    "href": "Intermedio_R_C4.html#instructions-100-xp-9",
    "title": "10  The apply family",
    "section": "10.22 Instructions 100 XP",
    "text": "10.22 Instructions 100 XP\nApply the function basics() over the list of temperatures, temp, using vapply(). This time, you can use numeric(3) to specify the FUN.VALUE argument.\n\n\nE10.R\n\n# temp is already available in the workspace\n\n# Definition of basics()\nbasics <- function(x) {\n  c(min = min(x), mean = mean(x), max = max(x))\n}\n\n# Apply basics() over temp using vapply()\nvapply(temp, basics, numeric(3))"
  },
  {
    "objectID": "Intermedio_R_C4.html#use-vapply-2",
    "href": "Intermedio_R_C4.html#use-vapply-2",
    "title": "10  The apply family",
    "section": "10.23 Use vapply (2)",
    "text": "10.23 Use vapply (2)\nSo far you’ve seen that vapply() mimics the behavior of sapply() if everything goes according to plan. But what if it doesn’t?\nIn the video, Filip showed you that there are cases where the structure of the output of the function you want to apply, FUN, does not correspond to the template you specify in FUN.VALUE. In that case, vapply() will throw an error that informs you about the misalignment between expected and actual output."
  },
  {
    "objectID": "Intermedio_R_C4.html#instructions-100-xp-10",
    "href": "Intermedio_R_C4.html#instructions-100-xp-10",
    "title": "10  The apply family",
    "section": "10.24 Instructions 100 XP",
    "text": "10.24 Instructions 100 XP\n\nInspect the pre-loaded code and try to run it. If you haven’t changed anything,an error should pop up. That’s because vapply() still expects basics() to return a vector of length 3. The error message gives you an indication of what’s wrong.\nTry to fix the error by editing the vapply() command.\n\n\n\nE11.R\n\n# temp is already available in the workspace\n\n# Definition of the basics() function\nbasics <- function(x) {\n  c(min = min(x), mean = mean(x), median = median(x), max = max(x))\n}\n\n# Fix the error:\nvapply(temp, basics, numeric(4))"
  },
  {
    "objectID": "Intermedio_R_C4.html#from-sapply-to-vapply",
    "href": "Intermedio_R_C4.html#from-sapply-to-vapply",
    "title": "10  The apply family",
    "section": "10.25 From sapply to vapply",
    "text": "10.25 From sapply to vapply\nAs highlighted before, vapply() can be considered a more robust version of sapply(), because you explicitly restrict the output of the function you want to apply. Converting your sapply() expressions in your own R scripts to vapply() expressions is therefore a good practice (and also a breeze!)."
  },
  {
    "objectID": "Intermedio_R_C4.html#instructions-100-xp-11",
    "href": "Intermedio_R_C4.html#instructions-100-xp-11",
    "title": "10  The apply family",
    "section": "10.26 Instructions 100 XP",
    "text": "10.26 Instructions 100 XP\nConvert all the sapply() expressions on the right to their vapply() counterparts. Their results should be exactly the same; you’re only adding robustness. You’ll need the templates numeric(1) and logical(1).\n\n\nE12.R\n\n# temp is already defined in the workspace\n\n# Convert to vapply() expression\nvapply(temp, max,numeric(1))\n\n# Convert to vapply() expression\nvapply(temp, function(x, y) { mean(x) > y }, y = 5,logical(1))"
  },
  {
    "objectID": "Intermedio_R_C5.html#mathematical-utilities",
    "href": "Intermedio_R_C5.html#mathematical-utilities",
    "title": "11  Utilities",
    "section": "11.1 Mathematical utilities",
    "text": "11.1 Mathematical utilities\nHave another look at some useful math functions that R features:\n\nabs(): Calculate the absolute value.\nsum(): Calculate the sum of all the values in a data structure.\nmean(): Calculate the arithmetic mean.\nround(): Round the values to 0 decimal places by default. Try out ?round in the console for variations of round() and ways to change the number of digits to round to.\n\nAs a data scientist in training, you’ve estimated a regression model on the sales data for the past six months. After evaluating your model, you see that the training error of your model is quite regular, showing both positive and negative values. A vector errors containing the error values has been pre-defined for you."
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-100-xp",
    "href": "Intermedio_R_C5.html#instructions-100-xp",
    "title": "11  Utilities",
    "section": "11.2 Instructions 100 XP",
    "text": "11.2 Instructions 100 XP\nCalculate the sum of the absolute rounded values of the training errors. You can work in parts, or with a single one-liner. There’s no need to store the result in a variable, just have R print it.\n\n\nE1.R\n\n# The errors vector has already been defined for you\nerrors <- c(1.9, -2.6, 4.0, -9.5, -3.4, 7.3)\n\n# Sum of absolute rounded values of errors\nsum(abs(round(errors)))"
  },
  {
    "objectID": "Intermedio_R_C5.html#find-the-error",
    "href": "Intermedio_R_C5.html#find-the-error",
    "title": "11  Utilities",
    "section": "11.3 Find the error",
    "text": "11.3 Find the error\nWe went ahead and pre-loaded some code for you, but there’s still an error. Can you trace it and fix it?\nIn times of despair, help with functions such as sum() and rev() are a single command away; simply execute the code ?sum and ?rev."
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-100-xp-1",
    "href": "Intermedio_R_C5.html#instructions-100-xp-1",
    "title": "11  Utilities",
    "section": "11.4 Instructions 100 XP",
    "text": "11.4 Instructions 100 XP\nFix the error by including code on the last line. Remember: you want to call mean() only once!\n\n\nE2.R\n\n# Don't edit these two lines\nvec1 <- c(1.5, 2.5, 8.4, 3.7, 6.3)\nvec2 <- rev(vec1)\n\n# Fix the error\nmean(abs(vec1)) \nmean(abs(vec2))\n\n# ?mean()\n# ?rev()"
  },
  {
    "objectID": "Intermedio_R_C5.html#data-utilities",
    "href": "Intermedio_R_C5.html#data-utilities",
    "title": "11  Utilities",
    "section": "11.5 Data Utilities",
    "text": "11.5 Data Utilities\nR features a bunch of functions to juggle around with data structures::\n\nseq(): Generate sequences, by specifying the from, to, and by arguments.\nrep(): Replicate elements of vectors and lists.\nsort(): Sort a vector in ascending order. Works on numerics, but also on\ncharacter strings and logicals.\nrev(): Reverse the elements in a data structures for which reversal is defined.\nstr(): Display the structure of any R object.\nappend(): Merge vectors or lists.\nis.*(): Check for the class of an R object.\nas.*(): Convert an R object from one class to another.\nunlist(): Flatten (possibly embedded) lists to produce a vector.\n\nRemember the social media profile views data? Your LinkedIn and Facebook view counts for the last seven days have been pre-defined as lists."
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-100-xp-2",
    "href": "Intermedio_R_C5.html#instructions-100-xp-2",
    "title": "11  Utilities",
    "section": "11.6 Instructions 100 XP",
    "text": "11.6 Instructions 100 XP\n\nConvert both linkedin and facebook lists to a vector, and store them as li_vec and fb_vec respectively.\nNext, append fb_vec to the li_vec (Facebook data comes last). Save the result as social_vec.\nFinally, sort social_vec from high to low. Print the resulting vector.\n\n\n\nE3.R\n\n# The linkedin and facebook lists have already been created for you\nlinkedin <- list(16, 9, 13, 5, 2, 17, 14)\nfacebook <- list(17, 7, 5, 16, 8, 13, 14)\n\n# Convert linkedin and facebook to a vector: li_vec and fb_vec\nli_vec <- as.vector(linkedin)\nfb_vec <- as.vector(facebook)\n\n# Append fb_vec to li_vec: social_vec\nsocial_vec <-unlist(append(li_vec, fb_vec))\n\n# Sort social_vec\nsort(social_vec,decreasing = TRUE)"
  },
  {
    "objectID": "Intermedio_R_C5.html#find-the-error-2",
    "href": "Intermedio_R_C5.html#find-the-error-2",
    "title": "11  Utilities",
    "section": "11.7 Find the error (2)",
    "text": "11.7 Find the error (2)\nJust as before, let’s switch roles. It’s up to you to see what unforgivable mistakes we’ve made. Go fix them!"
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-100-xp-3",
    "href": "Intermedio_R_C5.html#instructions-100-xp-3",
    "title": "11  Utilities",
    "section": "11.8 Instructions 100 XP",
    "text": "11.8 Instructions 100 XP\nCorrect the expression. Make sure that your fix still uses the functions rep() and seq().\n\n\nE4.R\n\n# Fix me\nrep(seq(1, 7, by = 2), times = 7)"
  },
  {
    "objectID": "Intermedio_R_C5.html#beat-gauss-using-r",
    "href": "Intermedio_R_C5.html#beat-gauss-using-r",
    "title": "11  Utilities",
    "section": "11.9 Beat Gauss using R",
    "text": "11.9 Beat Gauss using R\nThere is a popular story about young Gauss. As a pupil, he had a lazy teacher who wanted to keep the classroom busy by having them add up the numbers 1 to 100. Gauss came up with an answer almost instantaneously, 5050. On the spot, he had developed a formula for calculating the sum of an arithmetic series. There are more general formulas for calculating the sum of an arithmetic series with different starting values and increments. Instead of deriving such a formula, why not use R to calculate the sum of a sequence?"
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-100-xp-4",
    "href": "Intermedio_R_C5.html#instructions-100-xp-4",
    "title": "11  Utilities",
    "section": "11.10 Instructions 100 XP",
    "text": "11.10 Instructions 100 XP\nUsing the function seq(), create a sequence that ranges from 1 to 500 in increments of 3. Assign the resulting vector to a variable seq1. Again with the function seq(), create a sequence that ranges from 1200 to 900 in increments of -7. Assign it to a variable seq2. Calculate the total sum of the sequences, either by using the sum() function twice and adding the two results, or by first concatenating the sequences and then using the sum() function once. Print the result to the console.\n\n\nE5.R\n\n# Create first sequence: seq1\nseq1<- seq(from = 1, to = 500, by = 3)\n\n# Create second sequence: seq2\nseq2<- seq(from = 1200, to = 900, by = -7)\n\n# Calculate total sum of the sequences\nsum(seq1, seq2)"
  },
  {
    "objectID": "Intermedio_R_C5.html#grepl-grep",
    "href": "Intermedio_R_C5.html#grepl-grep",
    "title": "11  Utilities",
    "section": "11.11 grepl & grep",
    "text": "11.11 grepl & grep\nIn their most basic form, regular expressions can be used to see whether a pattern exists inside a character string or a vector of character strings. For this purpose, you can use:\n\ngrepl(), which returns TRUE when a pattern is found in the corresponding character string.\ngrep(), which returns a vector of indices of the character strings that contains the pattern.\n\nBoth functions need a pattern and an x argument, where pattern is the regular expression you want to match for, and the x argument is the character vector from which matches should be sought.\nIn this and the following exercises, you’ll be querying and manipulating a character vector of email addresses! The vector emails has been pre-defined so you can begin with the instructions straight away!"
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-100-xp-5",
    "href": "Intermedio_R_C5.html#instructions-100-xp-5",
    "title": "11  Utilities",
    "section": "11.12 Instructions 100 XP",
    "text": "11.12 Instructions 100 XP\n\nUse grepl() to generate a vector of logicals that indicates whether these email addresses contain “edu”. Print the result to the output.\nDo the same thing with grep(), but this time save the resulting indexes in a variable hits.\nUse the variable hits to select from the emails vector only the emails that contain “edu”.\n\n\n\nE6.R\n\n# The emails vector has already been defined for you\nemails <- c(\"john.doe@ivyleague.edu\", \"education@world.gov\", \n\"dalai.lama@peace.org\",\n            \"invalid.edu\", \"quant@bigdatacollege.edu\",\n            \"cookie.monster@sesame.tv\")\n\n# Use grepl() to match for \"edu\"\ngrepl( \"edu\",  emails)\n\n# Use grep() to match for \"edu\", save result to hits\nhits <- grep(\"edu\", emails)\n\n\n# Subset emails using hits\nemails[hits]"
  },
  {
    "objectID": "Intermedio_R_C5.html#repl-grep-2",
    "href": "Intermedio_R_C5.html#repl-grep-2",
    "title": "11  Utilities",
    "section": "11.13 repl & grep (2)",
    "text": "11.13 repl & grep (2)\nYou can use the caret, ^, and the dollar sign, $ to match the content located in the start and end of a string, respectively. This could take us one step closer to a correct pattern for matching only the “.edu” email addresses from our list of emails. But there’s more that can be added to make the pattern more robust:\n\n@, because a valid email must contain an at-sign.\n., which matches any character (.) zero or more times (). Both the dot and the asterisk are metacharacters. You can use them to match any character between the at-sign and the “.edu” portion of an email address.\n\\.edu$, to match the “.edu” part of the email at the end of the string. The \\ part escapes the dot: it tells R that you want to use the . as an actual character."
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-100-xp-6",
    "href": "Intermedio_R_C5.html#instructions-100-xp-6",
    "title": "11  Utilities",
    "section": "11.14 Instructions 100 XP",
    "text": "11.14 Instructions 100 XP\n\nUse grepl() with the more advanced regular expression to return a logical vector. Simply print the result.\nDo a similar thing with grep() to create a vector of indices. Store the result in the variable hits.\nUse emails[hits] again to subset the emails vector.\n\n\n\nE7.R\n\n# The emails vector has already been defined for you\nemails <- c(\"john.doe@ivyleague.edu\", \"education@world.gov\",\n\"dalai.lama@peace.org\",\n            \"invalid.edu\", \"quant@bigdatacollege.edu\",\n            \"cookie.monster@sesame.tv\")\n\n# Use grepl() to match for .edu addresses more robustly\ngrepl(pattern=\"@.*\\\\.edu$\",emails)\n\n# Use grep() to match for .edu addresses more robustly, save result to hits\nhits <- grep(\"@.*\\\\.edu$\", emails)\n\n# Subset emails using hits\nemails[hits]"
  },
  {
    "objectID": "Intermedio_R_C5.html#sub-gsub",
    "href": "Intermedio_R_C5.html#sub-gsub",
    "title": "11  Utilities",
    "section": "11.15 sub & gsub",
    "text": "11.15 sub & gsub\nWhile grep() and grepl() were used to simply check whether a regular expression could be matched with a character vector, sub() and gsub() take it one step further: you can specify a replacement argument. If inside the character vector x, the regular expression pattern is found, the matching element(s) will be replaced with replacement. sub() only replaces the first match, whereas gsub() replaces all matches.\nSuppose that emails vector you’ve been working with is an excerpt of DataCamp’s email database. Why not offer the owners of the .edu email addresses a new email address on the datacamp.edu domain? This could be quite a powerful marketing stunt: Online education is taking over traditional learning institutions! Convert your email and be a part of the new generation!"
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-100-xp-7",
    "href": "Intermedio_R_C5.html#instructions-100-xp-7",
    "title": "11  Utilities",
    "section": "11.16 Instructions 100 XP",
    "text": "11.16 Instructions 100 XP\nWith the advanced regular expression “@.*\\.edu$“, use sub() to replace the match with”(datacamp.edu?)“. Since there will only be one match per character string, gsub() is not necessary here. Inspect the resulting output.\n\n\nE8.R\n\n# The emails vector has already been defined for you\nemails <- c(\"john.doe@ivyleague.edu\", \"education@world.gov\",\n\"global@peace.org\",\n            \"invalid.edu\", \"quant@bigdatacollege.edu\",\n            \"cookie.monster@sesame.tv\")\n\n# Use sub() to convert the email domains to datacamp.edu\nsub(\"@.*\\\\.edu$\", \"@datacamp.edu\", emails)"
  },
  {
    "objectID": "Intermedio_R_C5.html#sub-gsub-2",
    "href": "Intermedio_R_C5.html#sub-gsub-2",
    "title": "11  Utilities",
    "section": "11.17 sub & gsub (2)",
    "text": "11.17 sub & gsub (2)\nRegular expressions are a typical concept that you’ll learn by doing and by seeing other examples. Before you rack your brains over the regular expression in this exercise, have a look at the new things that will be used:\n\n.*: A usual suspect! It can be read as “any character that is matched zero or more times”.\n\\s: Match a space. The “s” is normally a character, escaping it (\\) makes it a metacharacter.\n[0-9]+: Match the numbers 0 to 9, at least once (+).\n([0-9]+): The parentheses are used to make parts of the matching string available to define the replacement. The \\1 in the replacement argument of sub() gets set to the string that is captured by the regular expression [0-9]+.\n\n\nawards <- c(“Won 1 Oscar.”, “Won 1 Oscar. Another 9 wins & 24 nominations.”, “1 win and 2 nominations.”, “2 wins & 3 nominations.”, “Nominated for 2 Golden Globes. 1 more win & 2 nominations.”, “4 wins & 1 nomination.”)\n\nsub(“.\\s([0-9]+)\\snomination.$”, “\\1”, awards) What does this code chunk return? awards is already defined in the workspace so you can start playing in the console straight away."
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-50-xp",
    "href": "Intermedio_R_C5.html#instructions-50-xp",
    "title": "11  Utilities",
    "section": "Instructions 50 XP",
    "text": "Instructions 50 XP\nPossible Answers\n\nA vector of integers containing: 1, 24, 2, 3, 2, 1.\nThe vector awards gets returned as there isn’t a single element in awards that matches the regular expression.\nA vector of character strings containing “1”, “24”, “2”, “3”, “2”, “1”.\nA vector of character strings containing “Won 1 Oscar.”, “24”, “2”, “3”, “2”, “1”. Respuesta"
  },
  {
    "objectID": "Intermedio_R_C5.html#right-here-right-now",
    "href": "Intermedio_R_C5.html#right-here-right-now",
    "title": "11  Utilities",
    "section": "11.18 Right here, right now",
    "text": "11.18 Right here, right now\nIn R, dates are represented by Date objects, while times are represented by POSIXct objects. Under the hood, however, these dates and times are simple numerical values. Date objects store the number of days since the 1st of January in 1970. POSIXct objects on the other hand, store the number of seconds since the 1st of January in 1970.\nThe 1st of January in 1970 is the common origin for representing times and dates in a wide range of programming languages. There is no particular reason for this; it is a simple convention. Of course, it’s also possible to create dates and times before 1970; the corresponding numerical values are simply negative in this case."
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-100-xp-8",
    "href": "Intermedio_R_C5.html#instructions-100-xp-8",
    "title": "11  Utilities",
    "section": "11.19 Instructions 100 XP",
    "text": "11.19 Instructions 100 XP\n\nAsk R for the current date, and store the result in a variable today.\nTo see what today looks like under the hood, call unclass() on it.\nAsk R for the current time, and store the result in a variable, now.\nTo see the numerical value that corresponds to now, call unclass() on it.\n\n\n\nE9.R\n\n# Get the current date: today\ntoday <- Sys.Date()\ntoday\n\n# See what today looks like under the hood\nunclass(today)\n\n# Get the current time: now\nnow <- Sys.Date()\nnow\n\n# See what now looks like under the hood\nunclass(now)"
  },
  {
    "objectID": "Intermedio_R_C5.html#create-and-format-dates",
    "href": "Intermedio_R_C5.html#create-and-format-dates",
    "title": "11  Utilities",
    "section": "11.20 Create and format dates",
    "text": "11.20 Create and format dates\nTo create a Date object from a simple character string in R, you can use the as.Date() function. The character string has to obey a format that can be defined using a set of symbols (the examples correspond to 13 January, 1982):\n\n%Y: 4-digit year (1982)\n%y: 2-digit year (82)\n%m: 2-digit month (01)\n%d: 2-digit day of the month (13)\n%A: weekday (Wednesday)\n%a: abbreviated weekday (Wed)\n%B: month (January)\n%b: abbreviated month (Jan)\n\nThe following R commands will all create the same Date object for the 13th day in January of 1982:\n\nas.Date(“1982-01-13”) as.Date(“Jan-13-82”, format = “%b-%d-%y”) as.Date(“13 January, 1982”, format = “%d %B, %Y”)\n\nNotice that the first line here did not need a format argument, because by default R matches your character string to the formats “%Y-%m-%d” or “%Y/%m/%d”.\nIn addition to creating dates, you can also convert dates to character strings that use a different date notation. For this, you use the format() function. Try the following lines of code:\n\ntoday <- Sys.Date() format(Sys.Date(), format = “%d %B, %Y”) format(Sys.Date(), format = “Today is a %A!”)"
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-100-xp-9",
    "href": "Intermedio_R_C5.html#instructions-100-xp-9",
    "title": "11  Utilities",
    "section": "11.21 Instructions 100 XP",
    "text": "11.21 Instructions 100 XP\n\nThree character strings representing dates have been created for you. Convert them to dates using as.Date(), and assign them to date1, date2, and date3 respectively. The code for date1 is already included.\nExtract useful information from the dates as character strings using format(). From the first date, select the weekday. From the second date, select the day of the month. From the third date, you should select the abbreviated month and the 4-digit year, separated by a space.\n\n\n\nE10.R\n\n# Definition of character strings representing dates\nstr1 <- \"May 23, '96\"\nstr2 <- \"2012-03-15\"\nstr3 <- \"30/January/2006\"\n\n# Convert the strings to dates: date1, date2, date3\ndate1 <- as.Date(str1, format = \"%b %d, '%y\")\ndate2 <- as.Date(str2) #, format = \"%y %b, '%d\")\ndate3 <- as.Date(str3, format = \"%d/%B/%Y\")\n\n# Convert dates to formatted strings\nformat(date1, \"%A\")\nformat(date2, \"%d\")\nformat(date3, \"%b %Y\")"
  },
  {
    "objectID": "Intermedio_R_C5.html#create-and-format-times",
    "href": "Intermedio_R_C5.html#create-and-format-times",
    "title": "11  Utilities",
    "section": "11.22 Create and format times",
    "text": "11.22 Create and format times\nSimilar to working with dates, you can use as.POSIXct() to convert from a character string to a POSIXct object, and format() to convert from a POSIXct object to a character string. Again, you have a wide variety of symbols:\n\n%H: hours as a decimal number (00-23)\n%I: hours as a decimal number (01-12)\n%M: minutes as a decimal number\n%S: seconds as a decimal number\n%T: shorthand notation for the typical format %H:%M:%S\n%p: AM/PM indicator\n\nFor a full list of conversion symbols, consult the strptime documentation in the console:\n\n?strptime\n\nAgain,as.POSIXct() uses a default format to match character strings. In this case, it’s %Y-%m-%d %H:%M:%S. In this exercise, abstraction is made of different time zones."
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-100-xp-10",
    "href": "Intermedio_R_C5.html#instructions-100-xp-10",
    "title": "11  Utilities",
    "section": "11.23 Instructions 100 XP",
    "text": "11.23 Instructions 100 XP\n\nConvert two strings that represent timestamps, str1 and str2, to POSIXct objects called time1 and time2.\nUsing format(), create a string from time1 containing only the minutes.\nFrom time2, extract the hours and minutes as “hours:minutes AM/PM”. Refer to the assignment text above to find the correct conversion symbols!\n\n\n\nE11.R\n\n# Definition of character strings representing times\nstr1 <- \"May 23, '96 hours:23 minutes:01 seconds:45\"\nstr2 <- \"2012-3-12 14:23:08\"\n\n# Convert the strings to POSIXct objects: time1, time2\ntime1 <- as.POSIXct(str1, format = \"%B %d, '%y hours:%H minutes:%M seconds:%S\")\ntime2 <- as.POSIXct(str2)\n\n# Convert times to formatted strings\nformat(time1, \"%M\")\nformat(time2, \"%I:%M %p\")"
  },
  {
    "objectID": "Intermedio_R_C5.html#calculations-with-dates",
    "href": "Intermedio_R_C5.html#calculations-with-dates",
    "title": "11  Utilities",
    "section": "11.24 Calculations with Dates",
    "text": "11.24 Calculations with Dates\nBoth Date and POSIXct R objects are represented by simple numerical values under the hood. This makes calculation with time and date objects very straightforward: R performs the calculations using the underlying numerical values, and then converts the result back to human-readable time information again.\nYou can increment and decrement Date objects, or do actual calculations with them:\n\ntoday <- Sys.Date() today + 1 today - 1\n\n\nas.Date(“2015-03-12”) - as.Date(“2015-02-27”)\n\nTo control your eating habits, you decided to write down the dates of the last five days that you ate pizza. In the workspace, these dates are defined as five Date objects, day1 to day5. A vector pizza containing these 5 Date objects has been pre-defined for you."
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-100-xp-11",
    "href": "Intermedio_R_C5.html#instructions-100-xp-11",
    "title": "11  Utilities",
    "section": "11.25 Instructions 100 XP",
    "text": "11.25 Instructions 100 XP\n\nCalculate the number of days that passed between the last and the first day you ate pizza. Print the result.\nUse the function diff() on pizza to calculate the differences between consecutive pizza days. Store the result in a new variable day_diff.\nCalculate the average period between two consecutive pizza days. Print the result.\n\n\n\nE12.R\n\n# day1, day2, day3, day4 and day5 are already available in the workspace\n\n# Difference between last and first pizza day\nday5 - day1\n\n# Create vector pizza\npizza <- c(day1, day2, day3, day4, day5)\n\n# Create differences between consecutive pizza days: day_diff\nday_diff <- diff(pizza, lag = 1, differences = 1)\nday_diff\n\n# Average period between two consecutive pizza days\nprint(mean(day_diff))"
  },
  {
    "objectID": "Intermedio_R_C5.html#calculations-with-times",
    "href": "Intermedio_R_C5.html#calculations-with-times",
    "title": "11  Utilities",
    "section": "11.26 Calculations with Times",
    "text": "11.26 Calculations with Times\nCalculations using POSIXct objects are completely analogous to those using Date objects. Try to experiment with this code to increase or decrease POSIXct objects:\n\nnow <- Sys.time() now + 3600 # add an hour now - 3600 * 24 # subtract a day\n\nAdding or subtracting time objects is also straightforward:\n\nbirth <- as.POSIXct(“1879-03-14 14:37:23”) death <- as.POSIXct(“1955-04-18 03:47:12”) einstein <- death - birth einstein\n\nYou’re developing a website that requires users to log in and out. You want to know what is the total and average amount of time a particular user spends on your website. This user has logged in 5 times and logged out 5 times as well. These times are gathered in the vectors login and logout, which are already defined in the workspace."
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-100-xp-12",
    "href": "Intermedio_R_C5.html#instructions-100-xp-12",
    "title": "11  Utilities",
    "section": "11.27 Instructions 100 XP",
    "text": "11.27 Instructions 100 XP\n\nCalculate the difference between the two vectors logout and login, i.e. the time the user was online in each independent session. Store the result in a variable time_online.\nInspect the variable time_online by printing it.\nCalculate the total time that the user was online. Print the result.\nCalculate the average time the user was online. Print the result.\n\n\n\nE13.R\n\n# login and logout are already defined in the workspace\n# Calculate the difference between login and logout: time_online\ntime_online <- logout- login\n\n# Inspect the variable time_online\ntime_online\n\n# Calculate the total time online\nsum(time_online)\n\n# Calculate the average time online\nmean(time_online)"
  },
  {
    "objectID": "Intermedio_R_C5.html#time-is-of-the-essence",
    "href": "Intermedio_R_C5.html#time-is-of-the-essence",
    "title": "11  Utilities",
    "section": "11.28 Time is of the essence",
    "text": "11.28 Time is of the essence\nThe dates when a season begins and ends can vary depending on who you ask. People in Australia will tell you that spring starts on September 1st. The Irish people in the Northern hemisphere will swear that spring starts on February 1st, with the celebration of St. Brigid’s Day. Then there’s also the difference between astronomical and meteorological seasons: while astronomers are used to equinoxes and solstices, meteorologists divide the year into 4 fixed seasons that are each three months long. (source: www.timeanddate.com)\nA vector astro, which contains character strings representing the dates on which the 4 astronomical seasons start, has been defined on your workspace. Similarly, a vector meteo has already been created for you, with the meteorological beginnings of a season."
  },
  {
    "objectID": "Intermedio_R_C5.html#instructions-100-xp-13",
    "href": "Intermedio_R_C5.html#instructions-100-xp-13",
    "title": "11  Utilities",
    "section": "11.29 Instructions 100 XP",
    "text": "11.29 Instructions 100 XP\n\nUse as.Date() to convert the astro vector to a vector containing Date objects. You will need the %d, %b and %Y symbols to specify the format. Store the resulting vector as astro_dates.\nUse as.Date() to convert the meteo vector to a vector with Date objects. This time, you will need the %B, %d and %y symbols for the format argument. Store the resulting vector as meteo_dates.\nWith a combination of max(), abs() and -, calculate the maximum absolute difference between the astronomical and the meteorological beginnings of a season, i.e. astro_dates and meteo_dates. Simply print this maximum difference to the console output.\n\n\n\nE14.R\n\n# Convert astro to vector of Date objects: astro_dates\nastro_dates <-as.Date(astro, format = \"%d-%b-%Y\")\n\n# Convert meteo to vector of Date objects: meteo_dates\nmeteo_dates <-as.Date(meteo, format = \"%B %d, %y\")\n\n# Calculate the maximum absolute difference between astro_dates and meteo_dates\nmax(abs(astro_dates - meteo_dates))"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#calling-functions",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#calling-functions",
    "title": "12  How to Write a Function",
    "section": "12.1 Calling functions",
    "text": "12.1 Calling functions\nOne way to make your code more readable is to be careful about the order you pass arguments when you call functions, and whether you pass the arguments by position or by name.\ngold_medals, a numeric vector of the number of gold medals won by each country in the 2016 Summer Olympics, is provided.\nFor convenience, the arguments of median() and rank() are displayed using args(). Setting rank()’s na.last argument to “keep” means “keep the rank of NA values as NA”.\nBest practice for calling functions is to include them in the order shown by args(), and to only name rare arguments."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#instructions-100-xp",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#instructions-100-xp",
    "title": "12  How to Write a Function",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nThe final line calculates the median number of gold medals each country won.\nRewrite the call to median(), following best practices.\n\n\n\nE1.R\n\n# Look at the gold medals data\ngold_medals\n\n# Note the arguments to median()\nargs(median)\n\n# Rewrite this function call, following best practices\nmedian(gold_medals, na.rm = TRUE)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#the-benefits-of-writing-functions",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#the-benefits-of-writing-functions",
    "title": "12  How to Write a Function",
    "section": "12.2 The benefits of writing functions",
    "text": "12.2 The benefits of writing functions\nThere are lots of great reasons that you should write your own functions.\nWhich of these is not one of them?"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#answer-the-question-50xp",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#answer-the-question-50xp",
    "title": "12  How to Write a Function",
    "section": "Answer the question 50XP",
    "text": "Answer the question 50XP\nPossible Answers\n\nYou can type less code, saving effort and making your analyses more readable. Respuesta\nYou make less “copy and paste”-related errors.\nYou can reuse your code from project to project.\nYou can make your code harder to read, potentially improving your job security because only you can maintain it."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#your-first-function-tossing-a-coin",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#your-first-function-tossing-a-coin",
    "title": "12  How to Write a Function",
    "section": "12.3 Your first function: tossing a coin",
    "text": "12.3 Your first function: tossing a coin\nTime to write your first function! It’s a really good idea when writing functions to start simple. You can always make a function more complicated later if it’s really necessary, so let’s not worry about arguments for now."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#instructions-100-xp-1",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#instructions-100-xp-1",
    "title": "12  How to Write a Function",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nSimulate a single coin toss by using sample() to sample from coin_sides once.\nWrite a template for your function, naming it toss_coin. The function should take no arguments. Don’t include the body of the function yet.\nCopy your script, and paste it into the function body.\nCall your function.\n\n\n\nE2.R\n\ncoin_sides <- c(\"head\", \"tail\")\n\n# Sample from coin_sides once\nsample(coin_sides,1)\n\n# Write a template for your function, toss_coin()\ntoss_coin <- function() {\n  \n\n  # (Leave the contents of the body for later)\n# Add punctuation to finish the body\n}\n\n# Your script, from a previous step\ncoin_sides <- c(\"head\", \"tail\")\n\n# Paste your script into the function body\ntoss_coin <- function() {\n  sample(coin_sides, 1)\n  \n}\n\n# Your functions, from previous steps\ntoss_coin <- function() {\n  coin_sides <- c(\"head\", \"tail\")\n  sample(coin_sides, 1)\n}\n\n# Call your function\ntoss_coin()"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#inputs-to-functions",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#inputs-to-functions",
    "title": "12  How to Write a Function",
    "section": "12.4 Inputs to functions",
    "text": "12.4 Inputs to functions\nMost functions require some sort of input to determine what to compute. The inputs to functions are called arguments. You specify them inside the parentheses after the word “function.”\nAs mentioned in the video, the following exercises assume that you are using sample() to do random sampling."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#instructions-100-xp-2",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#instructions-100-xp-2",
    "title": "12  How to Write a Function",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nSample from coin_sides n_flips times with replacement.\nUpdate the definition of toss_coin() to accept a single argument, n_flips. The function should sample coin_sides n_flips times with replacement. Remember to change the signature and the body.\nGenerate 10 coin flips.\n\n\n\nE3.R\n\ncoin_sides <- c(\"head\", \"tail\")\nn_flips <- 10\n\n# Sample from coin_sides n_flips times with replacement\nsample(coin_sides,n_flips,replace = TRUE)\n\n# Update the function to return n coin tosses\ntoss_coin <- function(n_flips) {\n  coin_sides <- c(\"head\", \"tail\")\n  sample(coin_sides, n_flips,replace = TRUE)\n}\n\n# Generate 10 coin tosses\ntoss_coin(10)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#multiple-inputs-to-functions",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#multiple-inputs-to-functions",
    "title": "12  How to Write a Function",
    "section": "12.5 Multiple inputs to functions",
    "text": "12.5 Multiple inputs to functions\nIf a function should have more than one argument, list them in the function signature, separated by commas.\nTo solve this exercise, you need to know how to specify sampling weights to sample(). Set the prob argument to a numeric vector with the same length as x. Each value of prob is the probability of sampling the corresponding element of x, so their values add up to one. In the following example, each sample has a 20% chance of “bat”, a 30% chance of “cat” and a 50% chance of “rat”.\n\nsample(c(“bat”, “cat”, “rat”), 10, replace = TRUE, prob = c(0.2, 0.3, 0.5))\n\n##Instructions 100 XP {.unnumbered}\n\nBias the coin by weighting the sampling. Specify the prob argument so that heads are sampled with probability p_head (and tails are sampled with probability 1 - p_head).\nUpdate the definition of toss_coin() so it accepts an argument, p_head, and weights the samples using the code you wrote in the previous step.\nGenerate 10 coin tosses with an 80% chance of each head.\n\n\n\nE4.R\n\n\ncoin_sides <- c(\"head\", \"tail\")\nn_flips <- 10\np_head <- 0.8\n\n# Define a vector of weights\nweights <- c(p_head, 1 - p_head)\n\n# Update so that heads are sampled with prob p_head\nsample(coin_sides, n_flips, replace = TRUE, prob = weights)\n\n# Update the function so heads have probability p_head\ntoss_coin <- function(n_flips,p_head) {\n  coin_sides <- c(\"head\", \"tail\")\n  # Define a vector of weights\n  weights <- c(p_head,1-p_head)\n  # Modify the sampling to be weighted\n  sample(coin_sides, n_flips, replace = TRUE,prob=weights)\n}\n\n# Generate 10 coin tosses\ntoss_coin(10,0.8)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#renaming-glm",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#renaming-glm",
    "title": "12  How to Write a Function",
    "section": "12.6 Renaming GLM",
    "text": "12.6 Renaming GLM\nR’s generalized linear regression function, glm(), suffers the same usability problems as lm(): its name is an acronym, and its formula and data arguments are in the wrong order.\nTo solve this exercise, you need to know two things about generalized linear regression:\nglm() formulas are specified like lm() formulas: response is on the left, and explanatory variables are added on the right. To model count data, set glm()’s family argument to poisson, making it a Poisson regression. Here you’ll use data on the number of yearly visits to Snake River at Jackson Hole, Wyoming, snake_river_visits."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#instructions-100-xp-3",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#instructions-100-xp-3",
    "title": "12  How to Write a Function",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nRun a generalized linear regression by calling glm(). Model n_visits vs. gender, income, and travel on the snake_river_visits dataset, setting the family to poisson.\nDefine a function, run_poisson_regression(), to run a Poisson regression. This should take two arguments: data and formula, and call glm(), passing those arguments and setting family to poisson.\nRecreate the Poisson regression model from the first step, this time by calling your run_poisson_regression() function.\n\n\n\nE5.R\n\n# Run a generalized linear regression \nglm(\n  # Model no. of visits vs. gender, income, travel\n  n_visits ~ gender + income + travel, \n  # Use the snake_river_visits dataset\n  data = snake_river_visits, \n  # Make it a Poisson regression\n  family = poisson\n)\n\n# Write a function to run a Poisson regression\nrun_poisson_regression <- function(data, formula) {\n    glm(formula, data, family = poisson)\n}\n\n# From previous step\nrun_poisson_regression <- function(data, formula) {\n  glm(formula, data, family = poisson)\n}\n\n# Re-run the Poisson regression, using your function\nmodel <- snake_river_visits %>%\n  run_poisson_regression(n_visits ~ gender + income + travel)\n\n# Run this to see the predictions\nsnake_river_explanatory %>%\n  mutate(predicted_n_visits = predict(model, ., type = \"response\"))%>%\n  arrange(desc(predicted_n_visits))"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#numeric-defaults",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#numeric-defaults",
    "title": "12  How to Write a Function",
    "section": "12.7 Numeric defaults",
    "text": "12.7 Numeric defaults\ncut_by_quantile() converts a numeric vector into a categorical variable where quantiles define the cut points. This is a useful function, but at the moment you have to specify five arguments to make it work. This is too much thinking and typing.\nBy specifying default arguments, you can make it easier to use. Let’s start with n, which specifies how many categories to cut x into.\nA numeric vector of the number of visits to Snake River is provided as n_visits."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#instructions-100-xp-4",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#instructions-100-xp-4",
    "title": "12  How to Write a Function",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nUpdate the definition of cut_by_quantile() so that the n argument defaults to 5. Remove the n argument from the call to cut_by_quantile().\n\n\nE6.R\n\n# Set the default for n to 5\ncut_by_quantile <- function(x, n=5, na.rm, labels, interval_type) {\n  probs <- seq(0, 1, length.out = n + 1)\n  qtiles <- quantile(x, probs, na.rm = na.rm, names = FALSE)\n  right <- switch(interval_type, \"(lo, hi]\" = TRUE, \"[lo, hi)\" = FALSE)\n  cut(x, qtiles, labels = labels, right = right, include.lowest = TRUE)\n}\n\n# Remove the n argument from the call\ncut_by_quantile(\n  n_visits, \n  na.rm = FALSE, \n  labels = c(\"very low\", \"low\", \"medium\", \"high\", \"very high\"),\n  interval_type = \"(lo, hi]\"\n)\nformals(cut_by_quantile)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#logical-defaults",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#logical-defaults",
    "title": "12  How to Write a Function",
    "section": "12.8 Logical defaults",
    "text": "12.8 Logical defaults\ncut_by_quantile() is now slightly easier to use, but you still always have to specify the na.rm argument. This removes missing values—it behaves the same as the na.rm argument to mean() or sd().\nWhere functions have an argument for removing missing values, the best practice is to not remove them by default (in case you hadn’t spotted that you had missing values). That means that the default for na.rm should be FALSE."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C1.html#instructions-100-xp-5",
    "href": "Introduction_to_Writing_Functions_in_R_C1.html#instructions-100-xp-5",
    "title": "12  How to Write a Function",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nUpdate the definition of cut_by_quantile() so that the na.rm argument defaults to FALSE. Remove the na.rm argument from the call to cut_by_quantile().\n\n\nE7.R\n\n# Set the default for na.rm to FALSE\ncut_by_quantile <- function(x, n = 5, na.rm = FALSE, labels, interval_type) {\n  probs <- seq(0, 1, length.out = n + 1)\n  qtiles <- quantile(x, probs, na.rm = na.rm, names = FALSE)\n  right <- switch(interval_type, \"(lo, hi]\" = TRUE, \"[lo, hi)\" = FALSE)\n  cut(x, qtiles, labels = labels, right = right, include.lowest = TRUE)\n}\n\n# Remove the na.rm argument from the call\ncut_by_quantile(\n  n_visits, \n  labels = c(\"very low\", \"low\", \"medium\", \"high\", \"very high\"),\n  interval_type = \"(lo, hi]\"\n)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#returning-early",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#returning-early",
    "title": "13  Return Values and Scope",
    "section": "13.1 Returning early",
    "text": "13.1 Returning early\nSometimes, you don’t need to run through the whole body of a function to get the answer. In that case you can return early from that function using return().\nTo check if x is divisible by n, you can use is_divisible_by(x, n) from assertive.\nAlternatively, use the modulo operator, %%. x %% n gives the remainder when dividing x by n, so x %% n == 0 determines whether x is divisible by n. Try 1:10 %% 3 == 0 in the console.\nTo solve this exercise, you need to know that a leap year is every 400th year (like the year 2000) or every 4th year that isn’t a century (like 1904 but not 1900 or 1905).\nassertive is loaded."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#instructions-100-xp",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#instructions-100-xp",
    "title": "13  Return Values and Scope",
    "section": "13.2 Instructions 100 XP",
    "text": "13.2 Instructions 100 XP\nComplete the definition of is_leap_year(), checking for the cases of year being divisible by 400, then 100, then 4, returning early from the function in each case.\n\n\nE1.R\n\nis_leap_year <- function(year) {\n  # If year is div. by 400 return TRUE\n  if(is_divisible_by(year,400)) {\n    return(TRUE)\n  }\n  # If year is div. by 100 return FALSE\n  if(is_divisible_by(year,100)) {\n    return(FALSE)\n  }  \n  # If year is div. by 4 return TRUE\n  if(is_divisible_by(year,4)) {\n    return(TRUE)\n  }\n  \n  # Otherwise return FALSE\n  FALSE\n}"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#returning-invisibly",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#returning-invisibly",
    "title": "13  Return Values and Scope",
    "section": "13.3 Returning invisibly",
    "text": "13.3 Returning invisibly\nWhen the main purpose of a function is to generate output, like drawing a plot or printing something in the console, you may not want a return value to be rinted as well. In that case, the value should be invisibly returned.\nThe base R plot function returns NULL, since its main purpose is to draw a plot. This isn’t helpful if you want to use it in piped code: instead it should invisibly return the plot data to be piped on to the next step.\nRecall that plot() has a formula interface: instead of giving it vectors for x and y, you can specify a formula describing which columns of a data frame go on the x and y axes, and a data argument for the data frame. Note that just like lm(), the arguments are the wrong way round because the detail argument, formula, comes before the data argument.\n\nplot(y ~ x, data = data)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#instructions-100-xp-1",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#instructions-100-xp-1",
    "title": "13  Return Values and Scope",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse the cars dataset and the formula interface to plot(), draw a scatter plot of dist versus speed.\nGive pipeable_plot() data and formula arguments (in that order) and make it draw the plot, then invisibly return data.\nDraw the scatter plot of dist vs. speed again by calling pipeable_plot()\n\n\n\nE2.R\n\n# Using cars, draw a scatter plot of dist vs. speed\nplt_dist_vs_speed <- plot(dist ~ speed, data = cars)\n\n# Oh no! The plot object is NULL\nplt_dist_vs_speed\n\n# Define a pipeable plot fn with data and formula args\npipeable_plot <- function(data, formula) {\n  # Call plot() with the formula interface\n  plot(formula, data)\n  # Invisibly return the input dataset\n  invisible(data)\n}\n\n# Draw the scatter plot of dist vs. speed again\nplt_dist_vs_speed <- cars %>% \n  pipeable_plot(dist ~ speed)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#returning-many-things",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#returning-many-things",
    "title": "13  Return Values and Scope",
    "section": "13.4 Returning many things",
    "text": "13.4 Returning many things\nFunctions can only return one value. If you want to return multiple things, then you can store them all in a list.\nIf users want to have the list items as separate variables, they can assign each list element to its own variable using zeallot’s multi-assignment operator, %<-%.\nglance(), tidy(), and augment() each take the model object as their only rgument.\nThe Poisson regression model of Snake River visits is available as model. broom and zeallot are loaded."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#instructions-100-xp-2",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#instructions-100-xp-2",
    "title": "13  Return Values and Scope",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nExamine the structure of model.\nUse broom functions on model to create a list containing the model-, coefficient-, and observation-level parts of model.\nWrap the code into a function, groom_model(), that accepts model as its only argument.\nCall groom_model() on model, multi-assigning the result to three variables at once: mdl, cff, and obs.\n\n\n\nE3.R\n\n# Look at the structure of model (it's a mess!)\nstr(model)\n\n# Use broom tools to get a list of 3 data frames\nlist(\n  # Get model-level values\n  model = glance(model),\n  # Get coefficient-level values\n  coefficients = tidy(model),\n  # Get observation-level values\n  observations = augment(model)\n)\n\n# Wrap this code into a function, groom_model\ngroom_model <- function(model){\n  list(\n    model = glance(model),\n    coefficients = tidy(model),\n    observations = augment(model)\n  )\n}\n\ngroom_model(model)\n\n# From previous step\ngroom_model <- function(model) {\n  list(\n    model = glance(model),\n    coefficients = tidy(model),\n    observations = augment(model)\n  )\n}\n\n# Call groom_model on model, assigning to 3 variables\nc(mdl, cff, obs) %<-% groom_model(model)\n#c(var1, var2, var3) %<-% fn(args)\n\n# See these individual variables\nmdl; cff; obs"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#returning-metadata",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#returning-metadata",
    "title": "13  Return Values and Scope",
    "section": "13.5 Returning metadata",
    "text": "13.5 Returning metadata\nSometimes you want to return multiple things from a function, but you want the result to have a particular class (for example, a data frame or a numeric vector), so returning a list isn’t appropriate. This is common when you have a result plus metadata about the result. (Metadata is “data about the data”. For example, it could be the file a dataset was loaded from, or the username of the person who created the variable, or the number of iterations for an algorithm to converge.)\nIn that case, you can store the metadata in attributes. Recall the syntax for assigning attributes is as follows.\n\nattr(object, “attribute_name”) <- attribute_value"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#instructions-100-xp-3",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#instructions-100-xp-3",
    "title": "13  Return Values and Scope",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUpdate pipeable_plot() so the result has an attribute named “formula” with the value of formula.\nplt_dist_vs_speed, that you previously created, is shown. Examine its updated structure.\n\n\n\nE4.R\n\npipeable_plot <- function(data, formula) {\n  plot(formula, data)\n  # Add a \"formula\" attribute to data\n  attr(data, \"formula\") <- formula\n  invisible(data)\n}\n\n# From previous exercise\nplt_dist_vs_speed <- cars %>% \n  pipeable_plot(dist ~ speed)\n\n# Examine the structure of the result\nstr(plt_dist_vs_speed)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#creating-and-exploring-environments",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#creating-and-exploring-environments",
    "title": "13  Return Values and Scope",
    "section": "13.6 Creating and exploring environments",
    "text": "13.6 Creating and exploring environments\nEnvironments are used to store other variables. Mostly, you can think of them as lists, but there’s an important extra property that is relevant to writing functions. Every environment has a parent environment (except the empty environment, at the root of the environment tree). This determines which variables R know about at different places in your code.\nFacts about the Republic of South Africa are contained in capitals, national_parks, and population."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#instructions-100-xp-4",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#instructions-100-xp-4",
    "title": "13  Return Values and Scope",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nCreate rsa_lst, a named list from capitals, national_parks, and population. Use those values as the names.\nList the structure of each element of rsa_lst using ls.str().\nConvert the list to an environment, rsa_env, using list2env().\nList the structure of each element of rsa_env\nFind the parent environment of rsa_env and print its name.\n\n\n\nE5.R\n\n# Add capitals, national_parks, & population to a named list\nrsa_lst <- list(\n  capitals = capitals,\n  national_parks = national_parks,\n  population = population\n)\n\n# List the structure of each element of rsa_lst\nls.str(rsa_lst)\n\n# From previous step\nrsa_lst <- list(\n  capitals = capitals,\n  national_parks = national_parks,\n  population = population\n)\n\n# Convert the list to an environment\nrsa_env <- list2env(rsa_lst)\n\n# List the structure of each variable\nls.str(rsa_env)\n\n# From previous steps\nrsa_lst <- list(\n  capitals = capitals,\n  national_parks = national_parks,\n  population = population\n)\nrsa_env <- list2env(rsa_lst)\n\n# Find the parent environment of rsa_env\nparent <- parent.env(rsa_env)\nenvironmentName(parent)\n\n# Print its name\nprint(environmentName)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#do-variables-exist",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#do-variables-exist",
    "title": "13  Return Values and Scope",
    "section": "13.7 Do variables exist?",
    "text": "13.7 Do variables exist?\nIf R cannot find a variable in the current environment, it will look in the parent environment, then the grandparent environment, and so on until it finds it.\nrsa_env has been modified so it includes capitals and national_parks, but not population."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#instructions-100-xp-5",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#instructions-100-xp-5",
    "title": "13  Return Values and Scope",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nCheck if population exists in rsa_env, using default inheritance rules.\nCheck if population exists in rsa_env, ignoring inheritance.\n\n\n\nE6.R\n\n# Compare the contents of the global environment and rsa_env\nls.str(globalenv())\nls.str(rsa_env)\n\n# Does population exist in rsa_env?\nexists(\"population\", envir = rsa_env)\n\n# Does population exist in rsa_env, ignoring inheritance?\nexists(\"population\", envir = rsa_env,inherits = FALSE)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#variable-precedence-1",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#variable-precedence-1",
    "title": "13  Return Values and Scope",
    "section": "13.8 Variable precedence 1",
    "text": "13.8 Variable precedence 1\nConsider this code, run in a fresh R session.\n\nx_plus_y <- function(x) { y <- 3 x + y } y <- 7\n\nIf you now call x_plus_y(5), what is the result?"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#answer-the-question-50xp",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#answer-the-question-50xp",
    "title": "13  Return Values and Scope",
    "section": "13.9 Answer the question 50XP",
    "text": "13.9 Answer the question 50XP\nPossible Answers\n\nRespuesta\n\n\n\nAn error is thrown."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#variable-precedence-2",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#variable-precedence-2",
    "title": "13  Return Values and Scope",
    "section": "13.10 Variable precedence 2",
    "text": "13.10 Variable precedence 2\nConsider this (slightly different) code, run in a fresh R session.\nx_plus_y <- function(x) { x <- 6 y <- 3 x + y } y <- 7 If you now call x_plus_y(5), what is the result?"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C3.html#answer-the-question-50xp-1",
    "href": "Introduction_to_Writing_Functions_in_R_C3.html#answer-the-question-50xp-1",
    "title": "13  Return Values and Scope",
    "section": "13.11 Answer the question 50XP",
    "text": "13.11 Answer the question 50XP\nPossible Answers\n\n\nrespuesta\n\nAn error is thrown."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#converting-areas-to-metric-1",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#converting-areas-to-metric-1",
    "title": "15  Case Study on Grain Yields",
    "section": "15.1 Converting areas to metric 1",
    "text": "15.1 Converting areas to metric 1\nIn this chapter, you’ll be working with grain yield data from the United States Department of Agriculture, National Agricultural Statistics Service. Unfortunately, they report all areas in acres. So, the first thing you need to do is write some utility functions to convert areas in acres to areas in hectares.\nTo solve this exercise, you need to know the following:\nThere are 4840 square yards in an acre. There are 36 inches in a yard and one inch is 0.0254 meters. There are 10000 square meters in a hectare."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp",
    "title": "15  Case Study on Grain Yields",
    "section": "15.2 Instructions 100 XP",
    "text": "15.2 Instructions 100 XP\n\nWrite a function, acres_to_sq_yards(), to convert areas in acres to areas in square yards. This should take a single argument, acres.\nWrite a function, yards_to_meters(), to convert distances in yards to distances in meters. This should take a single argument, yards.\nWrite a function, sq_meters_to_hectares(), to convert areas in square meters to areas in hectares. This should take a single argument, sq_meters.\n\n\n\nE1.R\n\n# Write a function to convert acres to sq. yards\nacres_to_sq_yards <- function(x) {\n  x * 4840\n}\n\n\n# Write a function to convert yards to meters\nyards_to_meters <- function(x) {\n  x * 36*0.0254\n}\n\n# Write a function to convert sq. meters to hectares\nsq_meters_to_hectares <- function(sq_meters) {\n  (sq_meters)/10000\n}"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#converting-areas-to-metric-2",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#converting-areas-to-metric-2",
    "title": "15  Case Study on Grain Yields",
    "section": "15.3 Converting areas to metric 2",
    "text": "15.3 Converting areas to metric 2\nYou’re almost there with creating a function to convert acres to hectares. You need another utility function to deal with getting from square yards to square meters. Then, you can bring everything together to write the overall acres-to-hectares conversion function. Finally, in the next exercise you’ll be calculating area conversions in the denominator of a ratio, so you’ll need a harmonic acre-to-hectare conversion function.\nFree hints: magrittr’s raise_to_power() will be useful here. The last step is similar to Chapter 2’s Harmonic Mean.\nThe three utility functions from the last exercise (acres_to_sq_yards(), yards_to_meters(), and sq_meters_to_hectares()) are available, as is your get_reciprocal() from Chapter 2. magrittr is loaded."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-1",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-1",
    "title": "15  Case Study on Grain Yields",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nWrite a function to convert distance in square yards to square meters. It should take the square root of the input, then convert yards to meters, then square the result.\nWrite a function to convert areas in acres to hectares. The function should convert the input from acres to square yards, then to square meters, then to hectares.\nWrite a function to harmonically convert areas in acres to hectares. The function should get the reciprocal of the input, then convert from acres to hectares, then get the reciprocal again.\n\n\n\nE2.R\n\n# Write a function to convert sq. yards to sq. meters\nsq_yards_to_sq_meters <- function(sq_yards) {\n  sq_yards %>%\n    # Take the square root\n    sqrt() %>%\n    # Convert yards to meters\n    yards_to_meters() %>%\n    # Square it\n    raise_to_power(2)\n     }\n     \n# Load the function from the previous step\nload_step2()\n\n# Write a function to convert acres to hectares\nacres_to_hectares <- function(acres) {\n  acres %>%\n    # Convert acres to sq yards\n    acres_to_sq_yards() %>%\n    # Convert sq yards to sq meters\n    sq_yards_to_sq_meters() %>%\n    # Convert sq meters to hectares\n    sq_meters_to_hectares()\n}\n\n# Load the functions from the previous steps\nload_step3()\n\n# Define a harmonic acres to hectares function\nharmonic_acres_to_hectares <- function(acres) {\n  acres %>% \n    # Get the reciprocal\n    get_reciprocal() %>%\n    # Convert acres to hectares\n    acres_to_hectares() %>% \n    # Get the reciprocal again\n    get_reciprocal()\n}"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#converting-yields-to-metric",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#converting-yields-to-metric",
    "title": "15  Case Study on Grain Yields",
    "section": "15.4 Converting yields to metric",
    "text": "15.4 Converting yields to metric\nThe yields in the NASS corn data are also given in US units, namely bushels per acre. You’ll need to write some more utility functions to convert this unit to the metric unit of kg per hectare.\nBushels historically meant a volume of 8 gallons, but in the context of grain, they are now defined as masses. This mass differs for each grain! To solve this exercise, you need to know these facts.\nOne pound (lb) is 0.45359237 kilograms (kg). One bushel is 48 lbs of barley, 56 lbs of corn, or 60 lbs of wheat. magrittr is loaded."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-2",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-2",
    "title": "15  Case Study on Grain Yields",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nWrite a function to convert masses in lb to kg. This should take a single argument, lbs.\nWrite a function to convert masses in bushels to lbs. This should take two arguments, bushels and crop. It should define a lookup vector of scale factors for each crop (barley, corn, wheat), extract the scale factor for the crop, then multiply this by the number of bushels.\nWrite a function to convert masses in bushels to kgs. This should take two arguments, bushels and crop. It should convert the mass in bushels to lbs then to kgs.\nWrite a function to convert yields in bushels/acre to kg/ha. The arguments should be bushels_per_acre and crop. Three choices of crop should be allowed: “barley”, “corn”, and “wheat”. It should match the crop argument, then convert bushels to kgs, then convert harmonic acres to hectares.\n\n\n\nE3.R\n\n# Write a function to convert lb to kg\nlbs_to_kgs <- function(lbs) {lbs * 0.45359237}\n\n# Write a function to convert bushels to lbs\nbushels_to_lbs <- function(bushels, crop) {\n  # Define a lookup table of scale factors\n  c(barley = 48, corn = 56, wheat = 60) %>%\n    # Extract the value for the crop\n    extract(crop) %>%\n    # Multiply by the no. of bushels\n    multiply_by(bushels)\n}\n\n# Load fns defined in previous steps\nload_step3()\n\n# Write a function to convert bushels to kg\nbushels_to_kgs <- function(bushels, crop) {\n  bushels %>%\n    # Convert bushels to lbs for this crop\n    bushels_to_lbs(crop) %>%\n    # Convert lbs to kgs\n    lbs_to_kgs()\n}\n\n# Load fns defined in previous steps\nload_step4()\n\n# Write a function to convert bushels/acre to kg/ha\nbushels_per_acre_to_kgs_per_hectare <- function(bushels_per_acre, \ncrop = c(\"barley\", \"corn\", \"wheat\")) {\n  # Match the crop argument\n  crop <- match.arg(crop)\n  bushels_per_acre %>%\n    # Convert bushels to kgs for this crop\n    bushels_to_kgs(crop) %>%\n    # Convert harmonic acres to ha\n    harmonic_acres_to_hectares()\n}"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#applying-the-unit-conversion",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#applying-the-unit-conversion",
    "title": "15  Case Study on Grain Yields",
    "section": "15.5 Applying the unit conversion",
    "text": "15.5 Applying the unit conversion\nNow that you’ve written some functions, it’s time to apply them! The NASS corn dataset is available, and you can fortify it (jargon for “adding new columns”) with metrics areas and yields.\nThis fortification process can also be turned into a function, so you’ll define a function for this, and test it on the NASS wheat dataset."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-3",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-3",
    "title": "15  Case Study on Grain Yields",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nLook at the corn dataset. Add two columns: farmed_area_ha should be farmed_area_acres converted to hectares; yield_kg_per_ha should be yield_bushels_per_acre converted to kilograms per hectare.\nWrap the mutation code into a function called fortify_with_metric_units that takes two arguments, data and crop with no defaults. (In the function body, swap corn for the data argument and pass the function’s local crop variable to the crop argument.)\nUse fortify_with_metric_units() on the wheat dataset.\n\n\n\nE4.R\n\n# View the corn dataset\nglimpse(corn)\n\ncorn %>%\n  # Add some columns\n  mutate(\n    # Convert farmed area from acres to ha\n    farmed_area_ha = acres_to_hectares(farmed_area_acres),\n    # Convert yield from bushels/acre to kg/ha\n    yield_kg_per_ha = bushels_per_acre_to_kgs_per_hectare(\n      yield_bushels_per_acre,\n      crop = \"corn\"\n    )\n  )\n  \n# Wrap this code into a function\nfortify_with_metric_units <- function(data, crop) {\n  data %>%\n    mutate(\n      farmed_area_ha = acres_to_hectares(farmed_area_acres),\n      yield_kg_per_ha = bushels_per_acre_to_kgs_per_hectare(\n        yield_bushels_per_acre, \n        crop = crop\n      )\n    )\n}\n\n# Try it on the wheat dataset\nfortify_with_metric_units(wheat, crop = \"wheat\")"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#plotting-yields-over-time",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#plotting-yields-over-time",
    "title": "15  Case Study on Grain Yields",
    "section": "15.6 Plotting yields over time",
    "text": "15.6 Plotting yields over time\nNow that the units have been dealt with, it’s time to explore the datasets. An obvious question to ask about each crop is, “how do the yields change over time in each US state?” Let’s draw a line plot to find out!\nggplot2 is loaded, and corn and wheat datasets are available with metric units."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-4",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-4",
    "title": "15  Case Study on Grain Yields",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUsing the corn dataset, plot yield_kg_per_ha versus year. Add a line layer grouped by state and a smooth trend layer.\nTurn the plotting code into a function, plot_yield_vs_year(). This should accept a single argument, data.\n\n\n\nE5.R\n\n\n# Using corn, plot yield (kg/ha) vs. year\nggplot(corn, aes(year, yield_kg_per_ha)) +\n  # Add a line layer, grouped by state\n  geom_line(aes(group = state)) +\n  # Add a smooth trend layer\n  geom_smooth()\n  \n# Wrap this plotting code into a function\nplot_yield_vs_year <- function(data) {\n  ggplot(data, aes(year, yield_kg_per_ha)) +\n    geom_line(aes(group = state)) +\n    geom_smooth()\n}\n\n# Test it on the wheat dataset\nplot_yield_vs_year(wheat)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#a-nation-divided",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#a-nation-divided",
    "title": "15  Case Study on Grain Yields",
    "section": "15.7 A nation divided",
    "text": "15.7 A nation divided\nThe USA has a varied climate, so we might expect yields to differ between states. Rather than trying to reason about 50 states separately, we can use the USA Census Regions to get 9 groups.\nThe “Corn Belt”, where most US corn is grown is in the “West North Central” and “East North Central” regions. The “Wheat Belt” is in the “West South Central” region.\ndplyr is loaded, the corn and wheat datasets are available, as is usa_census_regions."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-5",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-5",
    "title": "15  Case Study on Grain Yields",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nInner join corn to usa_census_regions by “state”.\nTurn the code into a function, fortify_with_census_region(). This should accept a single argument, data.\n\n\n\nE6.R\n\n# Inner join the corn dataset to usa_census_regions by state\ncorn %>%\n  inner_join(usa_census_regions, by = \"state\")\n  \n# Wrap this code into a function\nfortify_with_census_region <- function(data){\n  data %>%\n    inner_join(usa_census_regions, by = \"state\")\n}\n\n# Try it on the wheat dataset\nfortify_with_census_region(wheat)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#plotting-yields-over-time-by-region",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#plotting-yields-over-time-by-region",
    "title": "15  Case Study on Grain Yields",
    "section": "15.8 Plotting yields over time by region",
    "text": "15.8 Plotting yields over time by region\nSo far, you have used a function to plot yields over time for each crop, and you’ve added a census_region column to the crop datasets. Now you are ready to look at how the yields change over time in each region of the USA.\nggplot2 is loaded. corn and wheat have been fortified with census regions. plot_yield_vs_year() is available."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-6",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-6",
    "title": "15  Case Study on Grain Yields",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse the function you wrote to plot yield versus year for the corn dataset, then facet the plot, wrapped by census_region.\nTurn the code into a function, plot_yield_vs_year_by_region(), that should take a single argument, data.\n\n\n\nE7.R\n\n# Plot yield vs. year for the corn dataset\nplot_yield_vs_year(corn) +\n  # Facet, wrapped by census region\n  facet_wrap(vars(census_region))\n  \n# Wrap this code into a function\nplot_yield_vs_year_by_region <- function(data) {\n\n  plot_yield_vs_year(data) +\n    facet_wrap(vars(census_region))\n}\n\n# Try it on the wheat dataset\nplot_yield_vs_year_by_region(wheat)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#running-a-model",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#running-a-model",
    "title": "15  Case Study on Grain Yields",
    "section": "15.9 Running a model",
    "text": "15.9 Running a model\nThe smooth trend line you saw in the plots of yield over time use a generalized additive model (GAM) to determine where the line should lie. This sort of model is ideal for fitting nonlinear curves. So we can make predictions about future yields, let’s explicitly run the model. The syntax for running this GAM takes the following form.\n\ngam(response ~ s(explanatory_var1) + explanatory_var2, data = dataset)\n\nHere, s() means “make the variable smooth”, where smooth very roughly means nonlinear.\nmgcv and dplyr are loaded; the corn and wheat datasets are available."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-7",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-7",
    "title": "15  Case Study on Grain Yields",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nRun a GAM of yield_kg_per_ha versus smoothed year and census region, using the corn dataset.\nWrap the modeling code into a function, run_gam_yield_vs_year_by_region. This should take a single argument, data, with no default.\n\n\n\nE8.R\n\n# Run a generalized additive model of yield vs. smoothed year and census region\n\ngam(yield_kg_per_ha ~ s(year) + census_region, data = corn)\n\n# Wrap the model code into a function\nrun_gam_yield_vs_year_by_region <- function(data){\n  gam(yield_kg_per_ha ~ s(year) + census_region, data = corn)\n}\n\n# Try it on the wheat dataset\nrun_gam_yield_vs_year_by_region(wheat)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#making-yield-predictions",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#making-yield-predictions",
    "title": "15  Case Study on Grain Yields",
    "section": "15.10 Making yield predictions",
    "text": "15.10 Making yield predictions\nThe fun part of modeling is using the models to make predictions. You can do this using a call to predict(), in the following form.\npredict(model, cases_to_predict, type = “response”) mgcv and dplyr are loaded; GAMs of the corn and wheat datasets are available as corn_model and wheat_model. A character vector of census regions is stored as census_regions."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-8",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-8",
    "title": "15  Case Study on Grain Yields",
    "section": "15.11 Instructions 100 XP",
    "text": "15.11 Instructions 100 XP\n\nIn predict_this, set the prediction year to 2050.\nPredict the yield using corn_model and the cases specified in predict_this.\nMutate predict_this to add the prediction vector as a new column named pred_yield_kg_per_ha.\nWrap the script into a function, predict_yields. It should take two arguments, model and year, with no defaults. Remember to update 2050 to the year argument. Try predict_yields() on wheat_model with year set to 2050.\n\n\n\nE9.R\n\n# Make predictions in 2050  \npredict_this <- data.frame(\n  year = 2050,\n  census_region = census_regions\n) \n\n# Predict the yield\npred_yield_kg_per_ha <- predict(corn_model, predict_this, type = \"response\")\n\npredict_this %>%\n  # Add the prediction as a column of predict_this \n    mutate(pred_yield_kg_per_ha = pred_yield_kg_per_ha)\n\n# Wrap this prediction code into a function\npredict_yields <- function(model, year) {\n  predict_this <- data.frame(\n    year = 2050,\n    census_region = census_regions\n  ) \n  pred_yield_kg_per_ha <- predict(model, predict_this, type = \"response\")\n  predict_this %>%\n    mutate(pred_yield_kg_per_ha = pred_yield_kg_per_ha)\n}\n\n# Try it on the wheat dataset\npredict_yields(wheat_model,2050)"
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#do-it-all-over-again",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#do-it-all-over-again",
    "title": "15  Case Study on Grain Yields",
    "section": "15.12 Do it all over again",
    "text": "15.12 Do it all over again\nHopefully, by now, you’ve realized that the real benefit to writing functions is that you can reuse your code easily. Now you are going to rerun the whole analysis from this chapter on a new crop, barley. Since all the infrastructure is in place, that’s less effort than it sounds!\nBarley prefers a cooler climate compared to corn and wheat and is commonly grown in the US mountain states of Idaho and Montana.\ndplyr and ggplot2, and mgcv are loaded; fortify_with_metric_units(), fortify_with_census_region(), plot_yield_vs_year_by_region(), run_gam_yield_vs_year_by_region(), and predict_yields() are available."
  },
  {
    "objectID": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-9",
    "href": "Introduction_to_Writing_Functions_in_R_C4.html#instructions-100-xp-9",
    "title": "15  Case Study on Grain Yields",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFortify the barley data with metric units, then with census regions.\nUsing the fortified barley data, plot the yield versus year by census region.\nUsing the fortified barley data, run a GAM of yield versus year by census region, then predict the yields in 2050.\n\n\n\nE10.R\n\nfortified_barley <- barley %>% \n  # Fortify with metric units\n    fortify_with_metric_units() %>%\n  # Fortify with census regions\n  fortify_with_census_region()\n\n# See the result\nglimpse(fortified_barley)\n\n# From previous step\nfortified_barley <- barley %>% \n  fortify_with_metric_units() %>%\n  fortify_with_census_region()\n\n# Plot yield vs. year by region\nplot_yield_vs_year_by_region(fortified_barley)\n\n# From previous step\nfortified_barley <- barley %>% \n  fortify_with_metric_units() %>%\n  fortify_with_census_region()\n\nfortified_barley %>% \n  # Run a GAM of yield vs. year by region\n  run_gam_yield_vs_year_by_region()  %>% \n  # Make predictions of yields in 2050\n  predict_yields(2050)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C1.html#read.csv",
    "href": "Introduction_to_Importing_Data_in_R_C1.html#read.csv",
    "title": "16  Importing data from flat files with utils",
    "section": "16.1 read.csv",
    "text": "16.1 read.csv\nThe utils package, which is automatically loaded in your R session on startup, can import CSV files with the read.csv() function.\nIn this exercise, you’ll be working with swimming_pools.csv (view); it contains data on swimming pools in Brisbane, Australia (Source: data.gov.au). The file contains the column names in the first row. It uses a comma to separate values within rows.\nType dir() in the console to list the files in your working directory. You’ll see that it contains swimming_pools.csv, so you can start straight away."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C1.html#instructions-100-xp",
    "href": "Introduction_to_Importing_Data_in_R_C1.html#instructions-100-xp",
    "title": "16  Importing data from flat files with utils",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse read.csv() to import “swimming_pools.csv” as a data frame with the name pools.\nPrint the structure of pools using str().\n\n\n\nE1.R\n\n# Import swimming_pools.csv: pools\npools <- read.csv(\"swimming_pools.csv\")\n\n# Print the structure of pools\nstr(pools)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C1.html#stringsasfactors",
    "href": "Introduction_to_Importing_Data_in_R_C1.html#stringsasfactors",
    "title": "16  Importing data from flat files with utils",
    "section": "16.2 stringsAsFactors",
    "text": "16.2 stringsAsFactors\nWith stringsAsFactors, you can tell R whether it should convert strings in the flat file to factors.\nFor all importing functions in the utils package, this argument is TRUE, which means that you import strings as factors. This only makes sense if the strings you import represent categorical variables in R. If you set stringsAsFactors to FALSE, the data frame columns corresponding to strings in your text file will be character.\nYou’ll again be working with the swimming_pools.csv (view) file. It contains two columns (Name and Address), which shouldn’t be factors."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C1.html#instructions-100-xp-1",
    "href": "Introduction_to_Importing_Data_in_R_C1.html#instructions-100-xp-1",
    "title": "16  Importing data from flat files with utils",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse read.csv() to import the data in “swimming_pools.csv” as a data frame called pools; make sure that strings are imported as characters, not as factors.\nUsing str(), display the structure of the dataset and check that you indeed get character vectors instead of factors.\n\n\n\nE2.R\n\n# Import swimming_pools.csv correctly: pools\npools <- read.csv(\"swimming_pools.csv\")\n\n# Check the structure of pools\nstr(pools)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C1.html#any-changes",
    "href": "Introduction_to_Importing_Data_in_R_C1.html#any-changes",
    "title": "16  Importing data from flat files with utils",
    "section": "16.3 Any changes?",
    "text": "16.3 Any changes?\nConsider the code below that loads data from swimming_pools.csv in two distinct ways:\n\nOption A\npools <- read.csv(“swimming_pools.csv”, stringsAsFactors = TRUE)\n\n\nOption B\npools <- read.csv(“swimming_pools.csv”, stringsAsFactors = FALSE)\n\nHow many variables in the resulting pools data frame have different types if you specify the stringsAsFactors argument differently?\nThe swimming_pools.csv (view) file is available in your current working directory so you can experiment in the console."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C1.html#instructions-50-xp",
    "href": "Introduction_to_Importing_Data_in_R_C1.html#instructions-50-xp",
    "title": "16  Importing data from flat files with utils",
    "section": "Instructions 50 XP",
    "text": "Instructions 50 XP\nPossible Answers\nJust one: Name.\nTwo variables: Name and Address. Respuesta\nThree columns: all but Longitude.\nAll four of them!"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C1.html#read.delim",
    "href": "Introduction_to_Importing_Data_in_R_C1.html#read.delim",
    "title": "16  Importing data from flat files with utils",
    "section": "16.4 read.delim",
    "text": "16.4 read.delim\nAside from .csv files, there are also the .txt files which are basically text files. You can import these functions with read.delim(). By default, it sets the sep argument to “ (fields in a record are delimited by tabs) and the header argument to TRUE (the first row contains the field names).\nIn this exercise, you will import hotdogs.txt (view), containing information on sodium and calorie levels in different hotdogs (Source: UCLA). The dataset has 3 variables, but the variable names are not available in the first line of the file. The file uses tabs as field separators."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C1.html#instructions-100-xp-2",
    "href": "Introduction_to_Importing_Data_in_R_C1.html#instructions-100-xp-2",
    "title": "16  Importing data from flat files with utils",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nImport the data in “hotdogs.txt” with read.delim(). Call the resulting data frame hotdogs. The variable names are not on the first line, so make sure to set the header argument appropriately. Call summary() on hotdogs. This will print out some summary statistics about all variables in the data frame.\n\n\nE3.R\n\n# Import hotdogs.txt: hotdogs\nhotdogs <- read.delim(\"hotdogs.txt\", header = FALSE)\n\n# Summarize hotdogs\nsummary(hotdogs)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C1.html#read.table",
    "href": "Introduction_to_Importing_Data_in_R_C1.html#read.table",
    "title": "16  Importing data from flat files with utils",
    "section": "16.5 read.table",
    "text": "16.5 read.table\nIf you’re dealing with more exotic flat file formats, you’ll want to use read.table(). It’s the most basic importing function; you can specify tons of different arguments in this function. Unlike read.csv() and read.delim(), the header argument defaults to FALSE and the sep argument is “” by default.\nUp to you again! The data is still hotdogs.txt (view). It has no column names in the first row, and the field separators are tabs. This time, though, the file is in the data folder inside your current working directory. A variable path with the location of this file is already coded for you."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C1.html#instructions-100-xp-3",
    "href": "Introduction_to_Importing_Data_in_R_C1.html#instructions-100-xp-3",
    "title": "16  Importing data from flat files with utils",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nFinish the read.table() call that’s been prepared for you. Use the path variable, and make sure to set sep correctly. Call head() on hotdogs; this will print the first 6 observations in the data frame.\n\n\nE4.R\n\n# Path to the hotdogs.txt file: path\npath <- file.path(\"data\", \"hotdogs.txt\")\n\n# Import the hotdogs.txt file: hotdogs\nhotdogs <- read.table(path, \n                      sep = \"\\t\", \n                      col.names = c(\"type\", \"calories\", \"sodium\"))\n\n# Call head() on hotdogs\nhead(hotdogs)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C1.html#arguments",
    "href": "Introduction_to_Importing_Data_in_R_C1.html#arguments",
    "title": "16  Importing data from flat files with utils",
    "section": "16.6 Arguments",
    "text": "16.6 Arguments\nLily and Tom are having an argument because they want to share a hot dog but they can’t seem to agree on which one to choose. After some time, they simply decide that they will have one each. Lily wants to have the one with the fewest calories while Tom wants to have the one with the most sodium.\nNext to calories and sodium, the hotdogs have one more variable: type. This can be one of three things: Beef, Meat, or Poultry, so a categorical variable: a factor is fine."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C1.html#instructions-100-xp-4",
    "href": "Introduction_to_Importing_Data_in_R_C1.html#instructions-100-xp-4",
    "title": "16  Importing data from flat files with utils",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFinish the read.delim() call to import the data in “hotdogs.txt”. It’s a tab-delimited file without names in the first row.\nThe code that selects the observation with the lowest calorie count and stores it in the variable lily is already available. It uses the function which.min(), that returns the index the smallest value in a vector.\nDo a similar thing for Tom: select the observation with the most sodium and store it in tom. Use which.max() this time.\nFinally, print both the observations lily and tom.\n\n\n\nE5.R\n\n# Finish the read.delim() call\nhotdogs <- read.delim(\"hotdogs.txt\", header = FALSE, col.names = c(\"type\", \n\"calories\", \"sodium\"))\n\n# Select the hot dog with the least calories: lily\nlily <- hotdogs[which.min(hotdogs$calories), ]\n\n# Select the observation with the most sodium: tom\ntom <- hotdogs[which.max(hotdogs$sodium), ]\n\n# Print lily and tom\nprint(lily)\n\nprint(tom)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C1.html#column-classes",
    "href": "Introduction_to_Importing_Data_in_R_C1.html#column-classes",
    "title": "16  Importing data from flat files with utils",
    "section": "16.7 Column classes",
    "text": "16.7 Column classes\nNext to column names, you can also specify the column types or column classes of the resulting data frame. You can do this by setting the colClasses argument to a vector of strings representing classes:\n\nread.delim(“my_file.txt”, colClasses = c(“character”, “numeric”, “logical”))\n\nThis approach can be useful if you have some columns that should be factors and others that should be characters. You don’t have to bother with stringsAsFactors anymore; just state for each column what the class should be.\nIf a column is set to “NULL” in the colClasses vector, this column will be skipped and will not be loaded into the data frame."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C1.html#instructions-100-xp-5",
    "href": "Introduction_to_Importing_Data_in_R_C1.html#instructions-100-xp-5",
    "title": "16  Importing data from flat files with utils",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nThe read.delim() call from before is already included and creates the hotdogs data frame. Go ahead and display the structure of hotdogs.\nEdit the second read.delim() call. Assign the correct vector to the colClasses argument. NA should be replaced with a character vector: c(“factor”, “NULL”, “numeric”).\nDisplay the structure of hotdogs2 and look for the difference.\n\n\n\nE6.R\n\n# Previous call to import hotdogs.txt\nhotdogs <- read.delim(\"hotdogs.txt\", header = FALSE, col.names = c(\"type\",\n\"calories\", \"sodium\"))\n\n# Display structure of hotdogs\nstr(hotdogs)\n\n# Edit the colClasses argument to import the data correctly: hotdogs2\nhotdogs2 <- read.delim(\"hotdogs.txt\", header = FALSE, \n                       col.names = c(\"type\", \"calories\", \"sodium\"),\n                       colClasses = c(\"factor\", \"NULL\", \"numeric\"))\n\n\n# Display structure of hotdogs2\nstr(hotdogs2)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#read_csv",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#read_csv",
    "title": "17  readr & data.table",
    "section": "17.1 read_csv",
    "text": "17.1 read_csv\nCSV files can be imported with read_csv(). It’s a wrapper function around read_delim() that handles all the details for you. For example, it will assume that the first row contains the column names.\nThe dataset you’ll be working with here is potatoes.csv (view). It gives information on the impact of storage period and cooking on potatoes’ flavor. It uses commas to delimit fields in a record, and contains column names in the first row. The file is available in your workspace. Remember that you can inspect your workspace with dir()."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp",
    "title": "17  readr & data.table",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nLoad the readr package with library(). You do not need to install the package, it is already installed on DataCamp’s servers. Import “potatoes.csv” using read_csv(). Assign the resulting data frame to the variable potatoes.\n\n\nE1.R\n\n# Load the readr package\nlibrary(readr)\n\n# Import potatoes.csv with read_csv(): potatoes\npotatoes <- read_csv(\"potatoes.csv\")"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#read_tsv",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#read_tsv",
    "title": "17  readr & data.table",
    "section": "17.2 read_tsv",
    "text": "17.2 read_tsv\nWhere you use read_csv() to easily read in CSV files, you use read_tsv() to easily read in TSV files. TSV is short for tab-separated values.\nThis time, the potatoes data comes in the form of a tab-separated values file; potatoes.txt (view) is available in your workspace. In contrast to potatoes.csv, this file does not contain columns names in the first row, though.\nThere’s a vector properties that you can use to specify these column names manually."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp-1",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp-1",
    "title": "17  readr & data.table",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nUse read_tsv() to import the potatoes data from potatoes.txt and store it in the data frame potatoes. In addition to the path to the file, you’ll also have to specify the col_names argument; you can use the properties vector for this. Call head() on potatoes to show the first observations of your dataset.\n\n\nE2.R\n\n# readr is already loaded\n\n# Column names\nproperties <- c(\"area\", \"temp\", \"size\", \"storage\", \"method\",\n                \"texture\", \"flavor\", \"moistness\")\n\n# Import potatoes.txt: potatoes\npotatoes <- read_tsv(\"potatoes.txt\", col_names = properties)\n\n# Call head() on potatoes\nhead(potatoes)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#read_delim",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#read_delim",
    "title": "17  readr & data.table",
    "section": "17.3 read_delim",
    "text": "17.3 read_delim\nJust as read.table() was the main utils function, read_delim() is the main readr function.\nread_delim() takes two mandatory arguments:\nfile: the file that contains the data delim: the character that separates the values in the data file You’ll again be working with potatoes.txt (view); the file uses tabs (“) to delimit values and does not contain column names in its first line. It’s available in your working directory so you can start right away. As before, the vector properties is available to set the col_names."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp-2",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp-2",
    "title": "17  readr & data.table",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nImport all the data in “potatoes.txt” using read_delim(); store the resulting data frame in potatoes. Print out potatoes.\n\n\nE3.R\n\n# readr is already loaded\n\n# Column names\nproperties <- c(\"area\", \"temp\", \"size\", \"storage\", \"method\",\n                \"texture\", \"flavor\", \"moistness\")\n\n# Import potatoes.txt using read_delim(): potatoes\npotatoes <- read_delim(\"potatoes.txt\", delim = \"\\t\", col_names = properties)\n\n# Print out potatoes\nprint(potatoes)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#skip-and-n_max",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#skip-and-n_max",
    "title": "17  readr & data.table",
    "section": "17.4 skip and n_max",
    "text": "17.4 skip and n_max\nThrough skip and n_max you can control which part of your flat file you’re actually importing into R.\n\nskip specifies the number of lines you’re ignoring in the flat file before actually starting to import data.\nn_max specifies the number of lines you’re actually importing.\n\nSay for example you have a CSV file with 20 lines, and set skip = 2 and n_max = 3, you’re only reading in lines 3, 4 and 5 of the file.\nWatch out: Once you skip some lines, you also skip the first line that can contain column names!\npotatoes.txt (view), a flat file with tab-delimited records and without column names, is available in your workspace."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp-3",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp-3",
    "title": "17  readr & data.table",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nFinish the first read_tsv() call to import observations 7, 8, 9, 10 and 11 from potatoes.txt.\n\n\nE4.R\n\n# readr is already loaded\n\n# Column names\nproperties <- c(\"area\", \"temp\", \"size\", \"storage\", \"method\",\n                \"texture\", \"flavor\", \"moistness\")\n\n# Import 5 observations from potatoes.txt: potatoes_fragment\npotatoes_fragment <- read_tsv(\"potatoes.txt\", skip = 6, n_max = 5,\ncol_names = properties)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#col_types",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#col_types",
    "title": "17  readr & data.table",
    "section": "17.5 col_types",
    "text": "17.5 col_types\nYou can also specify which types the columns in your imported data frame should have. You can do this with col_types. If set to NULL, the default, functions from the readr package will try to find the correct types themselves. You can manually set the types with a string, where each character denotes the class of the column: character, double, integer and logical. _ skips the column as a whole.\npotatoes.txt (view), a flat file with tab-delimited records and without column names, is again available in your workspace."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp-4",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp-4",
    "title": "17  readr & data.table",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nIn the second read_tsv() call, edit the col_types argument to import all columns as characters (c). Store the resulting data frame in potatoes_char. Print out the structure of potatoes_char and verify whether all column types are chr, short for character.\n\n\nE5.R\n\n# readr is already loaded\n\n# Column names\nproperties <- c(\"area\", \"temp\", \"size\", \"storage\", \"method\",\n                \"texture\", \"flavor\", \"moistness\")\n\n# Import all data, but force all columns to be character: potatoes_char\npotatoes_char <- read_tsv(\"potatoes.txt\", col_types = \"cccccccc\",\ncol_names = properties)\n\n# Print out structure of potatoes_char\nstr(potatoes_char)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#col_types-with-collectors",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#col_types-with-collectors",
    "title": "17  readr & data.table",
    "section": "17.6 col_types with collectors",
    "text": "17.6 col_types with collectors\nAnother way of setting the types of the imported columns is using collectors. Collector functions can be passed in a list() to the col_types argument of read_ functions to tell them how to interpret values in a column.\nFor a complete list of collector functions, you can take a look at the collector documentation. For this exercise you will need two collector functions:\n\ncol_integer(): the column should be interpreted as an integer.\ncol_factor(levels, ordered = FALSE): the column should be interpreted as a factor with levels.\n\nIn this exercise, you will work with hotdogs.txt (view), which is a tab-delimited file without column names in the first row."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp-5",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp-5",
    "title": "17  readr & data.table",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nhotdogs is created for you without setting the column types. Inspect its summary using the summary() function.\nTwo collector functions are defined for you: fac and int. Have a look at them, do you understand what they’re collecting?\nIn the second read_tsv() call, edit the col_types argument: Pass a list() with the elements fac, int and int, so the first column is imported as a factor, and the second and third column as integers.\nCreate a summary() of hotdogs_factor. Compare this to the summary of hotdogs.\n\n\n\nE6.R\n\n# readr is already loaded\n\n# Import without col_types\nhotdogs <- read_tsv(\"hotdogs.txt\", col_names = c(\"type\", \"calories\", \"sodium\"))\n\n# Display the summary of hotdogs\nsummary(hotdogs)\n\n# The collectors you will need to import the data\nfac <- col_factor(levels = c(\"Beef\", \"Meat\", \"Poultry\"))\nint <- col_integer()\n\n# Edit the col_types argument to import the data correctly: hotdogs_factor\nhotdogs_factor <- read_tsv(\"hotdogs.txt\",\n                           col_names = c(\"type\", \"calories\", \"sodium\"),\n                           col_types = list(fac, int, int))\n\n# Display the summary of hotdogs_factor\nsummary(hotdogs_factor)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#fread",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#fread",
    "title": "17  readr & data.table",
    "section": "17.7 fread",
    "text": "17.7 fread\nYou still remember how to use read.table(), right? Well, fread() is a function that does the same job with very similar arguments. It is extremely easy to use and blazingly fast! Often, simply specifying the path to the file is enough to successfully import your data.\nDon’t take our word for it, try it yourself! You’ll be working with the potatoes.csv (view) file, that’s available in your workspace. Fields are delimited by commas, and the first line contains the column names."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp-6",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp-6",
    "title": "17  readr & data.table",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse library() to load (NOT install) the data.table package. You do not need to install the package, it is already installed on DataCamp’s servers.\nImport “potatoes.csv” with fread(). Simply pass it the file path and see if it worked. Store the result in a variable potatoes.\nPrint out potatoes.\n\n\n\nE7.R\n\n# load the data.table package using library()\nlibrary(data.table)\n\n# Import potatoes.csv with fread(): potatoes\npotatoes <- fread(\"potatoes.csv\")\n\n# Print out potatoes\nprint(potatoes)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#fread-more-advanced-use",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#fread-more-advanced-use",
    "title": "17  readr & data.table",
    "section": "17.8 fread: more advanced use",
    "text": "17.8 fread: more advanced use\nNow that you know the basics about fread(), you should know about two arguments of the function: drop and select, to drop or select variables of interest.\nSuppose you have a dataset that contains 5 variables and you want to keep the first and fifth variable, named “a” and “e”. The following options will all do the trick:\n\nfread(“path/to/file.txt”, drop = 2:4) fread(“path/to/file.txt”, select = c(1, 5)) fread(“path/to/file.txt”, drop = c(“b”, “c”, “d”)) fread(“path/to/file.txt”, select = c(“a”, “e”))\n\nLet’s stick with potatoes since we’re particularly fond of them here at DataCamp. The data is again available in the file potatoes.csv (view), containing comma-separated records."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp-7",
    "href": "Introduction_to_Importing_Data_in_R_C2.html#instructions-100-xp-7",
    "title": "17  readr & data.table",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nUsing fread() and select or drop as arguments, only import the texture and moistness columns of the flat file. They correspond to the columns 6 and 8 in “potatoes.csv”. Store the result in a variable potatoes. plot() 2 columns of the potatoes data frame: texture on the x-axis, moistness on the y-axis. Use the dollar sign notation twice. Feel free to name your axes and plot.\n\n\nE8.R\n\n# fread is already loaded\n\n# Import columns 6 and 8 of potatoes.csv: potatoes\npotatoes<- fread(\"potatoes.csv\", select = c(6, 8))\n\n# Plot texture (x) and moistness (y) of potatoes\nplot(potatoes$texture, potatoes$moistness)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C3.html#selecting-columns",
    "href": "Introduction_to_Importing_Data_in_R_C3.html#selecting-columns",
    "title": "18  Importing Excel data",
    "section": "18.1 Selecting columns",
    "text": "18.1 Selecting columns\nUsing the select() verb, we can answer interesting questions about our dataset by focusing in on related groups of verbs. The colon (:) is useful for getting many columns at a time."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C3.html#instructions-100-xp",
    "href": "Introduction_to_Importing_Data_in_R_C3.html#instructions-100-xp",
    "title": "18  Importing Excel data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse glimpse() to examine all the variables in the counties table.\nSelect the columns for state, county, population, and (using a colon) all five of those industry-related variables; there are five consecutive variables in the table related to the industry of people’s work: professional, service, office, construction, and production.\nArrange the table in descending order of service to find which counties have the highest rates of working in the service industry.\n\n\n\nE1.R\n\n# Glimpse the counties table\nglimpse(counties)\n\ncounties %>%\n  # Select state, county, population, and industry-related columns\n  select(state, county, population,professional:production) %>%\n  # Arrange service in descending order \n   arrange(desc(service))"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C3.html#select-helpers",
    "href": "Introduction_to_Importing_Data_in_R_C3.html#select-helpers",
    "title": "18  Importing Excel data",
    "section": "18.2 Select helpers",
    "text": "18.2 Select helpers\nIn the video you learned about the select helper starts_with(). Another select helper is ends_with(), which finds the columns that end with a particular string."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C3.html#instructions-100-xp-1",
    "href": "Introduction_to_Importing_Data_in_R_C3.html#instructions-100-xp-1",
    "title": "18  Importing Excel data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nSelect the columns state, county, population, and all those that end with work.\nFilter just for the counties where at least 50% of the population is engaged in public work.\n\n\n\nE2.R\n\ncounties %>%\n  # Select the state, county, population, and those ending with \"work\"\n  select(state, county, population,ends_with(\"work\")) %>%\n  # Filter for counties that have at least 50% of people engaged in public work\n  filter(public_work  >= 50)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C3.html#renaming-a-column-after-count",
    "href": "Introduction_to_Importing_Data_in_R_C3.html#renaming-a-column-after-count",
    "title": "18  Importing Excel data",
    "section": "18.3 Renaming a column after count",
    "text": "18.3 Renaming a column after count\nThe rename() verb is often useful for changing the name of a column that comes out of another verb, such as count(). In this exercise, you’ll rename the default n column generated from count() to something more descriptive."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C3.html#instructions-100-xp-2",
    "href": "Introduction_to_Importing_Data_in_R_C3.html#instructions-100-xp-2",
    "title": "18  Importing Excel data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse count() to determine how many counties are in each state.\nNotice the n column in the output; use rename() to rename that to num_counties.\n\n\n\nE3.R\n\ncounties %>%\n  # Count the number of counties in each state\n  count(state)\n  \ncounties %>%\n  # Count the number of counties in each state\n  count(state) %>%\n  # Rename the n column to num_counties\n  rename(num_counties = n)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C3.html#renaming-a-column-as-part-of-a-select",
    "href": "Introduction_to_Importing_Data_in_R_C3.html#renaming-a-column-as-part-of-a-select",
    "title": "18  Importing Excel data",
    "section": "18.4 Renaming a column as part of a select",
    "text": "18.4 Renaming a column as part of a select\nrename() isn’t the only way you can choose a new name for a column; you can also choose a name as part of a select()."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C3.html#instructions-100-xp-3",
    "href": "Introduction_to_Importing_Data_in_R_C3.html#instructions-100-xp-3",
    "title": "18  Importing Excel data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nSelect the columns state, county, and poverty from the counties dataset; in the same step, rename the poverty column to poverty_rate.\n\n\n\nE4.R\n\ncounties %>%\n  # Select state, county, and poverty as poverty_rate\n   select(state, county, poverty_rate = poverty)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C3.html#using-transmute",
    "href": "Introduction_to_Importing_Data_in_R_C3.html#using-transmute",
    "title": "18  Importing Excel data",
    "section": "18.5 Using transmute",
    "text": "18.5 Using transmute\nAs you learned in the video, the transmute verb allows you to control which variables you keep, which variables you calculate, and which variables you drop."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C3.html#instructions-100-xp-4",
    "href": "Introduction_to_Importing_Data_in_R_C3.html#instructions-100-xp-4",
    "title": "18  Importing Excel data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nKeep only the state, county, and population columns, and add a new column, density, that contains the population per land_area.\nFilter for only counties with a population greater than one million.\nSort the table in ascending order of density.\n\n\n\nE5.R\n\ncounties %>%\n  # Keep the state, county, and populations columns, and add a density column\n transmute(state, county, population, density = population / land_area) %>%\n  # Filter for counties with a population greater than one million \n  filter(population>1000000)%>%\n  # Sort density in ascending order \n  arrange(density)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C3.html#choosing-among-the-four-verbs",
    "href": "Introduction_to_Importing_Data_in_R_C3.html#choosing-among-the-four-verbs",
    "title": "18  Importing Excel data",
    "section": "18.6 Choosing among the four verbs",
    "text": "18.6 Choosing among the four verbs\nIn this chapter you’ve learned about the four verbs: select, mutate, transmute, and rename. Here, you’ll choose the appropriate verb for each situation. You won’t need to change anything inside the parentheses."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C3.html#instructions-100-xp-5",
    "href": "Introduction_to_Importing_Data_in_R_C3.html#instructions-100-xp-5",
    "title": "18  Importing Excel data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nChoose the right verb for changing the name of the unemployment column to unemployment_rate\nChoose the right verb for keeping only the columns state, county, and the ones containing poverty.\nCalculate a new column called fraction_women with the fraction of the population made up of women, without dropping any columns.\nKeep only three columns: the state, county, and employed / population, which you’ll call employment_rate.\n\n\n\nE6.R\n\n# Change the name of the unemployment column\ncounties %>%\n  rename(unemployment_rate = unemployment)\n\n# Keep the state and county columns, and the columns containing poverty\ncounties %>%\n  select(state, county, contains(\"poverty\"))\n\n# Calculate the fraction_women column without dropping the other columns\ncounties %>%\n  mutate(fraction_women = women / population)\n\n# Keep only the state, county, and employment_rate columns\ncounties %>%\n  transmute(state, county, employment_rate = employed / population)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#filtering-and-arranging-for-one-year",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#filtering-and-arranging-for-one-year",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "19.1 Filtering and arranging for one year",
    "text": "19.1 Filtering and arranging for one year\nThe dplyr verbs you’ve learned are useful for exploring data. For instance, you could find out the most common names in a particular year."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFilter for only the year 1990.\nSort the table in descending order of the number of babies born.\n\n\n\nE1.R\n\nbabynames %>%\n  # Filter for the year 1990\n  filter(year == 1990) %>%\n  # Sort the number column in descending order \n  arrange(desc(number))"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#finding-the-most-popular-names-each-year",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#finding-the-most-popular-names-each-year",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "19.2 Finding the most popular names each year",
    "text": "19.2 Finding the most popular names each year\nYou saw that you could use filter() and arrange() to find the most common names in one year. However, you could also use group_by() and slice_max() to find the most common name in every year."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp-1",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp-1",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse group_by() and slice_max() to find the most common name for US babies in each year.\n\n\n\nE2.R\n\nbabynames %>%\n  # Find the most common name in each year\n  group_by(year) %>%\n  slice_max(number, n = 1)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#visualizing-names-with-ggplot2",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#visualizing-names-with-ggplot2",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "19.3 Visualizing names with ggplot2",
    "text": "19.3 Visualizing names with ggplot2\nThe dplyr package is very useful for exploring data, but it’s especially useful when combined with other tidyverse packages like ggplot2."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp-2",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp-2",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFilter for only the names Steven, Thomas, and Matthew, and assign it to an object called selected_names.\nVisualize those three names as a line plot over time, with each name represented by a different color.\n\n\n\nE3.R\n\nselected_names <- babynames %>%\n  # Filter for the names Steven, Thomas, and Matthew \n  filter(name %in% c(\"Steven\", \"Thomas\", \"Matthew\"))\n  \n\nselected_names <- babynames %>%\n  # Filter for the names Steven, Thomas, and Matthew \n  filter(name %in% c(\"Steven\", \"Thomas\", \"Matthew\"))\n\n# Plot the names using a different color for each name\nggplot(selected_names, aes(x = year, y = number, color = name)) +\n  geom_line()"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#finding-the-year-each-name-is-most-common",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#finding-the-year-each-name-is-most-common",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "19.4 Finding the year each name is most common",
    "text": "19.4 Finding the year each name is most common\nIn an earlier video, you learned how to filter for a particular name to determine the frequency of that name over time. Now, you’re going to explore which year each name was the most common.\nTo do this, you’ll be combining the grouped mutate approach with a slice_max()."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp-3",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp-3",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFirst, calculate the total number of people born in that year in this dataset as year_total.\nNext, use year_total to calculate the fraction of people born in each year that have each name.\nNow use your newly calculated fraction column, in combination with slice_max(), to identify the year each name was most common.\n\n\n\nE4.R\n\n# Calculate the fraction of people born each year with the same name\nbabynames %>%\n  group_by(year) %>%\n  mutate(year_total = sum(number)) %>%\n  ungroup() %>%\n  mutate(fraction = number / year_total)\n  \n\n# Calculate the fraction of people born each year with the same name\nbabynames %>%\n  group_by(year) %>%\n  mutate(year_total = sum(number)) %>%\n  ungroup() %>%\n  mutate(fraction = number / year_total) %>%\n  # Find the year each name is most common\n  group_by(name) %>%\n  slice_max(fraction, n = 1)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#adding-the-total-and-maximum-for-each-name",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#adding-the-total-and-maximum-for-each-name",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "19.5 Adding the total and maximum for each name",
    "text": "19.5 Adding the total and maximum for each name\nIn the video, you learned how you could group by the year and use mutate() to add a total for that year.\nIn these exercises, you’ll learn to normalize by a different, but also interesting metric: you’ll divide each name by the maximum for that name. This means that every name will peak at 1.\nOnce you add new columns, the result will still be grouped by name. This splits it into 48,000 groups, which actually makes later steps like mutates slower."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp-4",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp-4",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse a grouped mutate to add two columns:\nname_total: the sum of the number of babies born with that name in the entire dataset.\nname_max: the maximum number of babies born with that name in any year.\nAdd another step to ungroup the table.\nAdd a column called fraction_max containing the number in the year divided by name_max.\n\n\n\nE5.R\n\nbabynames %>%\n  # Add columns name_total and name_max for each name\n  group_by(name) %>%\n  mutate(name_total = sum(number),\n         name_max = max(number))\n         \n\nbabynames %>%\n  # Add columns name_total and name_max for each name\n  group_by(name) %>%\n  mutate(name_total = sum(number),\n         name_max = max(number)) %>%\n  # Ungroup the table \n  ungroup() %>%\n  # Add the fraction_max column containing the number by the name maximum \n  mutate(fraction_max = number / name_max)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#visualizing-the-normalized-change-in-popularity",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#visualizing-the-normalized-change-in-popularity",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "19.6 Visualizing the normalized change in popularity",
    "text": "19.6 Visualizing the normalized change in popularity\nYou picked a few names and calculated each of them as a fraction of their peak. This is a type of “normalizing” a name, where you’re focused on the relative change within each name rather than the overall popularity of the name.\nIn this exercise, you’ll visualize the normalized popularity of each name. Your work from the previous exercise, names_normalized, has been provided for you.\n\nnames_normalized <- babynames %>% group_by(name) %>% mutate(name_total = sum(number), name_max = max(number)) %>% ungroup() %>% mutate(fraction_max = number / name_max)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp-5",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp-5",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFilter the names_normalized table to limit it to the three names Steven, Thomas, and Matthew.\nCreate a line plot to visualize fraction_max over time, colored by name.\n\n\n\nE6.R\n\nnames_filtered <- names_normalized %>%\n  # Filter for the names Steven, Thomas, and Matthew\n  filter(name %in% c(\"Steven\", \"Thomas\", \"Matthew\"))\n\n# Visualize these names over time\nggplot(names_filtered, aes(x = year, y = fraction_max, color = name)) +\n  geom_line()"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#using-ratios-to-describe-the-frequency-of-a-name",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#using-ratios-to-describe-the-frequency-of-a-name",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "19.7 Using ratios to describe the frequency of a name",
    "text": "19.7 Using ratios to describe the frequency of a name\nIn the video, you learned how to find the difference in the frequency of a baby name between consecutive years. What if instead of finding the difference, you wanted to find the ratio?\nYou’ll start with the babynames_fraction data already, so that you can consider the popularity of each name within each year."
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp-6",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp-6",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nArrange the data in ascending order of name and then year.\nGroup by name so that your mutate works within each name.\nAdd a column ratio containing the ratio (not difference) of fraction between each year.\n\n\n\nE7.R\n\nbabynames_fraction %>%\n  # Arrange the data in order of name, then year \n  arrange(name, year) %>%\n  # Group the data by name\n  group_by(name) %>%\n  # Add a ratio column that contains the ratio of fraction between each year \n  mutate(ratio = fraction / lag(fraction))"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#biggest-jumps-in-a-name",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#biggest-jumps-in-a-name",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "19.8 Biggest jumps in a name",
    "text": "19.8 Biggest jumps in a name\nPreviously, you added a ratio column to describe the ratio of the frequency of a baby name between consecutive years to describe the changes in the popularity of a name. Now, you’ll look at a subset of that data, called babynames_ratios_filtered, to look further into the names that experienced the biggest jumps in popularity in consecutive years.\n\nbabynames_ratios_filtered <- babynames_fraction %>% arrange(name, year) %>% group_by(name) %>% mutate(ratio = fraction / lag(fraction)) %>% filter(fraction >= 0.00001)"
  },
  {
    "objectID": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp-7",
    "href": "Introduction_to_Importing_Data_in_R_C4.html#instructions-100-xp-7",
    "title": "19  Reproducible Excel work with XLConnect",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFrom each name in the data, keep the observation (the year) with the largest ratio; note the data is already grouped by name.\nSort the ratio column in descending order.\nFilter the babynames_ratios_filtered data further by filtering the fraction column to only display results greater than or equal to 0.001.\n\n\n\nE8.R\n\nbabynames_ratios_filtered %>%\n  # Extract the largest ratio from each name \n  slice_max(ratio, n=1) %>%\n  # Sort the ratio column in descending order \n  arrange(desc(ratio)) %>%\n  # Filter for fractions greater than or equal to 0.001\n  filter(fraction >= 0.001)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C1.html#selecting-columns",
    "href": "Data_Manipulation_with_dplyr_C1.html#selecting-columns",
    "title": "20  Transforming Data with dplyr",
    "section": "20.1 Selecting columns",
    "text": "20.1 Selecting columns\nSelect the following four columns from the counties variable:\n\nstate county population poverty\n\nYou don’t need to save the result to a variable."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C1.html#instructions-100-xp",
    "href": "Data_Manipulation_with_dplyr_C1.html#instructions-100-xp",
    "title": "20  Transforming Data with dplyr",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nSelect the columns listed from the counties variable.\n\n\nE1.R\n\ncounties %>%\n  # Select the columns\n select(state, county, population, poverty)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C1.html#arranging-observations",
    "href": "Data_Manipulation_with_dplyr_C1.html#arranging-observations",
    "title": "20  Transforming Data with dplyr",
    "section": "20.2 Arranging observations",
    "text": "20.2 Arranging observations\nHere you see the counties_selected dataset with a few interesting variables selected. These variables: private_work, public_work, self_employed describe whether people work for the government, for private companies, or for themselves.\nIn these exercises, you’ll sort these observations to find the most interesting cases."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C1.html#instructions-100-xp-1",
    "href": "Data_Manipulation_with_dplyr_C1.html#instructions-100-xp-1",
    "title": "20  Transforming Data with dplyr",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nAdd a verb to sort the observations of the public_work variable in descending order.\n\n\nE2.R\n\ncounties_selected <- counties %>%\n  select(state, county, population, private_work, public_work, self_employed)\n\ncounties_selected %>%\n  # Add a verb to sort in descending order of public_work\n  arrange(desc(public_work))"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C1.html#filtering-for-conditions",
    "href": "Data_Manipulation_with_dplyr_C1.html#filtering-for-conditions",
    "title": "20  Transforming Data with dplyr",
    "section": "20.3 Filtering for conditions",
    "text": "20.3 Filtering for conditions\nYou use the filter() verb to get only observations that match a particular condition, or match multiple conditions."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C1.html#instructions-100-xp-2",
    "href": "Data_Manipulation_with_dplyr_C1.html#instructions-100-xp-2",
    "title": "20  Transforming Data with dplyr",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFind only the counties that have a population above one million (1000000).\nFind only the counties in the state of California that also have a population above one million (1000000).\n\n\n\nE3.R\n\ncounties_selected <- counties %>%\n  select(state, county, population)\n\ncounties_selected %>%\n  # Filter for counties with a population above 1000000\n  filter(population > 1000000)\n\n\ncounties_selected <- counties %>%\n  select(state, county, population)\n\ncounties_selected %>%\n  # Filter for counties with a population above 1000000\n  filter(state == \"California\",\n         population > 1000000)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C1.html#filtering-and-arranging",
    "href": "Data_Manipulation_with_dplyr_C1.html#filtering-and-arranging",
    "title": "20  Transforming Data with dplyr",
    "section": "20.4 Filtering and arranging",
    "text": "20.4 Filtering and arranging\nWe’re often interested in both filtering and sorting a dataset, to focus on observations of particular interest to you. Here, you’ll find counties that are extreme examples of what fraction of the population works in the private sector."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C1.html#instructions-100-xp-3",
    "href": "Data_Manipulation_with_dplyr_C1.html#instructions-100-xp-3",
    "title": "20  Transforming Data with dplyr",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\nFilter for counties in the state of Texas that have more than ten thousand people (10000), and sort them in descending order of the percentage of people employed in private work.\n\n\nE4.R\n\ncounties_selected <- counties %>%\n  select(state, county, population, private_work, public_work, self_employed)\n\n# Filter for Texas and more than 10000 people; sort in descending order of \n#private_work\ncounties_selected %>%\n  # Filter for Texas and more than 10000 people\n  filter(state == \"Texas\",\n         population > 10000) %>%\n  # Sort in descending order of private_work\n  arrange(desc(private_work))"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C1.html#calculating-the-percentage-of-women-in-a-county",
    "href": "Data_Manipulation_with_dplyr_C1.html#calculating-the-percentage-of-women-in-a-county",
    "title": "20  Transforming Data with dplyr",
    "section": "20.5 Calculating the percentage of women in a county",
    "text": "20.5 Calculating the percentage of women in a county\nThe dataset includes columns for the total number (not percentage) of men and women in each county. You could use this, along with the population variable, to compute the fraction of men (or women) within each county.\nIn this exercise, you’ll select the relevant columns yourself."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C1.html#instructions-100-xp-4",
    "href": "Data_Manipulation_with_dplyr_C1.html#instructions-100-xp-4",
    "title": "20  Transforming Data with dplyr",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nSelect the columns state, county, population, men, and women.\nAdd a new variable called proportion_women with the fraction of the county’s population made up of women.\n\n\n\nE5.R\n\ncounties_selected <- counties %>%\n  # Select the columns state, county, population, men, and women\n  select(state, county, population, men, women)\n\ncounties_selected %>%\n  # Calculate proportion_women as the fraction of the population made up of \n  women\n  mutate(proportion_women= women / population)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C1.html#select-mutate-filter-and-arrange",
    "href": "Data_Manipulation_with_dplyr_C1.html#select-mutate-filter-and-arrange",
    "title": "20  Transforming Data with dplyr",
    "section": "20.6 Select, mutate, filter, and arrange",
    "text": "20.6 Select, mutate, filter, and arrange\nIn this exercise, you’ll put together everything you’ve learned in this chapter (select(), mutate(), filter() and arrange()), to find the counties with the highest proportion of men."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C1.html#instructions-100-xp-5",
    "href": "Data_Manipulation_with_dplyr_C1.html#instructions-100-xp-5",
    "title": "20  Transforming Data with dplyr",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nSelect only the columns state, county, population, men, and women.\nAdd a variable proportion_men with the fraction of the county’s population made up of men.\nFilter for counties with a population of at least ten thousand (10000).\nArrange counties in descending order of their proportion of men.\n\n\n\nE6.R\n\n\ncounties %>%\n  # Select the five columns \n  select(state, county, population, men, women) %>%\n  # Add the proportion_men variable\n  mutate(proportion_men = men / population) %>%\n  # Filter for population of at least 10,000\n  filter(population >= 10000) %>%\n  # Arrange proportion of men in descending order \n  arrange(desc(proportion_men))"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#counting-by-region",
    "href": "Data_Manipulation_with_dplyr_C2.html#counting-by-region",
    "title": "21  Aggregating Data",
    "section": "21.1 Counting by region",
    "text": "21.1 Counting by region\nThe counties dataset contains columns for region, state, population, and the number of citizens, which we selected and saved as the counties_selected table. In this exercise, you’ll focus on the region column.\n\ncounties_selected <- counties %>% select(county, region, state, population, citizens)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp",
    "href": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp",
    "title": "21  Aggregating Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse count() to find the number of counties in each region, using a second argument to sort in descending order.\n\n\n\nE1.R\n\n# Use count to find the number of counties in each region\ncounties_selected %>%\n  count(region, sort=TRUE)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#counting-citizens-by-state",
    "href": "Data_Manipulation_with_dplyr_C2.html#counting-citizens-by-state",
    "title": "21  Aggregating Data",
    "section": "21.2 Counting citizens by state",
    "text": "21.2 Counting citizens by state\nYou can weigh your count by particular variables rather than finding the number of counties. In this case, you’ll find the number of citizens in each state.\n\ncounties_selected <- counties %>% select(county, region, state, population, citizens)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-1",
    "href": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-1",
    "title": "21  Aggregating Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nCount the number of counties in each state, weighted based on the citizens column, and sorted in descending order.\n\n\n\nE2.R\n\n# Find number of counties per state, weighted by citizens, sorted in descending order\ncounties_selected %>%\n    count(state, wt = citizens, sort = TRUE)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#mutating-and-counting",
    "href": "Data_Manipulation_with_dplyr_C2.html#mutating-and-counting",
    "title": "21  Aggregating Data",
    "section": "21.3 Mutating and counting",
    "text": "21.3 Mutating and counting\nYou can combine multiple verbs together to answer increasingly complicated questions of your data. For example: “What are the US states where the most people walk to work?”\nYou’ll use the walk column, which offers a percentage of people in each county that walk to work, to add a new column and count based on it.\n\ncounties_selected <- counties %>% select(county, region, state, population, walk)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-2",
    "href": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-2",
    "title": "21  Aggregating Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse mutate() to calculate and add a column called population_walk, containing the total number of people who walk to work in a county.\nUse a (weighted and sorted) count() to find the total number of people who walk to work in each state.\n\n\n\nE3.R\n\ncounties_selected %>%\n  # Add population_walk containing the total number of people who walk to work \n    mutate(population_walk = population * walk / 100) %>%\n  # Count weighted by the new column, sort in descending order\n    count(state, wt = population_walk, sort = TRUE)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#summarizing",
    "href": "Data_Manipulation_with_dplyr_C2.html#summarizing",
    "title": "21  Aggregating Data",
    "section": "21.4 Summarizing",
    "text": "21.4 Summarizing\nThe summarize() verb is very useful for collapsing a large dataset into a single observation.\n\ncounties_selected <- counties %>% select(county, population, income, unemployment)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-3",
    "href": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-3",
    "title": "21  Aggregating Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nSummarize the counties dataset to find the following columns: min_population (with the smallest population), max_unemployment (with the maximum unemployment), and average_income (with the mean of the income variable).\n\n\n\nE4.R\n\ncounties_selected %>%\n  # Summarize to find minimum population, maximum unemployment, and average income\n  summarize(min_population = min(population),\n            max_unemployment = max(unemployment),\n            average_income = mean(income))"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#summarizing-by-state",
    "href": "Data_Manipulation_with_dplyr_C2.html#summarizing-by-state",
    "title": "21  Aggregating Data",
    "section": "21.5 Summarizing by state",
    "text": "21.5 Summarizing by state\nAnother interesting column is land_area, which shows the land area in square miles. Here, you’ll summarize both population and land area by state, with the purpose of finding the density (in people per square miles).\n\ncounties_selected <- counties %>% select(state, county, population, land_area)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-4",
    "href": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-4",
    "title": "21  Aggregating Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nGroup the data by state, and summarize to create the columns total_area (with total area in square miles) and total_population (with total population).\nAdd a density column with the people per square mile, then arrange in descending order.\n\n\n\nE5.R\n\ncounties_selected %>%\n  # Group by state \n  group_by(state) %>%\n  # Find the total area and population\n  summarize(total_area = sum(land_area),\n            total_population = sum(population))\n            \n\ncounties_selected %>%\n  group_by(state) %>%\n  summarize(total_area = sum(land_area),\n            total_population = sum(population)) %>%\n  # Add a density column\n  mutate(density = total_population / total_area) %>%\n  # Sort by density in descending order\n  arrange(desc(density))"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#summarizing-by-state-and-region",
    "href": "Data_Manipulation_with_dplyr_C2.html#summarizing-by-state-and-region",
    "title": "21  Aggregating Data",
    "section": "21.6 Summarizing by state and region",
    "text": "21.6 Summarizing by state and region\nYou can group by multiple columns instead of grouping by one. Here, you’ll practice aggregating by state and region, and notice how useful it is for performing multiple aggregations in a row.\n\ncounties_selected <- counties %>% select(region, state, county, population)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-5",
    "href": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-5",
    "title": "21  Aggregating Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nSummarize to find the total population, as a column called total_pop, in each combination of region and state, grouped in that order.\nNotice the tibble is still grouped by region; use another summarize() step to calculate two new columns: the average state population in each region (average_pop) and the median state population in each region (median_pop).\n\n\n\nE6.R\n\ncounties_selected %>%\n  # Group and summarize to find the total population\n  group_by(region, state) %>%\n  summarize(total_pop = sum(population))\n  \ncounties_selected %>%\n  # Group and summarize to find the total population\n  group_by(region, state) %>%\n  summarize(total_pop = sum(population)) %>%\n  # Calculate the average_pop and median_pop columns \n  summarize(average_pop = mean(total_pop),\n            median_pop = median(total_pop))"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#selecting-a-county-from-each-region",
    "href": "Data_Manipulation_with_dplyr_C2.html#selecting-a-county-from-each-region",
    "title": "21  Aggregating Data",
    "section": "21.7 Selecting a county from each region",
    "text": "21.7 Selecting a county from each region\nPreviously, you used the walk column, which offers a percentage of people in each county that walk to work, to add a new column and count to find the total number of people who walk to work in each county.\nNow, you’re interested in finding the county within each region with the highest percentage of citizens who walk to work.\n\ncounties_selected <- counties %>% select(region, state, county, metro, population, walk)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-6",
    "href": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-6",
    "title": "21  Aggregating Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFind the county in each region with the highest percentage of citizens who walk to work.\n\n\n\nE7.R\n\ncounties_selected %>%\n  # Group by region\n  group_by(region) %>%\n  # Find the county with the highest percentage of people who walk to work\nslice_max(walk, n = 1)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#finding-the-lowest-income-state-in-each-region",
    "href": "Data_Manipulation_with_dplyr_C2.html#finding-the-lowest-income-state-in-each-region",
    "title": "21  Aggregating Data",
    "section": "21.8 Finding the lowest-income state in each region",
    "text": "21.8 Finding the lowest-income state in each region\nYou’ve been learning to combine multiple dplyr verbs together. Here, you’ll combine group_by(), summarize(), and slice_min() to find the state in each region with the highest income.\nWhen you group by multiple columns and then summarize, it’s important to remember that the summarize “peels off” one of the groups, but leaves the rest on. For example, if you group_by(X, Y) then summarize, the result will still be grouped by X.\ncounties_selected <- counties %>% select(region, state, county, population, income)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-7",
    "href": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-7",
    "title": "21  Aggregating Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nCalculate the average income (as average_income) of counties within each region and state (notice the group_by() has already been done for you).\nFind the state with the lowest average_income in each region.\n\n\n\nE8.R\n\ncounties_selected %>%\n  group_by(region, state) %>%\n  # Calculate average income\n  summarize(average_income = mean(income)) %>%\n  # Find the lowest income state in each region\n  slice_min(average_income, n=1)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#using-summarize-slice_max-and-count-together",
    "href": "Data_Manipulation_with_dplyr_C2.html#using-summarize-slice_max-and-count-together",
    "title": "21  Aggregating Data",
    "section": "21.9 Using summarize, slice_max, and count together",
    "text": "21.9 Using summarize, slice_max, and count together\nIn this chapter, you’ve learned to use six dplyr verbs related to aggregation: count(), group_by(), summarize(), ungroup(), slice_max(), and slice_min(). In this exercise, you’ll combine them to answer a question:\nIn how many states do more people live in metro areas than non-metro areas?\nRecall that the metro column has one of the two values “Metro” (for high-density city areas) or “Nonmetro” (for suburban and country areas).\n\ncounties_selected <- counties %>% select(state, metro, population)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-8",
    "href": "Data_Manipulation_with_dplyr_C2.html#instructions-100-xp-8",
    "title": "21  Aggregating Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFor each combination of state and metro, find the total population as total_pop.\nExtract the most populated row from each state, which will be either Metro or Nonmetro.\nUngroup, then count how often Metro or Nonmetro appears to see how many states have more people living in those areas.\n\n\n\nE9.R\n\ncounties_selected %>%\n  # Find the total population for each combination of state and metro\n  group_by(state, metro) %>%\n  summarize(total_pop = sum(population))\n  \ncounties_selected %>%\n  # Find the total population for each combination of state and metro\n  group_by(state, metro) %>%\n  summarize(total_pop = sum(population)) %>%\n  # Extract the most populated row for each state\n  slice_max(total_pop, n = 1)\n  \ncounties_selected %>%\n  # Find the total population for each combination of state and metro\n  group_by(state, metro) %>%\n  summarize(total_pop = sum(population)) %>%\n  # Extract the most populated row for each state\n  slice_max(total_pop, n = 1) %>%\n  # Count the states with more people in Metro or Nonmetro areas\n  ungroup() %>% \n  count(metro)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C3.html#selecting-columns",
    "href": "Data_Manipulation_with_dplyr_C3.html#selecting-columns",
    "title": "22  Selecting and Transforming Data",
    "section": "22.1 Selecting columns",
    "text": "22.1 Selecting columns\nUsing the select() verb, we can answer interesting questions about our dataset by focusing in on related groups of verbs. The colon (:) is useful for getting many columns at a time."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C3.html#instructions-100-xp",
    "href": "Data_Manipulation_with_dplyr_C3.html#instructions-100-xp",
    "title": "22  Selecting and Transforming Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse glimpse() to examine all the variables in the counties table.\nSelect the columns for state, county, population, and (using a colon) all five of those industry-related variables; there are five consecutive variables in the table related to the industry of people’s work: professional, service, office, construction, and production.\nArrange the table in descending order of service to find which counties have the highest rates of working in the service industry.\n\n\n\nE1.R\n\n# Glimpse the counties table\nglimpse(counties)\n\ncounties %>%\n  # Select state, county, population, and industry-related columns\n  select(state, county, population,professional:production) %>%\n  # Arrange service in descending order \n   arrange(desc(service))"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C3.html#select-helpers",
    "href": "Data_Manipulation_with_dplyr_C3.html#select-helpers",
    "title": "22  Selecting and Transforming Data",
    "section": "22.2 Select helpers",
    "text": "22.2 Select helpers\nIn the video you learned about the select helper starts_with(). Another select helper is ends_with(), which finds the columns that end with a particular string."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C3.html#instructions-100-xp-1",
    "href": "Data_Manipulation_with_dplyr_C3.html#instructions-100-xp-1",
    "title": "22  Selecting and Transforming Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nSelect the columns state, county, population, and all those that end with work.\nFilter just for the counties where at least 50% of the population is engaged in public work.\n\n\n\nE2.R\n\ncounties %>%\n  # Select the state, county, population, and those ending with \"work\"\n  select(state, county, population,ends_with(\"work\")) %>%\n  # Filter for counties that have at least 50% of people engaged in public work\n  filter(public_work  >= 50)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C3.html#renaming-a-column-after-count",
    "href": "Data_Manipulation_with_dplyr_C3.html#renaming-a-column-after-count",
    "title": "22  Selecting and Transforming Data",
    "section": "22.3 Renaming a column after count",
    "text": "22.3 Renaming a column after count\nThe rename() verb is often useful for changing the name of a column that comes out of another verb, such as count(). In this exercise, you’ll rename the default n column generated from count() to something more descriptive."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C3.html#instructions-100-xp-2",
    "href": "Data_Manipulation_with_dplyr_C3.html#instructions-100-xp-2",
    "title": "22  Selecting and Transforming Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse count() to determine how many counties are in each state.\nNotice the n column in the output; use rename() to rename that to num_counties.\n\n\n\nE3.R\n\ncounties %>%\n  # Count the number of counties in each state\n  count(state)\n  \ncounties %>%\n  # Count the number of counties in each state\n  count(state) %>%\n  # Rename the n column to num_counties\n  rename(num_counties = n)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C3.html#renaming-a-column-as-part-of-a-select",
    "href": "Data_Manipulation_with_dplyr_C3.html#renaming-a-column-as-part-of-a-select",
    "title": "22  Selecting and Transforming Data",
    "section": "22.4 Renaming a column as part of a select",
    "text": "22.4 Renaming a column as part of a select\nrename() isn’t the only way you can choose a new name for a column; you can also choose a name as part of a select()."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C3.html#instructions-100-xp-3",
    "href": "Data_Manipulation_with_dplyr_C3.html#instructions-100-xp-3",
    "title": "22  Selecting and Transforming Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nSelect the columns state, county, and poverty from the counties dataset; in the same step, rename the poverty column to poverty_rate.\n\n\n\nE4.R\n\ncounties %>%\n  # Select state, county, and poverty as poverty_rate\n   select(state, county, poverty_rate = poverty)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C3.html#using-transmute",
    "href": "Data_Manipulation_with_dplyr_C3.html#using-transmute",
    "title": "22  Selecting and Transforming Data",
    "section": "22.5 Using transmute",
    "text": "22.5 Using transmute\nAs you learned in the video, the transmute verb allows you to control which variables you keep, which variables you calculate, and which variables you drop."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C3.html#instructions-100-xp-4",
    "href": "Data_Manipulation_with_dplyr_C3.html#instructions-100-xp-4",
    "title": "22  Selecting and Transforming Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nKeep only the state, county, and population columns, and add a new column, density, that contains the population per land_area.\nFilter for only counties with a population greater than one million.\nSort the table in ascending order of density.\n\n\n\nE5.R\n\ncounties %>%\n  # Keep the state, county, and populations columns, and add a density column\n transmute(state, county, population, density = population / land_area) %>%\n  # Filter for counties with a population greater than one million \n  filter(population>1000000)%>%\n  # Sort density in ascending order \n  arrange(density)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C3.html#choosing-among-the-four-verbs",
    "href": "Data_Manipulation_with_dplyr_C3.html#choosing-among-the-four-verbs",
    "title": "22  Selecting and Transforming Data",
    "section": "22.6 Choosing among the four verbs",
    "text": "22.6 Choosing among the four verbs\nIn this chapter you’ve learned about the four verbs: select, mutate, transmute, and rename. Here, you’ll choose the appropriate verb for each situation. You won’t need to change anything inside the parentheses."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C3.html#instructions-100-xp-5",
    "href": "Data_Manipulation_with_dplyr_C3.html#instructions-100-xp-5",
    "title": "22  Selecting and Transforming Data",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nChoose the right verb for changing the name of the unemployment column to unemployment_rate\nChoose the right verb for keeping only the columns state, county, and the ones containing poverty.\nCalculate a new column called fraction_women with the fraction of the population made up of women, without dropping any columns.\nKeep only three columns: the state, county, and employed / population, which you’ll call employment_rate.\n\n\n\nE6.R\n\n# Change the name of the unemployment column\ncounties %>%\n  rename(unemployment_rate = unemployment)\n\n# Keep the state and county columns, and the columns containing poverty\ncounties %>%\n  select(state, county, contains(\"poverty\"))\n\n# Calculate the fraction_women column without dropping the other columns\ncounties %>%\n  mutate(fraction_women = women / population)\n\n# Keep only the state, county, and employment_rate columns\ncounties %>%\n  transmute(state, county, employment_rate = employed / population)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#filtering-and-arranging-for-one-year",
    "href": "Data_Manipulation_with_dplyr_C4.html#filtering-and-arranging-for-one-year",
    "title": "23  Case Study: The babynames Dataset",
    "section": "23.1 Filtering and arranging for one year",
    "text": "23.1 Filtering and arranging for one year\nThe dplyr verbs you’ve learned are useful for exploring data. For instance, you could find out the most common names in a particular year."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp",
    "href": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp",
    "title": "23  Case Study: The babynames Dataset",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFilter for only the year 1990.\nSort the table in descending order of the number of babies born.\n\n\n\nE1.R\n\nbabynames %>%\n  # Filter for the year 1990\n  filter(year == 1990) %>%\n  # Sort the number column in descending order \n  arrange(desc(number))"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#finding-the-most-popular-names-each-year",
    "href": "Data_Manipulation_with_dplyr_C4.html#finding-the-most-popular-names-each-year",
    "title": "23  Case Study: The babynames Dataset",
    "section": "23.2 Finding the most popular names each year",
    "text": "23.2 Finding the most popular names each year\nYou saw that you could use filter() and arrange() to find the most common names in one year. However, you could also use group_by() and slice_max() to find the most common name in every year."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp-1",
    "href": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp-1",
    "title": "23  Case Study: The babynames Dataset",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse group_by() and slice_max() to find the most common name for US babies in each year.\n\n\n\nE2.R\n\nbabynames %>%\n  # Find the most common name in each year\n  group_by(year) %>%\n  slice_max(number, n = 1)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#visualizing-names-with-ggplot2",
    "href": "Data_Manipulation_with_dplyr_C4.html#visualizing-names-with-ggplot2",
    "title": "23  Case Study: The babynames Dataset",
    "section": "23.3 Visualizing names with ggplot2",
    "text": "23.3 Visualizing names with ggplot2\nThe dplyr package is very useful for exploring data, but it’s especially useful when combined with other tidyverse packages like ggplot2."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp-2",
    "href": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp-2",
    "title": "23  Case Study: The babynames Dataset",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFilter for only the names Steven, Thomas, and Matthew, and assign it to an object called selected_names.\nVisualize those three names as a line plot over time, with each name represented by a different color.\n\n\n\nE3.R\n\nselected_names <- babynames %>%\n  # Filter for the names Steven, Thomas, and Matthew \n  filter(name %in% c(\"Steven\", \"Thomas\", \"Matthew\"))\n  \nselected_names <- babynames %>%\n  # Filter for the names Steven, Thomas, and Matthew \n  filter(name %in% c(\"Steven\", \"Thomas\", \"Matthew\"))\n\n# Plot the names using a different color for each name\nggplot(selected_names, aes(x = year, y = number, color = name)) +\n  geom_line()"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#finding-the-year-each-name-is-most-common",
    "href": "Data_Manipulation_with_dplyr_C4.html#finding-the-year-each-name-is-most-common",
    "title": "23  Case Study: The babynames Dataset",
    "section": "23.4 Finding the year each name is most common",
    "text": "23.4 Finding the year each name is most common\nIn an earlier video, you learned how to filter for a particular name to determine the frequency of that name over time. Now, you’re going to explore which year each name was the most common.\nTo do this, you’ll be combining the grouped mutate approach with a slice_max()."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp-3",
    "href": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp-3",
    "title": "23  Case Study: The babynames Dataset",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFirst, calculate the total number of people born in that year in this dataset as year_total.\nNext, use year_total to calculate the fraction of people born in each year that have each name.\nNow use your newly calculated fraction column, in combination with slice_max(), to identify the year each name was most common.\n\n\n\nE4.R\n\n# Calculate the fraction of people born each year with the same name\nbabynames %>%\n  group_by(year) %>%\n  mutate(year_total = sum(number)) %>%\n  ungroup() %>%\n  mutate(fraction = number / year_total)\n\n# Calculate the fraction of people born each year with the same name\nbabynames %>%\n  group_by(year) %>%\n  mutate(year_total = sum(number)) %>%\n  ungroup() %>%\n  mutate(fraction = number / year_total) %>%\n  # Find the year each name is most common\n  group_by(name) %>%\n  slice_max(fraction, n = 1)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#adding-the-total-and-maximum-for-each-name",
    "href": "Data_Manipulation_with_dplyr_C4.html#adding-the-total-and-maximum-for-each-name",
    "title": "23  Case Study: The babynames Dataset",
    "section": "23.5 Adding the total and maximum for each name",
    "text": "23.5 Adding the total and maximum for each name\nIn the video, you learned how you could group by the year and use mutate() to add a total for that year.\nIn these exercises, you’ll learn to normalize by a different, but also interesting metric: you’ll divide each name by the maximum for that name. This means that every name will peak at 1.\nOnce you add new columns, the result will still be grouped by name. This splits it into 48,000 groups, which actually makes later steps like mutates slower."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp-4",
    "href": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp-4",
    "title": "23  Case Study: The babynames Dataset",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nUse a grouped mutate to add two columns:\nname_total: the sum of the number of babies born with that name in the entire dataset.\nname_max: the maximum number of babies born with that name in any year.\nAdd another step to ungroup the table.\nAdd a column called fraction_max containing the number in the year divided by name_max.\n\n\n\nE5.R\n\nbabynames %>%\n  # Add columns name_total and name_max for each name\n  group_by(name) %>%\n  mutate(name_total = sum(number),\n         name_max = max(number))\n         \nbabynames %>%\n  # Add columns name_total and name_max for each name\n  group_by(name) %>%\n  mutate(name_total = sum(number),\n         name_max = max(number)) %>%\n  # Ungroup the table \n  ungroup() %>%\n  # Add the fraction_max column containing the number by the name maximum \n  mutate(fraction_max = number / name_max)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#visualizing-the-normalized-change-in-popularity",
    "href": "Data_Manipulation_with_dplyr_C4.html#visualizing-the-normalized-change-in-popularity",
    "title": "23  Case Study: The babynames Dataset",
    "section": "23.6 Visualizing the normalized change in popularity",
    "text": "23.6 Visualizing the normalized change in popularity\nYou picked a few names and calculated each of them as a fraction of their peak. This is a type of “normalizing” a name, where you’re focused on the relative change within each name rather than the overall popularity of the name.\nIn this exercise, you’ll visualize the normalized popularity of each name. Your work from the previous exercise, names_normalized, has been provided for you.\n\nnames_normalized <- babynames %>% group_by(name) %>% mutate(name_total = sum(number), name_max = max(number)) %>% ungroup() %>% mutate(fraction_max = number / name_max)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp-5",
    "href": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp-5",
    "title": "23  Case Study: The babynames Dataset",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFilter the names_normalized table to limit it to the three names Steven, Thomas, and Matthew.\nCreate a line plot to visualize fraction_max over time, colored by name.\n\n\n\nE6.R\n\nnames_filtered <- names_normalized %>%\n  # Filter for the names Steven, Thomas, and Matthew\n  filter(name %in% c(\"Steven\", \"Thomas\", \"Matthew\"))\n\n# Visualize these names over time\nggplot(names_filtered, aes(x = year, y = fraction_max, color = name)) +\n  geom_line()"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#using-ratios-to-describe-the-frequency-of-a-name",
    "href": "Data_Manipulation_with_dplyr_C4.html#using-ratios-to-describe-the-frequency-of-a-name",
    "title": "23  Case Study: The babynames Dataset",
    "section": "23.7 Using ratios to describe the frequency of a name",
    "text": "23.7 Using ratios to describe the frequency of a name\nIn the video, you learned how to find the difference in the frequency of a baby name between consecutive years. What if instead of finding the difference, you wanted to find the ratio?\nYou’ll start with the babynames_fraction data already, so that you can consider the popularity of each name within each year."
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp-6",
    "href": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp-6",
    "title": "23  Case Study: The babynames Dataset",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nArrange the data in ascending order of name and then year.\nGroup by name so that your mutate works within each name.\nAdd a column ratio containing the ratio (not difference) of fraction between each year.\n\n\n\nE7.R\n\nbabynames_fraction %>%\n  # Arrange the data in order of name, then year \n  arrange(name, year) %>%\n  # Group the data by name\n  group_by(name) %>%\n  # Add a ratio column that contains the ratio of fraction between each year \n  mutate(ratio = fraction / lag(fraction))"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#biggest-jumps-in-a-name",
    "href": "Data_Manipulation_with_dplyr_C4.html#biggest-jumps-in-a-name",
    "title": "23  Case Study: The babynames Dataset",
    "section": "23.8 Biggest jumps in a name",
    "text": "23.8 Biggest jumps in a name\nPreviously, you added a ratio column to describe the ratio of the frequency of a baby name between consecutive years to describe the changes in the popularity of a name. Now, you’ll look at a subset of that data, called babynames_ratios_filtered, to look further into the names that experienced the biggest jumps in popularity in consecutive years.\n\nbabynames_ratios_filtered <- babynames_fraction %>% arrange(name, year) %>% group_by(name) %>% mutate(ratio = fraction / lag(fraction)) %>% filter(fraction >= 0.00001)"
  },
  {
    "objectID": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp-7",
    "href": "Data_Manipulation_with_dplyr_C4.html#instructions-100-xp-7",
    "title": "23  Case Study: The babynames Dataset",
    "section": "Instructions 100 XP",
    "text": "Instructions 100 XP\n\nFrom each name in the data, keep the observation (the year) with the largest ratio; note the data is already grouped by name.\nSort the ratio column in descending order.\nFilter the babynames_ratios_filtered data further by filtering the fraction column to only display results greater than or equal to 0.001.\n\n\n\nE8.R\n\nbabynames_ratios_filtered %>%\n  # Extract the largest ratio from each name \n  slice_max(ratio, n=1) %>%\n  # Sort the ratio column in descending order \n  arrange(desc(ratio)) %>%\n  # Filter for fractions greater than or equal to 0.001\n  filter(fraction >= 0.001)"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "24  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  }
]